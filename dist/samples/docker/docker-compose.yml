services:

  # MongoDB
  mongodb:
    container_name: awsmock-mongodb
    image: mongo:latest
    environment:
      - MONGO_INITDB_DATABASE=admin
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - "27017:27017"
    volumes:
      - dbdata:/data/db
    networks:
      - "local"

  # AwsMock
  awsmock:
    container_name: awsmock
    image: jensvogt/awsmock:latest
    hostname: awsmock
    depends_on:
      - mongodb
    environment:
      - AWSMOCK_MONGODB_ACTIVE=true
      - AWSMOCK_MONGODB_NAME=awsmock
      - AWSMOCK_MONGODB_HOST=awsmock-mongodb
      - AWSMOCK_MONGODB_PORT=27017
      - AWSMOCK_MONGODB_USER=admin
      - AWSMOCK_MONGODB_PASSWORD=admin
      - AWSMOCK_LOG_LEVEL=debug
    networks:
      - "local"
    ports:
      - "4566:4566"
      - "4567:4567"
      - "8081:8081"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: on-failure
    healthcheck:
      test: [ "CMD", "awsmock", "s3",  "ls" ]
      interval: 60s
      timeout: 10s
      retries: 15

  dynamodb-local:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    networks:
      - "local"

# Volumes
volumes:
  dbdata:

# Networks
networks:
  local:
    driver: "bridge"
