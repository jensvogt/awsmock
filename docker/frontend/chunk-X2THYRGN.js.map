{
  "version": 3,
  "sources": ["src/app/services/cognito.service.ts", "src/app/modules/cognito/user-pool-add/user-pool-add.component.ts", "src/app/modules/cognito/user-pool-add/user-pool-add.component.html", "src/app/modules/cognito/user-pool-list/state/cognito-userpool-list.actions.ts", "src/app/modules/cognito/user-pool-list/state/cognito-userpool-list.reducer.ts", "src/app/modules/cognito/user-pool-list/state/cognito-userpool-list.selectors.ts", "src/app/modules/cognito/user-pool-list/user-pool-list.component.ts", "src/app/modules/cognito/user-pool-list/user-pool-list.component.html", "src/app/modules/cognito/service/cognito.service.ts", "src/app/modules/cognito/user-add/user-add.component.ts", "src/app/modules/cognito/user-add/user-add.component.html", "src/app/modules/cognito/user-list/state/cognito-user-list.actions.ts", "src/app/modules/cognito/user-list/state/cognito-user-list.reducer.ts", "src/app/modules/cognito/user-list/state/cognito-user-list.selectors.ts", "src/app/modules/cognito/user-list/user-list.component.ts", "src/app/modules/cognito/user-list/user-list.component.html", "src/app/modules/cognito/cognito-routing.module.ts", "src/app/modules/cognito/user-pool-list/state/cognito-userpool-list.effects.ts", "src/app/modules/cognito/user-list/state/cognito-user-list.effects.ts", "src/app/modules/cognito/cognito.module.ts"],
  "sourcesContent": ["// Angular Modules\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from \"../../environments/environment\";\nimport {CognitoConfig} from \"./awsmock-http-config\";\nimport {SortColumn} from \"../shared/sorting/sorting.component\";\n\n@Injectable()\nexport class CognitoService {\n\n    cognitoConfig = new CognitoConfig;\n    url: string = environment.gatewayEndpoint + '/';\n\n    constructor(private http: HttpClient) {\n    }\n\n    /**\n     * This is a fake AWS NodeJS SDK request. This will only work, if runs against a AwsMock instance.\n     */\n    public listUserPools(maxResults: number, pageIndex: number, sortColumns: SortColumn[]) {\n        let headers = this.cognitoConfig.cognitoOptions.headers.set('X-Amz-Target', \"Cognito.ListUserPools\");\n        const body = {\n            Region: environment.awsmockRegion,\n            MaxResults: maxResults,\n            PageIndex: pageIndex,\n            sortColumns: sortColumns\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public listUsers(userPoolId: string, maxResults: number, pageIndex: number, sortColumns: SortColumn[]) {\n        let headers = this.cognitoConfig.cognitoOptions.headers.set('X-Amz-Target', \"Cognito.ListUsers\");\n        const body = {\n            Region: environment.awsmockRegion,\n            UserPoolId: userPoolId,\n            MaxResults: maxResults,\n            PageIndex: pageIndex,\n            SortColumns: sortColumns\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public deleteUserPool(userPoolId: string) {\n        let headers = this.cognitoConfig.cognitoOptions.headers.set('X-Amz-Target', \"Cognito.DeleteUserPool\");\n        const body = {\n            Region: environment.awsmockRegion,\n            UserPoolId: userPoolId\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public deleteUser(userPoolId: string, userName: string) {\n        let headers = this.cognitoConfig.cognitoOptions.headers.set('X-Amz-Target', \"Cognito.AdminDeleteUser\");\n        const body = {\n            Region: environment.awsmockRegion,\n            UserPoolId: userPoolId,\n            Username: userName\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public createUserPool(userPoolName: string) {\n        let headers = this.cognitoConfig.cognitoOptions.headers.set('X-Amz-Target', \"Cognito.CreateUserPool\");\n        const body = {\n            Region: environment.awsmockRegion,\n            PoolName: userPoolName\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public createUser(userPoolId: string, userName: string) {\n        let headers = this.cognitoConfig.cognitoOptions.headers.set('X-Amz-Target', \"Cognito.AdminCreateUser\");\n        const body = {\n            Region: environment.awsmockRegion,\n            Username: userName,\n            UserPoolId: userPoolId\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n}\n", "import {\n    MatDialogActions,\n    MatDialogClose,\n    MatDialogContent,\n    MatDialogRef,\n    MatDialogTitle\n} from \"@angular/material/dialog\";\nimport {Component, OnInit} from \"@angular/core\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButton} from \"@angular/material/button\";\nimport {MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatOption, MatSelect} from \"@angular/material/select\";\nimport {MatTextColumn} from \"@angular/material/table\";\nimport {MatInput} from \"@angular/material/input\";\n\n@Component({\n    selector: 'user-pool-add-dialog',\n    templateUrl: './user-pool-add.component.html',\n    standalone: true,\n    imports: [\n        MatDialogContent,\n        MatDialogTitle,\n        MatDialogActions,\n        MatButton,\n        MatDialogClose,\n        MatFormField,\n        MatSelect,\n        MatOption,\n        MatLabel,\n        FormsModule,\n        MatTextColumn,\n        MatInput,\n        ReactiveFormsModule\n    ],\n    styleUrls: ['./user-pool-add.component.scss']\n})\nexport class UserPoolAddComponentDialog implements OnInit {\n\n    userPoolName: string = '';\n\n    constructor(private dialogRef: MatDialogRef<UserPoolAddComponentDialog>) {\n    }\n\n    ngOnInit() {\n    }\n\n    save() {\n        this.dialogRef.close(this.userPoolName);\n    }\n\n    close() {\n        this.dialogRef.close(false);\n    }\n}\n", "<h2 mat-dialog-title>Add Cognito User Pool</h2>\n<mat-dialog-content class=\"mat-typography\" style=\"width: 500px\">\n    <mat-form-field style=\"width: 100%\">\n        <mat-label>Userpool Name</mat-label>\n        <input [(ngModel)]=\"userPoolName\" matInput value=\"\">\n    </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n    <button mat-button mat-dialog-close>Cancel</button>\n    <button (click)=\"save()\" cdkFocusInitial mat-button>Add</button>\n</mat-dialog-actions>\n", "import {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {createAction, props} from \"@ngrx/store\";\nimport {UserPoolCountersResponse} from \"../../model/user-pool-item\";\n\nexport const cognitoUserpoolListActions = {\n    initialize: createAction('[cognito-userpool-list] initialize'),\n\n    // Load user pool\n    loadUserPools: createAction('[cognito-userpool-list] Load userpools', props<{ prefix: string, pageSize: number, pageIndex: number, sortColumns: SortColumn[] }>()),\n    loadUserPoolsSuccess: createAction('[cognito-userpool-list] Load userpools success', props<{ userPools: UserPoolCountersResponse }>()),\n    loadUserPoolsFailure: createAction('[cognito-userpool-list] Load userpools error', props<{ error: string }>()),\n\n    // Add user pool\n    addUserPool: createAction('[cognito-userpool-list] Add userpool', props<{ userPoolName: string }>()),\n    addUserPoolSuccess: createAction('[cognito-userpool-list] Add userpool success'),\n    addUserPoolFailure: createAction('[cognito-userpool-list] Add userpool error', props<{ error: string }>()),\n\n    // Delete user pool\n    deleteUserPool: createAction('[cognito-userpool-list] Delete userpool', props<{ userPoolName: string }>()),\n    deleteUserPoolSuccess: createAction('[cognito-userpool-list] Delete userpool success'),\n    deleteUserPoolFailure: createAction('[cognito-userpool-list] Delete userpool error', props<{ error: string }>()),\n}\n", "import {UserPoolCountersResponse} from \"../../model/user-pool-item\";\nimport {createReducer, on} from \"@ngrx/store\";\nimport {cognitoUserpoolListActions} from './cognito-userpool-list.actions';\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\n\nexport const cognitoUserPoolListFeatureKey = 'cognito-userpool-list';\n\nexport interface CognitoUserPoolListState {\n    listUserPoolResponse: UserPoolCountersResponse;\n    prefix: string;\n    pageSize: number;\n    pageIndex: number;\n    loading: boolean;\n    sortColumns: SortColumn[];\n    error: unknown;\n}\n\nexport const initialState: CognitoUserPoolListState = {\n    listUserPoolResponse: {total: 0, userPools: []},\n    prefix: '',\n    pageSize: 10,\n    pageIndex: 0,\n    loading: false,\n    sortColumns: [{column: 'userPoolName', sortDirection: -1}],\n    error: {}\n};\n\nexport const cognitoUserPoolListReducer = createReducer(\n    initialState,\n\n    // Initialize\n    on(cognitoUserpoolListActions.initialize, (state: CognitoUserPoolListState): CognitoUserPoolListState => ({...state, pageIndex: 0, pageSize: 10, loading: true})),\n\n    // Queue list\n    on(cognitoUserpoolListActions.loadUserPools, (state: CognitoUserPoolListState) => ({...state, loading: true})),\n    on(cognitoUserpoolListActions.loadUserPoolsSuccess, (state: CognitoUserPoolListState, {userPools}) => ({\n        ...state,\n        listUserPoolResponse: userPools,\n        loading: false\n    })),\n    on(cognitoUserpoolListActions.loadUserPoolsFailure, (state: CognitoUserPoolListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Add queue\n    on(cognitoUserpoolListActions.addUserPool, (state: CognitoUserPoolListState) => ({...state, loading: true})),\n    on(cognitoUserpoolListActions.addUserPoolSuccess, (state: CognitoUserPoolListState) => ({...state, loading: false})),\n    on(cognitoUserpoolListActions.addUserPoolFailure, (state: CognitoUserPoolListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Delete queue\n    on(cognitoUserpoolListActions.deleteUserPool, (state: CognitoUserPoolListState) => ({...state, loading: true})),\n    on(cognitoUserpoolListActions.deleteUserPoolSuccess, (state: CognitoUserPoolListState) => ({...state, loading: false})),\n    on(cognitoUserpoolListActions.deleteUserPoolFailure, (state: CognitoUserPoolListState, {error}) => ({...state, error: error, loading: false})),\n);", "import {createFeatureSelector, createSelector, DefaultProjectorFn, MemoizedSelector} from \"@ngrx/store\";\nimport {cognitoUserPoolListFeatureKey, CognitoUserPoolListState} from \"./cognito-userpool-list.reducer\";\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {UserPoolCountersResponse} from \"../../model/user-pool-item\";\n\nexport type SelectorType<T> = MemoizedSelector<object, T, DefaultProjectorFn<T>>;\nexport type SelectorFeatureType<T> = MemoizedSelector<object, T>;\n\nconst selectUserPoolListFeature: SelectorFeatureType<CognitoUserPoolListState> =\n    createFeatureSelector<CognitoUserPoolListState>(cognitoUserPoolListFeatureKey);\n\nexport const selectIsLoading: SelectorType<boolean> = createSelector(\n    selectUserPoolListFeature,\n    (state: CognitoUserPoolListState) => state.loading\n);\n\nexport const selectPrefix: SelectorType<string> = createSelector(\n    selectUserPoolListFeature,\n    (state: CognitoUserPoolListState) => state?.prefix\n);\n\nexport const selectPageSize: SelectorType<number> = createSelector(\n    selectUserPoolListFeature,\n    (state: CognitoUserPoolListState) => state?.pageSize\n);\n\nexport const selectPageIndex: SelectorType<number> = createSelector(\n    selectUserPoolListFeature,\n    (state: CognitoUserPoolListState) => state?.pageIndex\n);\n\nexport const selectSortColumns: SelectorType<SortColumn[]> = createSelector(\n    selectUserPoolListFeature,\n    (state: CognitoUserPoolListState) => state?.sortColumns\n);\n\nexport const selectUserPoolCounters: SelectorType<UserPoolCountersResponse> = createSelector(\n    selectUserPoolListFeature,\n    (state: CognitoUserPoolListState) => state?.listUserPoolResponse\n);\n", "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Location} from \"@angular/common\";\nimport {interval, Observable, Subscription} from \"rxjs\";\nimport {PageEvent} from \"@angular/material/paginator\";\nimport {Sort} from \"@angular/material/sort\";\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {SortColumn} from \"../../../shared/sorting/sorting.component\";\nimport {CognitoService} from \"../../../services/cognito.service\";\nimport {UserPoolAddComponentDialog} from \"../user-pool-add/user-pool-add.component\";\nimport {State, Store} from \"@ngrx/store\";\nimport {CognitoUserPoolListState} from \"./state/cognito-userpool-list.reducer\";\nimport {cognitoUserpoolListActions} from \"./state/cognito-userpool-list.actions\";\nimport {selectPageIndex, selectPageSize, selectPrefix, selectUserPoolCounters} from \"./state/cognito-userpool-list.selectors\";\nimport {UserPoolCountersResponse} from \"../model/user-pool-item\";\n\n@Component({\n    selector: 'cognito-user-pool-list',\n    templateUrl: './user-pool-list.component.html',\n    styleUrls: ['./user-pool-list.component.scss'],\n    providers: [CognitoService]\n})\nexport class CognitoUserPoolListComponent implements OnInit, OnDestroy {\n\n    // Last update\n    lastUpdate: Date = new Date();\n\n    // Table\n    pageSize$: Observable<number> = this.store.select(selectPageSize);\n    pageIndex$: Observable<number> = this.store.select(selectPageIndex);\n    prefix$: Observable<string> = this.store.select(selectPrefix);\n    listUserPoolCountersResponse$: Observable<UserPoolCountersResponse> = this.store.select(selectUserPoolCounters);\n    columns: any[] = ['id', 'created', 'modified', 'actions'];\n\n    // Auto-update\n    updateSubscription: Subscription | undefined;\n\n    // Paging\n    pageSizeOptions = [5, 10, 20, 50, 100];\n    hidePageSize = false;\n    showPageSizeOptions = true;\n    showFirstLastButtons = true;\n    disabled = false;\n    pageEvent: PageEvent = {length: 0, pageIndex: 0, pageSize: 0};\n\n    // Sorting\n    sortColumns: SortColumn[] = [];\n\n    // Prefix\n    prefixValue: string = this.state.value['cognito-userpool-list'].prefix;\n    prefixSet: boolean = false;\n\n    constructor(private snackBar: MatSnackBar, private dialog: MatDialog, private location: Location, private state: State<CognitoUserPoolListState>,\n                private store: Store) {\n        this.prefix$.subscribe((data: string) => {\n            this.prefixSet = false;\n            if (data && data.length) {\n                this.prefixValue = data;\n                this.prefixSet = true;\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        this.loadUserpools();\n        this.updateSubscription = interval(60000).subscribe(() => this.loadUserpools());\n    }\n\n    ngOnDestroy(): void {\n        this.updateSubscription?.unsubscribe();\n    }\n\n    setPrefix() {\n        this.prefixSet = true;\n        this.state.value['cognito-userpool-list'].pageIndex = 0;\n        this.state.value['cognito-userpool-list'].prefix = this.prefixValue;\n        this.loadUserpools();\n    }\n\n    unsetPrefix() {\n        this.prefixValue = '';\n        this.prefixSet = false;\n        this.state.value['cognito-userpool-list'].prefix = '';\n        this.loadUserpools();\n    }\n\n    back() {\n        this.location.back();\n    }\n\n    refresh() {\n        this.loadUserpools();\n    }\n\n    handlePageEvent(e: PageEvent) {\n        this.state.value['cognito-userpool-list'].pageSize = e.pageSize;\n        this.state.value['cognito-userpool-list'].pageIndex = e.pageIndex;\n        this.loadUserpools();\n    }\n\n    sortChange(sortState: Sort) {\n        this.sortColumns = [];\n        if (sortState.direction === 'asc') {\n            this.sortColumns.push({column: sortState.active, sortDirection: 1});\n        } else {\n            this.sortColumns.push({column: sortState.active, sortDirection: -1});\n        }\n        this.loadUserpools();\n    }\n\n    loadUserpools() {\n        this.lastUpdate = new Date();\n        this.store.dispatch(cognitoUserpoolListActions.loadUserPools({\n            prefix: this.state.value['cognito-userpool-list'].prefix,\n            pageSize: this.state.value['cognito-userpool-list'].pageSize,\n            pageIndex: this.state.value['cognito-userpool-list'].pageIndex,\n            sortColumns: this.state.value['cognito-userpool-list'].sortColumns\n        }));\n    }\n\n    addUserPool() {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n\n        this.dialog.open(UserPoolAddComponentDialog, dialogConfig).afterClosed().subscribe(result => {\n            if (result) {\n                this.createUserPool(result)\n            }\n        });\n    }\n\n    createUserPool(userPoolName: string) {\n        this.store.dispatch(cognitoUserpoolListActions.addUserPool({userPoolName: userPoolName}));\n    }\n\n    deleteUserPool(userPoolId: string) {\n        /* this.cognitoService.deleteUserPool(userPoolId)\n             .subscribe(() => {\n                 this.snackBar.open('Userpool deleted, Id: ' + userPoolId, 'Done', {duration: 5000});\n                 this.loadUserpools();\n             });*/\n    }\n}\n", "<mat-card appearance=\"outlined\" style=\"margin: 3px;\">\n    <mat-card-header>\n        <button (click)=\"back()\" aria-label=\"Back\" class=\"head-buttons-left\" mat-icon-button>\n            <mat-icon>arrow_back</mat-icon>\n        </button>\n        <span class=\"fill-remaining-space\">\n            <h4>Cognito User pools</h4>\n        </span>\n        <button (click)=\"addUserPool()\" aria-label=\"Refresh\" mat-icon-button>\n            <mat-icon>add</mat-icon>\n        </button>\n        <button (click)=\"refresh()\" aria-label=\"Refresh\" mat-icon-button>\n            <mat-icon>refresh</mat-icon>\n        </button>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-card appearance=\"outlined\" style=\"margin: -10px;\">\n            <mat-card-actions class=\"head-buttons\">\n                <mat-form-field style=\"width:100%\">\n                    <mat-label>Prefix</mat-label>\n                    <input [(ngModel)]=\"prefixValue\" matInput name=\"search\" placeholder=\"Search\" type=\"text\">\n                    <button (click)=\"setPrefix()\" *ngIf=\"!prefixSet\" mat-icon-button matSuffix style=\"float: right\">\n                        <mat-icon matSuffix>search</mat-icon>\n                    </button>\n                    <button (click)=\"unsetPrefix()\" *ngIf=\"prefixSet\" mat-icon-button matSuffix style=\"float: right\">\n                        <mat-icon matSuffix>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </mat-card-actions>\n            <div class=\"table-container\">\n                <div *ngIf=\"listUserPoolCountersResponse$ | async as userPoolCounters\" class=\"row\">\n                    <table (matSortChange)=\"sortChange($event)\" [dataSource]=\"userPoolCounters.userPools\" class=\"mat-elevation-z8 queue-table\" mat-table matSort>\n                        <ng-container matColumnDef=\"id\" matTooltip=\"User PoolId\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"User Pool ID\" sortActionDescription=\"Sort by userPoolId\">ID</th>\n                            <td *matCellDef=\"let element\" mat-cell>\n                                <mat-nav-list>\n                                    <a mat-list-item routerLink=\"./users/{{ element.userPoolId }}\">{{ element.userPoolId }}</a>\n                                </mat-nav-list>\n                            </td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"created\" matTooltip=\"Created\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Create timestamp\" sortActionDescription=\"Sort by created\">Created</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.created | date: 'dd-MM-yyyy hh:mm:ss' }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"modified\" matTooltip=\"Modified\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Modified timestamp\" sortActionDescription=\"Sort by modified\">Modified</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.modified | date: 'dd-MM-yyyy hh:mm:ss' }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"actions\">\n                            <th *matHeaderCellDef mat-header-cell style=\"width:80px\">Actions</th>\n                            <td *matCellDef=\"let row\" mat-cell>\n                                <!--button (click)=\"listUsers(row.userPoolId)\" aria-label=\"ListUsers\" mat-icon-button matTooltip=\"Lists all users of that user pool\">\n                                    <mat-icon>group</mat-icon>\n                                </button-->\n                                <button (click)=\"deleteUserPool(row.userPoolId)\" aria-label=\"DeleteUserPool\" mat-icon-button matTooltip=\"Delete user pool\">\n                                    <mat-icon>delete</mat-icon>\n                                </button>\n                            </td>\n                        </ng-container>\n                        <tr *matHeaderRowDef=\"columns\" mat-header-row></tr>\n                        <tr *matRowDef=\"let row; columns: columns;\" mat-row></tr>\n                        <tr *matNoDataRow class=\"mat-row\">\n                            <td [attr.colspan]=\"columns.length\" class=\"mat-cell\">\n                                No data matching the filter.\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n            <mat-paginator (page)=\"handlePageEvent($event)\"\n                           [disabled]=\"disabled\"\n                           [hidePageSize]=\"hidePageSize\"\n                           [length]=\"(listUserPoolCountersResponse$ | async)?.total\"\n                           [pageIndex]=\"(pageIndex$ | async)\"\n                           [pageSizeOptions]=\"showPageSizeOptions ? pageSizeOptions : []\"\n                           [pageSize]=\"(pageSize$ | async)\"\n                           [showFirstLastButtons]=\"showFirstLastButtons\"\n                           aria-label=\"Select page\" style=\"width:99%; margin-left:15px\">\n            </mat-paginator>\n        </mat-card>\n        <div class=\"footer\">\n            Last update: {{ lastUpdate | date: 'HH:mm:ss' }}\n        </div>\n    </mat-card-content>\n</mat-card>\n", "// Angular Modules\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {environment} from \"../../../../environments/environment\";\nimport {SortColumn} from \"../../../shared/sorting/sorting.component\";\n\n@Injectable()\nexport class CognitoService {\n\n    // Default headers for AwsMock HTTP requests\n    headers: HttpHeaders = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'AWS4-HMAC-SHA256 Credential=none/20240928/eu-central-1/cognito-idp/aws4_request, SignedHeaders=content-type;host;x-amz-date;x-amz-security-token;x-amz-target, Signature=01316d694335ec0e0bf68b08570490f1b0bae0b130ecbe13ebad511b3ece8a41'\n    });\n    url: string = environment.gatewayEndpoint + '/';\n\n    constructor(private http: HttpClient) {\n    }\n\n    /**\n     * This is a fake AWS NodeJS SDK request. This will only work, if runs against a AwsMock instance.\n     */\n    public listUserPoolCounters(prefix: string, pageSize: number, pageIndex: number, sortColumns: SortColumn[]) {\n        let headers = this.headers.set('x-awsmock-target', 'cognito-idp').set('x-awsmock-action', 'ListUserPoolCounters');\n        const body = {\n            region: environment.awsmockRegion,\n            prefix: prefix,\n            pageSize: pageSize,\n            pageIndex: pageIndex,\n            sortColumns: sortColumns\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public listUserCounters(userPoolId: string, maxResults: number, pageIndex: number, sortColumns: SortColumn[]) {\n        let headers = this.headers.set('x-awsmock-target', 'cognito-idp').set('x-awsmock-action', \"ListUserCounters\");\n        const body = {\n            Region: environment.awsmockRegion,\n            UserPoolId: userPoolId,\n            MaxResults: maxResults,\n            PageIndex: pageIndex,\n            SortColumns: sortColumns\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public deleteUserPool(userPoolId: string) {\n        let headers = this.headers.set('x-awsmock-target', 'cognito-idp').set('x-awsmock-action', \"DeleteUserPool\");\n        const body = {\n            Region: environment.awsmockRegion,\n            UserPoolId: userPoolId\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public deleteUser(userPoolId: string, userName: string) {\n        let headers = this.headers.set('x-awsmock-target', 'cognito-idp').set('x-awsmock-action', \"AdminDeleteUser\");\n        const body = {\n            Region: environment.awsmockRegion,\n            UserPoolId: userPoolId,\n            Username: userName\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public confirmUser(userPoolId: string, userName: string) {\n        let headers = this.headers.set('x-awsmock-target', 'cognito-idp').set('x-awsmock-action', \"AdminConfirmSignUp\");\n        const body = {\n            Region: environment.awsmockRegion,\n            UserPoolId: userPoolId,\n            Username: userName\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public createUserPool(userPoolName: string) {\n        let headers = this.headers.set('x-awsmock-target', 'cognito-idp').set('x-awsmock-action', \"CreateUserPool\");\n        const body = {\n            Region: environment.awsmockRegion,\n            PoolName: userPoolName\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n\n    public createUser(userPoolId: string, userName: string) {\n        let headers = this.headers.set('x-awsmock-target', 'cognito-idp').set('x-awsmock-action', \"AdminCreateUser\");\n        const body = {\n            Region: environment.awsmockRegion,\n            Username: userName,\n            UserPoolId: userPoolId\n        }\n        return this.http.post(this.url, body, {headers: headers});\n    }\n}\n", "import {\n    MatDialogActions,\n    MatDialogClose,\n    MatDialogContent,\n    MatDialogRef,\n    MatDialogTitle\n} from \"@angular/material/dialog\";\nimport {Component, OnInit} from \"@angular/core\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButton} from \"@angular/material/button\";\nimport {MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatOption, MatSelect} from \"@angular/material/select\";\nimport {MatTextColumn} from \"@angular/material/table\";\nimport {MatInput} from \"@angular/material/input\";\n\n@Component({\n    selector: 'user-add-dialog',\n    templateUrl: './user-add.component.html',\n    standalone: true,\n    imports: [\n        MatDialogContent,\n        MatDialogTitle,\n        MatDialogActions,\n        MatButton,\n        MatDialogClose,\n        MatFormField,\n        MatSelect,\n        MatOption,\n        MatLabel,\n        FormsModule,\n        MatTextColumn,\n        MatInput,\n        ReactiveFormsModule\n    ],\n    styleUrls: ['./user-add.component.scss']\n})\nexport class UserAddComponentDialog implements OnInit {\n\n    userName: string = '';\n\n    constructor(private dialogRef: MatDialogRef<UserAddComponentDialog>) {\n    }\n\n    ngOnInit() {\n    }\n\n    save() {\n        this.dialogRef.close(this.userName);\n    }\n\n    close() {\n        this.dialogRef.close(false);\n    }\n}\n", "<h2 mat-dialog-title>Add Cognito User</h2>\n<mat-dialog-content class=\"mat-typography\" style=\"width: 500px\">\n    <mat-form-field style=\"width: 100%\">\n        <mat-label>User Name</mat-label>\n        <input [(ngModel)]=\"userName\" matInput value=\"\">\n    </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n    <button mat-button mat-dialog-close>Cancel</button>\n    <button (click)=\"save()\" cdkFocusInitial mat-button>Add</button>\n</mat-dialog-actions>\n", "import {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {createAction, props} from \"@ngrx/store\";\nimport {UserCountersResponse} from \"../../model/user-item\";\n\nexport const cognitoUserActions = {\n    initialize: createAction('[cognito-user-list] initialize'),\n\n    // Load users\n    loadUsers: createAction('[cognito-user-list] Load users', props<{ prefix: string, pageSize: number, pageIndex: number, sortColumns: SortColumn[] }>()),\n    loadUsersSuccess: createAction('[cognito-user-list] Load users success', props<{ users: UserCountersResponse }>()),\n    loadUsersFailure: createAction('[cognito-user-list] Load users error', props<{ error: string }>()),\n\n    // Add user\n    addUser: createAction('[cognito-user-list] Add user', props<{ userPoolName: string, userName: string }>()),\n    addUserSuccess: createAction('[cognito-user-list] Add user success'),\n    addUserFailure: createAction('[cognito-user-list] Add user error', props<{ error: string }>()),\n\n    // Confirm user\n    confirmUser: createAction('[cognito-user-list] Confirm user', props<{ userPooId: string, userName: string }>()),\n    confirmUserSuccess: createAction('[cognito-user-list] Confirm user success'),\n    confirmUserFailure: createAction('[cognito-user-list] Confirm user error', props<{ error: string }>()),\n\n    // Delete user pool\n    deleteUser: createAction('[cognito-user-list] Delete user', props<{ userPoolName: string }>()),\n    deleteUserSuccess: createAction('[cognito-user-list] Delete user success'),\n    deleteUserFailure: createAction('[cognito-user-list] Delete user error', props<{ error: string }>()),\n}", "import {createReducer, on} from \"@ngrx/store\";\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {UserCountersResponse} from \"../../model/user-item\";\nimport {cognitoUserActions} from \"./cognito-user-list.actions\";\n\nexport const cognitoUserListFeatureKey = 'cognito-user-list';\n\nexport interface CognitoUserListState {\n    listUsersResponse: UserCountersResponse;\n    prefix: string;\n    pageSize: number;\n    pageIndex: number;\n    loading: boolean;\n    sortColumns: SortColumn[];\n    error: unknown;\n}\n\nexport const initialState: CognitoUserListState = {\n    listUsersResponse: {total: 0, users: []},\n    prefix: '',\n    pageSize: 10,\n    pageIndex: 0,\n    loading: false,\n    sortColumns: [{column: 'userPoolName', sortDirection: -1}],\n    error: {}\n};\n\nexport const cognitoUserListReducer = createReducer(\n    initialState,\n\n    // Initialize\n    on(cognitoUserActions.initialize, (state: CognitoUserListState): CognitoUserListState => ({...state, pageIndex: 0, pageSize: 10, loading: true})),\n\n    // User list\n    on(cognitoUserActions.loadUsers, (state: CognitoUserListState) => ({...state, loading: true})),\n    on(cognitoUserActions.loadUsersSuccess, (state: CognitoUserListState, {users}) => ({...state, listUsersResponse: users, loading: false})),\n    on(cognitoUserActions.loadUsersFailure, (state: CognitoUserListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Add user\n    on(cognitoUserActions.addUser, (state: CognitoUserListState) => ({...state, loading: true})),\n    on(cognitoUserActions.addUserSuccess, (state: CognitoUserListState) => ({...state, loading: false})),\n    on(cognitoUserActions.addUserFailure, (state: CognitoUserListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Confirm user\n    on(cognitoUserActions.confirmUser, (state: CognitoUserListState) => ({...state, loading: true})),\n    on(cognitoUserActions.confirmUserSuccess, (state: CognitoUserListState) => ({...state, loading: false})),\n    on(cognitoUserActions.confirmUserFailure, (state: CognitoUserListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Delete user\n    on(cognitoUserActions.deleteUser, (state: CognitoUserListState) => ({...state, loading: true})),\n    on(cognitoUserActions.deleteUserSuccess, (state: CognitoUserListState) => ({...state, loading: false})),\n    on(cognitoUserActions.deleteUserFailure, (state: CognitoUserListState, {error}) => ({...state, error: error, loading: false})),\n);", "import {createFeatureSelector, createSelector, DefaultProjectorFn, MemoizedSelector} from \"@ngrx/store\";\nimport {cognitoUserListFeatureKey, CognitoUserListState} from \"./cognito-user-list.reducer\";\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {UserCountersResponse} from \"../../model/user-item\";\n\nexport type SelectorType<T> = MemoizedSelector<object, T, DefaultProjectorFn<T>>;\nexport type SelectorFeatureType<T> = MemoizedSelector<object, T>;\n\nconst selectUserListFeature: SelectorFeatureType<CognitoUserListState> =\n    createFeatureSelector<CognitoUserListState>(cognitoUserListFeatureKey);\n\nexport const selectIsLoading: SelectorType<boolean> = createSelector(\n    selectUserListFeature,\n    (state: CognitoUserListState) => state.loading\n);\n\nexport const selectPrefix: SelectorType<string> = createSelector(\n    selectUserListFeature,\n    (state: CognitoUserListState) => state?.prefix\n);\n\nexport const selectPageSize: SelectorType<number> = createSelector(\n    selectUserListFeature,\n    (state: CognitoUserListState) => state?.pageSize\n);\n\nexport const selectPageIndex: SelectorType<number> = createSelector(\n    selectUserListFeature,\n    (state: CognitoUserListState) => state?.pageIndex\n);\n\nexport const selectSortColumns: SelectorType<SortColumn[]> = createSelector(\n    selectUserListFeature,\n    (state: CognitoUserListState) => state?.sortColumns\n);\n\nexport const selectUsersCounters: SelectorType<UserCountersResponse> = createSelector(\n    selectUserListFeature,\n    (state: CognitoUserListState) => state?.listUsersResponse\n);\n", "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Location} from \"@angular/common\";\nimport {filter, interval, Observable, Subscription} from \"rxjs\";\nimport {PageEvent} from \"@angular/material/paginator\";\nimport {Sort} from \"@angular/material/sort\";\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {SortColumn} from \"../../../shared/sorting/sorting.component\";\nimport {CognitoService} from \"../service/cognito.service\";\nimport {UserAddComponentDialog} from \"../user-add/user-add.component\";\nimport {ActionsSubject, State, Store} from \"@ngrx/store\";\nimport {cognitoUserActions} from \"./state/cognito-user-list.actions\";\nimport {selectPageIndex, selectPageSize, selectPrefix} from \"../user-pool-list/state/cognito-userpool-list.selectors\";\nimport {CognitoUserListState} from \"./state/cognito-user-list.reducer\";\nimport {UserCountersResponse} from \"../model/user-item\";\nimport {selectUsersCounters} from \"./state/cognito-user-list.selectors\";\n\n@Component({\n    selector: 'cognito-user-list',\n    templateUrl: './user-list.component.html',\n    styleUrls: ['./user-list.component.scss'],\n    providers: [CognitoService]\n})\nexport class CognitoUserListComponent implements OnInit, OnDestroy {\n\n    // Last update\n    lastUpdate: Date = new Date();\n\n    // Table\n    userPoolId: string = '';\n    pageSize$: Observable<number> = this.store.select(selectPageSize);\n    pageIndex$: Observable<number> = this.store.select(selectPageIndex);\n    prefix$: Observable<string> = this.store.select(selectPrefix);\n    listUserCountersResponse$: Observable<UserCountersResponse> = this.store.select(selectUsersCounters);\n    columns: any[] = ['userName', 'status', 'enabled', 'created', 'modified', 'actions'];\n\n    // Auto-update\n    updateSubscription: Subscription | undefined;\n\n    // Paging\n    pageSizeOptions = [5, 10, 20, 50, 100];\n    hidePageSize = false;\n    showPageSizeOptions = true;\n    showFirstLastButtons = true;\n    disabled = false;\n    pageEvent: PageEvent = {length: 0, pageIndex: 0, pageSize: 0};\n\n    // Prefix\n    prefixValue: string = this.state.value['cognito-user-list'].prefix;\n    prefixSet: boolean = false;\n\n    // Sorting\n    sortColumns: SortColumn[] = [];\n    private routerSubscription: any;\n\n    constructor(private snackBar: MatSnackBar, private dialog: MatDialog, private route: ActivatedRoute, private location: Location, private store: Store,\n                private state: State<CognitoUserListState>, private cognitoService: CognitoService, private actionsSubj$: ActionsSubject) {\n        this.prefix$.subscribe((data: string) => {\n            this.prefixSet = false;\n            if (data && data.length) {\n                this.prefixValue = data;\n                this.prefixSet = true;\n            }\n        });\n        this.actionsSubj$.pipe(\n            filter((action) =>\n                action.type === cognitoUserActions.addUserSuccess.type ||\n                action.type === cognitoUserActions.confirmUserSuccess.type ||\n                action.type === cognitoUserActions.deleteUserSuccess.type\n            )\n        ).subscribe(() => {\n                this.loadUsers();\n            }\n        );\n    }\n\n    ngOnInit(): void {\n        this.routerSubscription = this.route.params.subscribe(params => {\n            this.userPoolId = params['userPoolId'];\n        });\n        this.loadUsers();\n        this.updateSubscription = interval(60000).subscribe(() => this.loadUsers());\n    }\n\n    ngOnDestroy(): void {\n        this.updateSubscription?.unsubscribe();\n        this.routerSubscription?.unsubscribe();\n    }\n\n    setPrefix() {\n        this.prefixSet = true;\n        this.state.value['cognito-user-list'].pageIndex = 0;\n        this.state.value['cognito-user-list'].prefix = this.prefixValue;\n        this.loadUsers();\n    }\n\n    unsetPrefix() {\n        this.prefixValue = '';\n        this.prefixSet = false;\n        this.state.value['cognito-user-list'].prefix = '';\n        this.loadUsers();\n    }\n\n    back() {\n        this.location.back();\n    }\n\n    refresh() {\n        this.loadUsers();\n    }\n\n    handlePageEvent(e: PageEvent) {\n        this.state.value['cognito-user-list'].pageSize = e.pageSize;\n        this.state.value['cognito-user-list'].pageIndex = e.pageIndex;\n        this.loadUsers();\n    }\n\n    sortChange(sortState: Sort) {\n        this.sortColumns = [];\n        if (sortState.direction === 'asc') {\n            this.sortColumns.push({column: sortState.active, sortDirection: 1});\n        } else {\n            this.sortColumns.push({column: sortState.active, sortDirection: -1});\n        }\n        this.loadUsers();\n    }\n\n    loadUsers() {\n        this.lastUpdate = new Date();\n        this.store.dispatch(cognitoUserActions.loadUsers({\n            prefix: this.state.value['cognito-user-list'].prefix,\n            pageSize: this.state.value['cognito-user-list'].pageSize,\n            pageIndex: this.state.value['cognito-user-list'].pageIndex,\n            sortColumns: this.state.value['cognito-user-list'].sortColumns\n        }));\n    }\n\n    addUser() {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n\n        this.dialog.open(UserAddComponentDialog, dialogConfig).afterClosed().subscribe(result => {\n            if (result) {\n                this.createUser(result)\n            }\n        });\n    }\n\n    createUser(userName: string) {\n        this.cognitoService.createUser(this.userPoolId, userName)\n            .subscribe(() => {\n                this.snackBar.open('User created, name: ' + userName, 'Done', {duration: 5000});\n                this.loadUsers();\n            });\n    }\n\n    confirmUser(userPoolId: string, userName: string) {\n        this.lastUpdate = new Date();\n        this.store.dispatch(cognitoUserActions.confirmUser({\n            userPooId: userPoolId,\n            userName: userName\n        }));\n    }\n\n    deleteUser(userName: string) {\n        this.cognitoService.deleteUser(this.userPoolId, userName)\n            .subscribe(() => {\n                this.snackBar.open('User deleted, name: ' + userName, 'Done', {duration: 5000});\n                this.loadUsers();\n            });\n    }\n}\n", "<mat-card appearance=\"outlined\" style=\"margin: 3px;\">\n    <mat-card-header>\n        <button (click)=\"back()\" aria-label=\"Back\" class=\"head-buttons-left\" mat-icon-button>\n            <mat-icon>arrow_back</mat-icon>\n        </button>\n        <span class=\"fill-remaining-space\">\n            <h4>Cognito Users: {{ userPoolId }}</h4>\n        </span>\n        <button (click)=\"addUser()\" aria-label=\"Refresh\" mat-icon-button>\n            <mat-icon>add</mat-icon>\n        </button>\n        <button (click)=\"refresh()\" aria-label=\"Refresh\" mat-icon-button>\n            <mat-icon>refresh</mat-icon>\n        </button>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-card appearance=\"outlined\" style=\"margin: -10px\">\n            <mat-card-actions class=\"head-buttons\">\n                <mat-form-field style=\"width:100%\">\n                    <mat-label>Prefix</mat-label>\n                    <input [(ngModel)]=\"prefixValue\" matInput name=\"search\" placeholder=\"Search\" type=\"text\">\n                    <button (click)=\"setPrefix()\" *ngIf=\"!prefixSet\" mat-icon-button matSuffix style=\"float: right\">\n                        <mat-icon matSuffix>search</mat-icon>\n                    </button>\n                    <button (click)=\"unsetPrefix()\" *ngIf=\"prefixSet\" mat-icon-button matSuffix style=\"float: right\">\n                        <mat-icon matSuffix>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </mat-card-actions>\n            <div class=\"table-container\">\n                <div *ngIf=\"listUserCountersResponse$ | async as userCounters\" class=\"row\">\n                    <table (matSortChange)=\"sortChange($event)\" [dataSource]=\"userCounters.users\" class=\"mat-elevation-z8 queue-table\" mat-table matSort>\n                        <ng-container matColumnDef=\"userName\" matTooltip=\"User name\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"User name\" sortActionDescription=\"Sort by userName\">Name</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.userName }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"status\" matTooltip=\"userStatus\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"User status\" sortActionDescription=\"Sort by created\">Status</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.userStatus }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"enabled\" matTooltip=\"enabled\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"User enabled\" sortActionDescription=\"Sort by enabled\">Enabled</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.enabled }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"created\" matTooltip=\"Created\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Create timestamp\" sortActionDescription=\"Sort by created\">Created</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.created | date: 'dd-MM-yyyy hh:mm:ss' }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"modified\" matTooltip=\"Modified\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Modified timestamp\" sortActionDescription=\"Sort by modified\">Modified</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.modified | date: 'dd-MM-yyyy hh:mm:ss' }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"actions\">\n                            <th *matHeaderCellDef mat-header-cell style=\"width:120px\">Actions</th>\n                            <td *matCellDef=\"let row\" mat-cell>\n                                <button (click)=\"confirmUser(row.userPoolId, row.userName)\" aria-label=\"List\" mat-icon-button matTooltip=\"Confirm the user\">\n                                    <mat-icon>check_circle</mat-icon>\n                                </button>\n                                <button (click)=\"deleteUser(row.userName)\" aria-label=\"DeleteUser\" mat-icon-button matTooltip=\"Delete user\">\n                                    <mat-icon>delete</mat-icon>\n                                </button>\n                            </td>\n                        </ng-container>\n                        <tr *matHeaderRowDef=\"columns\" mat-header-row></tr>\n                        <tr *matRowDef=\"let row; columns: columns;\" mat-row></tr>\n                        <tr *matNoDataRow class=\"mat-row\">\n                            <td [attr.colspan]=\"columns.length\" class=\"mat-cell\">\n                                No data matching the filter.\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n            <mat-paginator (page)=\"handlePageEvent($event)\"\n                           [disabled]=\"disabled\"\n                           [hidePageSize]=\"hidePageSize\"\n                           [length]=\"(listUserCountersResponse$|async)?.total\"\n                           [pageIndex]=\"(pageIndex$ | async)\"\n                           [pageSizeOptions]=\"showPageSizeOptions ? pageSizeOptions : []\"\n                           [pageSize]=\"(pageSize$ | async)\"\n                           [showFirstLastButtons]=\"showFirstLastButtons\"\n                           aria-label=\"Select page\" style=\"width:99%; margin-left:15px\">\n            </mat-paginator>\n        </mat-card>\n    </mat-card-content>\n    <div class=\"footer\">\n        Last update: {{ lastUpdate | date: 'HH:mm:ss' }}\n    </div>\n</mat-card>\n", "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {CognitoUserPoolListComponent} from \"./user-pool-list/user-pool-list.component\";\nimport {CognitoUserListComponent} from \"./user-list/user-list.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        title: 'CognitoUserPoolsList',\n        component: CognitoUserPoolListComponent\n    },\n    // {\n    //     path: 'details/:queueArn',\n    //     title: 'SQSQueueDetails',\n    //     component: SqsQueueDetailComponent\n    // },\n    {\n        path: 'users/:userPoolId',\n        title: 'UserList',\n        component: CognitoUserListComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class CognitoRoutingModule {\n}\n", "import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {mergeMap, of} from 'rxjs';\n\nimport {catchError, map} from 'rxjs/operators';\nimport {cognitoUserpoolListActions} from './cognito-userpool-list.actions';\nimport {CognitoService} from \"../../service/cognito.service\";\n\n@Injectable()\nexport class CognitoUserPoolListEffects {\n\n    loadUserPools$ = createEffect(() => this.actions$.pipe(\n        ofType(cognitoUserpoolListActions.loadUserPools),\n        mergeMap(action =>\n            this.cognitoService.listUserPoolCounters(\n                action.prefix,\n                action.pageSize,\n                action.pageIndex,\n                action.sortColumns)\n                .pipe(map((userPools: any) => cognitoUserpoolListActions.loadUserPoolsSuccess({userPools})),\n                    catchError((error) =>\n                        of(cognitoUserpoolListActions.loadUserPoolsFailure({error: error.message}))\n                    )\n                )\n        ),\n    ));\n\n    addUserPool$ = createEffect(() => this.actions$.pipe(\n        ofType(cognitoUserpoolListActions.deleteUserPool),\n        mergeMap(action =>\n            this.cognitoService.deleteUserPool(action.userPoolName)\n                .pipe(map(() => cognitoUserpoolListActions.addUserPoolSuccess()),\n                    catchError((error) =>\n                        of(cognitoUserpoolListActions.addUserPoolFailure({error: error.message}))\n                    )\n                )\n        )));\n\n\n    deleteUserPool$ = createEffect(() => this.actions$.pipe(\n        ofType(cognitoUserpoolListActions.deleteUserPool),\n        mergeMap(action =>\n            this.cognitoService.deleteUserPool(action.userPoolName)\n                .pipe(map(() => cognitoUserpoolListActions.deleteUserPoolSuccess()),\n                    catchError((error) =>\n                        of(cognitoUserpoolListActions.deleteUserPoolFailure({error: error.message}))\n                    )\n                )\n        )));\n\n    constructor(private actions$: Actions, private cognitoService: CognitoService) {\n    }\n}", "import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {mergeMap, of} from 'rxjs';\n\nimport {catchError, map} from 'rxjs/operators';\nimport {cognitoUserActions} from './cognito-user-list.actions';\nimport {CognitoService} from \"../../service/cognito.service\";\n\n@Injectable()\nexport class CognitoUserListEffects {\n\n    loadUsers$ = createEffect(() => this.actions$.pipe(\n        ofType(cognitoUserActions.loadUsers),\n        mergeMap(action =>\n            this.cognitoService.listUserCounters(\n                action.prefix,\n                action.pageSize,\n                action.pageIndex,\n                action.sortColumns)\n                .pipe(map((users: any) => cognitoUserActions.loadUsersSuccess({users})),\n                    catchError((error) =>\n                        of(cognitoUserActions.loadUsersFailure({error: error.message}))\n                    )\n                )\n        ),\n    ));\n\n    addUser$ = createEffect(() => this.actions$.pipe(\n        ofType(cognitoUserActions.addUser),\n        mergeMap(action =>\n            this.cognitoService.createUser(action.userPoolName, action.userName)\n                .pipe(map((queues: any) => cognitoUserActions.addUserSuccess()),\n                    catchError((error) =>\n                        of(cognitoUserActions.addUserFailure({error: error.message}))\n                    )\n                )\n        )));\n\n\n    confirmUser$ = createEffect(() => this.actions$.pipe(\n        ofType(cognitoUserActions.confirmUser),\n        mergeMap(action =>\n            this.cognitoService.confirmUser(action.userPooId, action.userName)\n                .pipe(map((queues: any) => cognitoUserActions.deleteUserSuccess()),\n                    catchError((error) =>\n                        of(cognitoUserActions.deleteUserFailure({error: error.message}))\n                    )\n                )\n        )));\n\n    deleteUser$ = createEffect(() => this.actions$.pipe(\n        ofType(cognitoUserActions.deleteUser),\n        mergeMap(action =>\n            this.cognitoService.deleteUserPool(action.userPoolName)\n                .pipe(map((queues: any) => cognitoUserActions.deleteUserSuccess()),\n                    catchError((error) =>\n                        of(cognitoUserActions.deleteUserFailure({error: error.message}))\n                    )\n                )\n        )));\n\n    constructor(private actions$: Actions, private cognitoService: CognitoService) {\n    }\n}", "import {NgModule} from '@angular/core';\nimport {AsyncPipe, DatePipe, NgIf} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {StoreModule} from \"@ngrx/store\";\nimport {EffectsModule} from \"@ngrx/effects\";\nimport {MatCard, MatCardActions, MatCardContent, MatCardHeader, MatCardSubtitle, MatCardTitle} from \"@angular/material/card\";\nimport {\n    MatCell,\n    MatCellDef,\n    MatColumnDef,\n    MatHeaderCell,\n    MatHeaderCellDef,\n    MatHeaderRow,\n    MatHeaderRowDef,\n    MatNoDataRow,\n    MatRow,\n    MatRowDef,\n    MatTable\n} from \"@angular/material/table\";\nimport {MatIcon} from \"@angular/material/icon\";\nimport {MatSort, MatSortHeader} from \"@angular/material/sort\";\nimport {MatButton, MatIconButton} from \"@angular/material/button\";\nimport {MatPaginator} from \"@angular/material/paginator\";\nimport {MatTooltip} from \"@angular/material/tooltip\";\nimport {RouterLink} from \"@angular/router\";\nimport {MatList, MatListItem, MatNavList} from \"@angular/material/list\";\nimport {MatFormField, MatLabel, MatSuffix} from \"@angular/material/form-field\";\nimport {MatInput} from \"@angular/material/input\";\nimport {CognitoRoutingModule} from \"./cognito-routing.module\";\nimport {MatGridList, MatGridTile} from \"@angular/material/grid-list\";\nimport {MatTab, MatTabGroup} from \"@angular/material/tabs\";\nimport {CognitoUserPoolListComponent} from \"./user-pool-list/user-pool-list.component\";\nimport {CognitoService} from \"./service/cognito.service\";\nimport {cognitoUserPoolListFeatureKey, cognitoUserPoolListReducer} from \"./user-pool-list/state/cognito-userpool-list.reducer\";\nimport {CognitoUserPoolListEffects} from \"./user-pool-list/state/cognito-userpool-list.effects\";\nimport {CognitoUserListComponent} from \"./user-list/user-list.component\";\nimport {cognitoUserListFeatureKey, cognitoUserListReducer} from \"./user-list/state/cognito-user-list.reducer\";\nimport {CognitoUserListEffects} from \"./user-list/state/cognito-user-list.effects\";\n\n@NgModule({\n    declarations: [CognitoUserPoolListComponent, CognitoUserListComponent],\n    imports: [\n        MatCard,\n        MatCardHeader,\n        MatCardContent,\n        MatCardActions,\n        MatCardSubtitle,\n        MatCardTitle,\n        MatTable,\n        MatHeaderCellDef,\n        MatCellDef,\n        MatColumnDef,\n        MatIcon,\n        MatHeaderCell,\n        MatCell,\n        MatHeaderRowDef,\n        MatHeaderRow,\n        MatSortHeader,\n        MatRowDef,\n        MatNoDataRow,\n        MatIconButton,\n        MatRow,\n        MatPaginator,\n        MatSort,\n        MatTooltip,\n        RouterLink,\n        MatListItem,\n        MatNavList,\n        DatePipe,\n        MatFormField,\n        MatInput,\n        MatLabel,\n        MatSuffix,\n        MatGridTile,\n        MatGridList,\n        MatList,\n        MatTabGroup,\n        MatTab,\n        MatButton,\n        NgIf,\n        ReactiveFormsModule,\n        FormsModule,\n        AsyncPipe,\n        CognitoRoutingModule,\n        StoreModule.forFeature(cognitoUserPoolListFeatureKey, cognitoUserPoolListReducer),\n        StoreModule.forFeature(cognitoUserListFeatureKey, cognitoUserListReducer),\n        EffectsModule.forFeature([CognitoUserPoolListEffects, CognitoUserListEffects]),\n    ],\n    exports: [CognitoUserPoolListComponent, CognitoUserListComponent],\n    providers: [CognitoService],\n})\nexport class CognitoModule {\n}\n"],
  "mappings": "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",
  "names": ["CognitoService", "initialState", "selectIsLoading", "selectPrefix", "selectPageSize", "selectPageIndex", "selectSortColumns", "CognitoService", "_c0", "CognitoService", "CognitoService", "CognitoService"]
}
