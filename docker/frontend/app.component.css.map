{
  "version": 3,
  "sources": ["src/app/app.component.scss", "node_modules/@angular/material/core/tokens/_token-utils.scss"],
  "sourcesContent": ["@use '@angular/material' as mat;\n\nmat-toolbar {\n  background: #004a9f;\n  color: white;\n}\n\n.input-parent {\n  @include mat.form-field-density(-6);\n}", "@use 'sass:list';\n@use 'sass:map';\n@use 'sass:string';\n@use '../style/elevation';\n@use '../style/sass-utils';\n@use './m3-tokens';\n\n$_tokens: null;\n$_component-prefix: null;\n$_system-fallbacks: m3-tokens.create-system-fallbacks();\n\n// Sets the token prefix and map to use when creating token slots.\n@mixin use-tokens($prefix, $tokens) {\n  $_component-prefix: $prefix !global;\n  $_tokens: $tokens !global;\n\n  @content;\n\n  $_component-prefix: null !global;\n  $_tokens: null !global;\n}\n\n// Combines a prefix and a string to generate a CSS variable name for a token.\n@function _create-var-name($prefix, $token) {\n  @if $prefix == null or $token == null {\n    @error 'Must specify both prefix and name when generating token';\n  }\n\n  $string-prefix: '';\n\n  // Prefixes are lists so we need to combine them.\n  @each $part in $prefix {\n    $string-prefix: if($string-prefix == '', $part, '#{$string-prefix}-#{$part}');\n  }\n\n  @return string.unquote('--#{$string-prefix}-#{$token}');\n}\n\n// Creates a CSS variable, including the fallback if provided.\n@function _create-var($name, $fallback: null) {\n  @if ($fallback) {\n    @return var($name, $fallback);\n  } @else {\n    @return var($name);\n  }\n}\n\n// Gets the value of the token given the current global context state.\n@function _get-token-value($token, $fallback) {\n  $var-name: _create-var-name($_component-prefix, $token);\n  $fallback: _get-token-fallback($token, $fallback);\n  @return _create-var($var-name, $fallback);\n}\n\n// Assertion mixin that throws an error if the global state has not been set up by wrapping\n// calls with `use-tokens`.\n@function _assert-use-tokens($token) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error 'Function was not called within a wrapping call of `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n\n  @return true;\n}\n\n// Emits a slot for the given token, provided that it has a non-null value in the token map passed\n// to `use-tokens`.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n// TODO: Remove the use case where we accept \"true\" and handle any failing client screenshots\n@mixin create-token-slot($property, $token, $fallback: null) {\n  $_assert: _assert-use-tokens($token);\n  @if map.get($_tokens, $token) != null {\n    #{$property}: #{_get-token-value($token, $fallback)};\n  }\n}\n\n// Returns the name of a token including the current prefix. Intended to be used in calculations\n// involving tokens. `create-token-slot` should be used when outputting tokens.\n@function get-token-variable-name($token) {\n  $_assert: _assert-use-tokens($token);\n  @return _create-var-name($_component-prefix, $token);\n}\n\n// Returns a `var()` reference to a specific token. Intended for declarations\n// where the token has to be referenced as a part of a larger expression.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n// TODO: Remove the use case where we accept \"true\" and handle any failing client screenshots\n@function get-token-variable($token, $fallback: null) {\n  $_assert: _assert-use-tokens($token);\n  @return _get-token-value($token, $fallback);\n}\n\n// Gets the token's fallback value. Prefers adding a system-level fallback if one exists, otherwise\n// use the provided fallback.\n@function _get-token-fallback($token, $fallback: null) {\n  // If the $fallback is `true`, this is the component's signal to use the current token map value\n  @if ($fallback == true) {\n    $fallback: map.get($_tokens, $token);\n  }\n\n  // Check whether there's a system-level fallback. If not, return the optional\n  // provided fallback (otherwise null).\n  $sys-fallback: map.get($_system-fallbacks, $_component-prefix, $token);\n  @if (not $sys-fallback) {\n    @return $fallback;\n  }\n\n  @if (sass-utils.is-css-var-name($sys-fallback)) {\n    @return _create-var($sys-fallback, $fallback);\n  }\n\n  // TODO(mat-app-theme): Return the system-level fallback.\n  // Changing this will affect clients that do not properly call theme mixins since the tokens\n  // will be undefined and now default to M3 system values, causing a number of screenshot failures.\n  // @return $sys-fallback;\n  @return $fallback;\n}\n\n// Outputs a map of tokens under a specific prefix.\n@mixin create-token-values($prefix, $tokens) {\n  @if $tokens != null {\n    @each $key, $value in $tokens {\n      @if $value != null {\n        #{_create-var-name($prefix, $key)}: #{$value};\n      }\n    }\n  }\n}\n\n// MDC doesn't currently handle elevation tokens properly. As a temporary workaround we can combine\n// the elevation and shadow-color tokens into a full box-shadow and use it as the value for the\n// elevation token.\n@function resolve-elevation($tokens, $elevation-token, $shadow-color-token) {\n  $elevation: map.get($tokens, $elevation-token);\n  $shadow-color: map.get($tokens, $shadow-color-token);\n  @return map.merge($tokens, (\n    $elevation-token: elevation.get-box-shadow($elevation, $shadow-color),\n    $shadow-color-token: null,\n  ));\n}\n\n/// Checks whether a list starts wih a given prefix\n/// @param {List} $list The list value to check the prefix of.\n/// @param {List} $prefix The prefix to check.\n/// @return {Boolean} Whether the list starts with the prefix.\n@function _is-prefix($list, $prefix) {\n  @for $i from 1 through list.length($prefix) {\n    @if list.nth($list, $i) != list.nth($prefix, $i) {\n      @return false;\n    }\n  }\n  @return true;\n}\n\n/// Gets the supported color variants in the given token set for the given prefix.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get color variants for.\n/// @return {List} The supported color variants.\n@function _supported-color-variants($tokens, $prefix) {\n  $result: ();\n  @each $namespace in map.keys($tokens) {\n    @if list.length($prefix) == list.length($namespace) - 1 and _is-prefix($namespace, $prefix) {\n      $result: list.append($result, list.nth($namespace, list.length($namespace)), comma);\n    }\n  }\n  @return $result;\n}\n\n/// Gets the token values for the given components prefix with the given options.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get the token values for.\n/// @param {ArgList} Any additional options\n///   Currently the additional supported options are:\n//     - $color-variant - The color variant to use for the component\n//     - $emit-overrides-only - Whether to emit *only* the overrides for the\n//                              specific color variant, or all color styles. Defaults to false.\n/// @throws If given options are invalid\n/// @return {Map} The token values for the requested component.\n@function get-tokens-for($tokens, $prefix, $options...) {\n  $options: sass-utils.validate-keyword-args($options, (color-variant, emit-overrides-only));\n  @if $tokens == () {\n    @return ();\n  }\n  $values: map.get($tokens, $prefix);\n  $color-variant: map.get($options, color-variant);\n  $emit-overrides-only: map.get($options, emit-overrides-only);\n  @if $color-variant == null {\n    @return $values;\n  }\n  $overrides: map.get($tokens, list.append($prefix, $color-variant));\n  @if $overrides == null {\n    $variants: _supported-color-variants($tokens, $prefix);\n    $secondary-message: if($variants == (),\n      'Mixin does not support color variants',\n      'Supported color variants are: #{$variants}'\n    );\n\n    @error 'Invalid color variant: #{$color-variant}. #{$secondary-message}.';\n  }\n  @return if($emit-overrides-only, $overrides, map.merge($values, $overrides));\n}\n\n/// Emits new token values for the given token overrides.\n/// Verifies that the overrides passed in are valid tokens.\n/// New token values are emitted under the current selector or root.\n@mixin batch-create-token-values($overrides: (), $token-maps...) {\n  @include _validate-token-overrides($overrides, $token-maps);\n\n  @each $token-map in $token-maps {\n    $prefix: map.get($token-map, prefix);\n    $tokens: map.get($token-map, tokens);\n\n    @each $name, $value in $tokens {\n      $tokens: map.set($tokens, $name, map.get($overrides, $name));\n    }\n\n    @include sass-utils.current-selector-or-root() {\n      @include create-token-values($prefix, $tokens);\n    }\n  }\n}\n\n/// Verifies that the token overrides exist and are used in one of the given token maps.\n@mixin _validate-token-overrides($overrides: (), $token-maps) {\n  $valid-token-names: ();\n\n  @each $token-map in $token-maps {\n    @each $name, $value in map.get($token-map, tokens) {\n      @if ($value != null and list.index($valid-token-names, $name) == null) {\n        $valid-token-names: list.append($valid-token-names, $name);\n      }\n    }\n  }\n\n  @each $name in map.keys($overrides) {\n    @if (list.index($valid-token-names, $name) == null) {\n      @error (\n        'Invalid token: \"' + $name + '\"'\n        'Valid tokens include: ' $valid-token-names\n      );\n    }\n  }\n}\n"],
  "mappings": ";AAEA;AACE,cAAA;AACA,SAAA;;AAGF,CAAA;ACwHQ,qCAAA;AAAA,yCAAA;AAAA,+CAAA;AAAA,4DAAA;AAAA,+DAAA;;",
  "names": []
}
