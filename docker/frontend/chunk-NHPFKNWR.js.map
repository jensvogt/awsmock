{"version":3,"sources":["src/app/modules/sns/topic-add/topic-add.component.ts","src/app/modules/sns/topic-add/topic-add.component.html","node_modules/@aws-sdk/client-sns/dist-es/auth/httpAuthSchemeProvider.js","node_modules/@aws-sdk/client-sns/dist-es/endpoint/EndpointParameters.js","node_modules/@aws-sdk/client-sns/package.json","node_modules/@aws-sdk/client-sns/dist-es/endpoint/ruleset.js","node_modules/@aws-sdk/client-sns/dist-es/endpoint/endpointResolver.js","node_modules/@aws-sdk/client-sns/dist-es/runtimeConfig.shared.js","node_modules/@aws-sdk/client-sns/dist-es/runtimeConfig.browser.js","node_modules/@aws-sdk/client-sns/dist-es/auth/httpAuthExtensionConfiguration.js","node_modules/@aws-sdk/client-sns/dist-es/runtimeExtensions.js","node_modules/@aws-sdk/client-sns/dist-es/SNSClient.js","node_modules/@aws-sdk/client-sns/dist-es/models/SNSServiceException.js","node_modules/@aws-sdk/client-sns/dist-es/models/models_0.js","node_modules/@aws-sdk/client-sns/dist-es/protocols/Aws_query.js","node_modules/@aws-sdk/client-sns/dist-es/commands/CreateTopicCommand.js","node_modules/@aws-sdk/client-sns/dist-es/commands/DeleteTopicCommand.js","node_modules/@aws-sdk/client-sns/dist-es/commands/ListTopicsCommand.js","node_modules/@aws-sdk/client-sns/dist-es/commands/PublishCommand.js","node_modules/@aws-sdk/client-sns/dist-es/commands/SubscribeCommand.js","src/app/modules/sns/service/sns-service.component.ts","src/app/modules/sns/message-list/publish-message/publish-message.component.ts","src/app/modules/sns/message-list/publish-message/publish-message.component.html","src/app/modules/sns/topic-list/state/sns-topic-list.actions.ts","src/app/modules/sns/topic-list/state/sns-topic-list.reducer.ts","src/app/modules/sns/topic-list/state/sns-topic-list.selectors.ts","src/app/modules/sns/topic-list/topic-list.component.ts","src/app/modules/sns/topic-list/topic-list.component.html","src/app/modules/sns/topic-detail/subscription-add/subscription-add.component.ts","src/app/modules/sns/topic-detail/subscription-add/subscription-add.component.html","src/app/modules/sns/topic-detail/state/sns-topic-detail.actions.ts","src/app/modules/sns/topic-detail/state/sns-topic-detail.reducer.ts","src/app/modules/sns/topic-detail/state/sns-topic-detail.selectors.ts","src/app/modules/sns/topic-detail/topic-detail.component.ts","src/app/modules/sns/topic-detail/topic-detail.component.html","src/app/modules/sns/message-list/state/sns-message-list.actions.ts","src/app/modules/sns/message-list/state/sns-message-list.reducer.ts","src/app/modules/sns/message-list/state/sns-message-list.selectors.ts","src/app/modules/sns/message-list/view-message/sns-view-message.component.ts","src/app/modules/sns/message-list/view-message/sns-view-message.component.html","src/app/modules/sns/message-list/sns-message-list.component.ts","src/app/modules/sns/message-list/sns-message-list.component.html","src/app/modules/sns/sns-routing.module.ts","src/app/modules/sns/topic-list/state/sns-topic-list.effects.ts","src/app/modules/sns/topic-detail/state/sns-topic-detail.effects.ts","src/app/modules/sns/message-list/state/sns-message-list.effects.ts","src/app/modules/sns/sns.module.ts"],"sourcesContent":["import {\n    MAT_DIALOG_DATA,\n    MatDialogActions,\n    MatDialogClose,\n    MatDialogContent,\n    MatDialogRef,\n    MatDialogTitle\n} from \"@angular/material/dialog\";\nimport {Component, Inject, OnInit} from \"@angular/core\";\nimport {FormBuilder, FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButton} from \"@angular/material/button\";\nimport {MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatOption, MatSelect} from \"@angular/material/select\";\nimport {MatTextColumn} from \"@angular/material/table\";\nimport {MatInput} from \"@angular/material/input\";\n\n@Component({\n    selector: 'add-connection-dialog',\n    templateUrl: './topic-add.component.html',\n    standalone: true,\n    imports: [\n        MatDialogContent,\n        MatDialogTitle,\n        MatDialogActions,\n        MatButton,\n        MatDialogClose,\n        MatFormField,\n        MatSelect,\n        MatOption,\n        MatLabel,\n        FormsModule,\n        MatTextColumn,\n        MatInput,\n        ReactiveFormsModule\n    ],\n    styleUrls: ['./topic-add.component.scss']\n})\nexport class TopicAddComponentDialog implements OnInit {\n\n    // @ts-ignore\n    topicName: string = '';\n\n    constructor(private fb: FormBuilder, private dialogRef: MatDialogRef<TopicAddComponentDialog>, @Inject(MAT_DIALOG_DATA) public portList: any) {\n    }\n\n    ngOnInit() {\n    }\n\n    save() {\n        this.dialogRef.close(this.topicName);\n    }\n\n    close() {\n        this.dialogRef.close(false);\n    }\n}\n","<h2 mat-dialog-title>Add SNS Topic</h2>\n<mat-dialog-content class=\"mat-typography\" style=\"width: 500px\">\n  <mat-form-field style=\"width: 100%\">\n    <mat-label>Topic Name</mat-label>\n    <input [(ngModel)]=\"topicName\" matInput value=\"\">\n  </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button (click)=\"save()\" cdkFocusInitial mat-button>Add</button>\n</mat-dialog-actions>\n","import { resolveAwsSdkSigV4Config } from \"@aws-sdk/core\";\nimport { getSmithyContext, normalizeProvider } from \"@smithy/util-middleware\";\nexport const defaultSNSHttpAuthSchemeParametersProvider = async (config, context, input) => {\n  return {\n    operation: getSmithyContext(context).operation,\n    region: (await normalizeProvider(config.region)()) || (() => {\n      throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n    })()\n  };\n};\nfunction createAwsAuthSigv4HttpAuthOption(authParameters) {\n  return {\n    schemeId: \"aws.auth#sigv4\",\n    signingProperties: {\n      name: \"sns\",\n      region: authParameters.region\n    },\n    propertiesExtractor: (config, context) => ({\n      signingProperties: {\n        config,\n        context\n      }\n    })\n  };\n}\nexport const defaultSNSHttpAuthSchemeProvider = authParameters => {\n  const options = [];\n  switch (authParameters.operation) {\n    default:\n      {\n        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n      }\n  }\n  return options;\n};\nexport const resolveHttpAuthSchemeConfig = config => {\n  const config_0 = resolveAwsSdkSigV4Config(config);\n  return {\n    ...config_0\n  };\n};","export const resolveClientEndpointParameters = options => {\n  return {\n    ...options,\n    useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n    useFipsEndpoint: options.useFipsEndpoint ?? false,\n    defaultSigningName: \"sns\"\n  };\n};\nexport const commonParams = {\n  UseFIPS: {\n    type: \"builtInParams\",\n    name: \"useFipsEndpoint\"\n  },\n  Endpoint: {\n    type: \"builtInParams\",\n    name: \"endpoint\"\n  },\n  Region: {\n    type: \"builtInParams\",\n    name: \"region\"\n  },\n  UseDualStack: {\n    type: \"builtInParams\",\n    name: \"useDualstackEndpoint\"\n  }\n};","{\n  \"name\": \"@aws-sdk/client-sns\",\n  \"description\": \"AWS SDK for JavaScript Sns Client for Node.js, Browser and React Native\",\n  \"version\": \"3.693.0\",\n  \"scripts\": {\n    \"build\": \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n    \"build:cjs\": \"node ../../scripts/compilation/inline client-sns\",\n    \"build:es\": \"tsc -p tsconfig.es.json\",\n    \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n    \"build:types\": \"tsc -p tsconfig.types.json\",\n    \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n    \"clean\": \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n    \"extract:docs\": \"api-extractor run --local\",\n    \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo sns\"\n  },\n  \"main\": \"./dist-cjs/index.js\",\n  \"types\": \"./dist-types/index.d.ts\",\n  \"module\": \"./dist-es/index.js\",\n  \"sideEffects\": false,\n  \"dependencies\": {\n    \"@aws-crypto/sha256-browser\": \"5.2.0\",\n    \"@aws-crypto/sha256-js\": \"5.2.0\",\n    \"@aws-sdk/client-sso-oidc\": \"3.693.0\",\n    \"@aws-sdk/client-sts\": \"3.693.0\",\n    \"@aws-sdk/core\": \"3.693.0\",\n    \"@aws-sdk/credential-provider-node\": \"3.693.0\",\n    \"@aws-sdk/middleware-host-header\": \"3.693.0\",\n    \"@aws-sdk/middleware-logger\": \"3.693.0\",\n    \"@aws-sdk/middleware-recursion-detection\": \"3.693.0\",\n    \"@aws-sdk/middleware-user-agent\": \"3.693.0\",\n    \"@aws-sdk/region-config-resolver\": \"3.693.0\",\n    \"@aws-sdk/types\": \"3.692.0\",\n    \"@aws-sdk/util-endpoints\": \"3.693.0\",\n    \"@aws-sdk/util-user-agent-browser\": \"3.693.0\",\n    \"@aws-sdk/util-user-agent-node\": \"3.693.0\",\n    \"@smithy/config-resolver\": \"^3.0.11\",\n    \"@smithy/core\": \"^2.5.2\",\n    \"@smithy/fetch-http-handler\": \"^4.1.0\",\n    \"@smithy/hash-node\": \"^3.0.9\",\n    \"@smithy/invalid-dependency\": \"^3.0.9\",\n    \"@smithy/middleware-content-length\": \"^3.0.11\",\n    \"@smithy/middleware-endpoint\": \"^3.2.2\",\n    \"@smithy/middleware-retry\": \"^3.0.26\",\n    \"@smithy/middleware-serde\": \"^3.0.9\",\n    \"@smithy/middleware-stack\": \"^3.0.9\",\n    \"@smithy/node-config-provider\": \"^3.1.10\",\n    \"@smithy/node-http-handler\": \"^3.3.0\",\n    \"@smithy/protocol-http\": \"^4.1.6\",\n    \"@smithy/smithy-client\": \"^3.4.3\",\n    \"@smithy/types\": \"^3.7.0\",\n    \"@smithy/url-parser\": \"^3.0.9\",\n    \"@smithy/util-base64\": \"^3.0.0\",\n    \"@smithy/util-body-length-browser\": \"^3.0.0\",\n    \"@smithy/util-body-length-node\": \"^3.0.0\",\n    \"@smithy/util-defaults-mode-browser\": \"^3.0.26\",\n    \"@smithy/util-defaults-mode-node\": \"^3.0.26\",\n    \"@smithy/util-endpoints\": \"^2.1.5\",\n    \"@smithy/util-middleware\": \"^3.0.9\",\n    \"@smithy/util-retry\": \"^3.0.9\",\n    \"@smithy/util-utf8\": \"^3.0.0\",\n    \"tslib\": \"^2.6.2\"\n  },\n  \"devDependencies\": {\n    \"@tsconfig/node16\": \"16.1.3\",\n    \"@types/node\": \"^16.18.96\",\n    \"concurrently\": \"7.0.0\",\n    \"downlevel-dts\": \"0.10.1\",\n    \"rimraf\": \"3.0.2\",\n    \"typescript\": \"~4.9.5\"\n  },\n  \"engines\": {\n    \"node\": \">=16.0.0\"\n  },\n  \"typesVersions\": {\n    \"<4.0\": {\n      \"dist-types/*\": [\n        \"dist-types/ts3.4/*\"\n      ]\n    }\n  },\n  \"files\": [\n    \"dist-*/**\"\n  ],\n  \"author\": {\n    \"name\": \"AWS SDK for JavaScript Team\",\n    \"url\": \"https://aws.amazon.com/javascript/\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"browser\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\"\n  },\n  \"react-native\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\"\n  },\n  \"homepage\": \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sns\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/aws/aws-sdk-js-v3.git\",\n    \"directory\": \"clients/client-sns\"\n  }\n}\n","const u = \"required\",\n  v = \"fn\",\n  w = \"argv\",\n  x = \"ref\";\nconst a = true,\n  b = \"isSet\",\n  c = \"booleanEquals\",\n  d = \"error\",\n  e = \"endpoint\",\n  f = \"tree\",\n  g = \"PartitionResult\",\n  h = \"stringEquals\",\n  i = {\n    [u]: false,\n    \"type\": \"String\"\n  },\n  j = {\n    [u]: true,\n    \"default\": false,\n    \"type\": \"Boolean\"\n  },\n  k = {\n    [x]: \"Endpoint\"\n  },\n  l = {\n    [v]: c,\n    [w]: [{\n      [x]: \"UseFIPS\"\n    }, true]\n  },\n  m = {\n    [v]: c,\n    [w]: [{\n      [x]: \"UseDualStack\"\n    }, true]\n  },\n  n = {},\n  o = {\n    [x]: \"Region\"\n  },\n  p = {\n    [v]: \"getAttr\",\n    [w]: [{\n      [x]: g\n    }, \"supportsFIPS\"]\n  },\n  q = {\n    [v]: c,\n    [w]: [true, {\n      [v]: \"getAttr\",\n      [w]: [{\n        [x]: g\n      }, \"supportsDualStack\"]\n    }]\n  },\n  r = [l],\n  s = [m],\n  t = [o];\nconst _data = {\n  version: \"1.0\",\n  parameters: {\n    Region: i,\n    UseDualStack: j,\n    UseFIPS: j,\n    Endpoint: i\n  },\n  rules: [{\n    conditions: [{\n      [v]: b,\n      [w]: [k]\n    }],\n    rules: [{\n      conditions: r,\n      error: \"Invalid Configuration: FIPS and custom endpoint are not supported\",\n      type: d\n    }, {\n      conditions: s,\n      error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\",\n      type: d\n    }, {\n      endpoint: {\n        url: k,\n        properties: n,\n        headers: n\n      },\n      type: e\n    }],\n    type: f\n  }, {\n    conditions: [{\n      [v]: b,\n      [w]: t\n    }],\n    rules: [{\n      conditions: [{\n        [v]: \"aws.partition\",\n        [w]: t,\n        assign: g\n      }],\n      rules: [{\n        conditions: [l, m],\n        rules: [{\n          conditions: [{\n            [v]: c,\n            [w]: [a, p]\n          }, q],\n          rules: [{\n            endpoint: {\n              url: \"https://sns-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n              properties: n,\n              headers: n\n            },\n            type: e\n          }],\n          type: f\n        }, {\n          error: \"FIPS and DualStack are enabled, but this partition does not support one or both\",\n          type: d\n        }],\n        type: f\n      }, {\n        conditions: r,\n        rules: [{\n          conditions: [{\n            [v]: c,\n            [w]: [p, a]\n          }],\n          rules: [{\n            conditions: [{\n              [v]: h,\n              [w]: [o, \"us-gov-east-1\"]\n            }],\n            endpoint: {\n              url: \"https://sns.us-gov-east-1.amazonaws.com\",\n              properties: n,\n              headers: n\n            },\n            type: e\n          }, {\n            conditions: [{\n              [v]: h,\n              [w]: [o, \"us-gov-west-1\"]\n            }],\n            endpoint: {\n              url: \"https://sns.us-gov-west-1.amazonaws.com\",\n              properties: n,\n              headers: n\n            },\n            type: e\n          }, {\n            endpoint: {\n              url: \"https://sns-fips.{Region}.{PartitionResult#dnsSuffix}\",\n              properties: n,\n              headers: n\n            },\n            type: e\n          }],\n          type: f\n        }, {\n          error: \"FIPS is enabled but this partition does not support FIPS\",\n          type: d\n        }],\n        type: f\n      }, {\n        conditions: s,\n        rules: [{\n          conditions: [q],\n          rules: [{\n            endpoint: {\n              url: \"https://sns.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n              properties: n,\n              headers: n\n            },\n            type: e\n          }],\n          type: f\n        }, {\n          error: \"DualStack is enabled but this partition does not support DualStack\",\n          type: d\n        }],\n        type: f\n      }, {\n        endpoint: {\n          url: \"https://sns.{Region}.{PartitionResult#dnsSuffix}\",\n          properties: n,\n          headers: n\n        },\n        type: e\n      }],\n      type: f\n    }],\n    type: f\n  }, {\n    error: \"Invalid Configuration: Missing Region\",\n    type: d\n  }]\n};\nexport const ruleSet = _data;","import { awsEndpointFunctions } from \"@aws-sdk/util-endpoints\";\nimport { customEndpointFunctions, EndpointCache, resolveEndpoint } from \"@smithy/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nconst cache = new EndpointCache({\n  size: 50,\n  params: [\"Endpoint\", \"Region\", \"UseDualStack\", \"UseFIPS\"]\n});\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {\n    endpointParams: endpointParams,\n    logger: context.logger\n  }));\n};\ncustomEndpointFunctions.aws = awsEndpointFunctions;","import { AwsSdkSigV4Signer } from \"@aws-sdk/core\";\nimport { NoOpLogger } from \"@smithy/smithy-client\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { fromBase64, toBase64 } from \"@smithy/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@smithy/util-utf8\";\nimport { defaultSNSHttpAuthSchemeProvider } from \"./auth/httpAuthSchemeProvider\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = config => {\n  return {\n    apiVersion: \"2010-03-31\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    extensions: config?.extensions ?? [],\n    httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultSNSHttpAuthSchemeProvider,\n    httpAuthSchemes: config?.httpAuthSchemes ?? [{\n      schemeId: \"aws.auth#sigv4\",\n      identityProvider: ipc => ipc.getIdentityProvider(\"aws.auth#sigv4\"),\n      signer: new AwsSdkSigV4Signer()\n    }],\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"SNS\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8\n  };\n};","import packageInfo from \"../package.json\";\nimport { Sha256 } from \"@aws-crypto/sha256-browser\";\nimport { createDefaultUserAgentProvider } from \"@aws-sdk/util-user-agent-browser\";\nimport { DEFAULT_USE_DUALSTACK_ENDPOINT, DEFAULT_USE_FIPS_ENDPOINT } from \"@smithy/config-resolver\";\nimport { FetchHttpHandler as RequestHandler, streamCollector } from \"@smithy/fetch-http-handler\";\nimport { invalidProvider } from \"@smithy/invalid-dependency\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE } from \"@smithy/util-retry\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@smithy/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@smithy/util-defaults-mode-browser\";\nexport const getRuntimeConfig = config => {\n  const defaultsMode = resolveDefaultsModeConfig(config);\n  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n  const clientSharedValues = getSharedRuntimeConfig(config);\n  return {\n    ...clientSharedValues,\n    ...config,\n    runtime: \"browser\",\n    defaultsMode,\n    bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n    credentialDefaultProvider: config?.credentialDefaultProvider ?? (_ => () => Promise.reject(new Error(\"Credential is missing\"))),\n    defaultUserAgentProvider: config?.defaultUserAgentProvider ?? createDefaultUserAgentProvider({\n      serviceId: clientSharedValues.serviceId,\n      clientVersion: packageInfo.version\n    }),\n    maxAttempts: config?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,\n    region: config?.region ?? invalidProvider(\"Region is missing\"),\n    requestHandler: RequestHandler.create(config?.requestHandler ?? defaultConfigProvider),\n    retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),\n    sha256: config?.sha256 ?? Sha256,\n    streamCollector: config?.streamCollector ?? streamCollector,\n    useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),\n    useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))\n  };\n};","export const getHttpAuthExtensionConfiguration = runtimeConfig => {\n  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n  let _credentials = runtimeConfig.credentials;\n  return {\n    setHttpAuthScheme(httpAuthScheme) {\n      const index = _httpAuthSchemes.findIndex(scheme => scheme.schemeId === httpAuthScheme.schemeId);\n      if (index === -1) {\n        _httpAuthSchemes.push(httpAuthScheme);\n      } else {\n        _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n      }\n    },\n    httpAuthSchemes() {\n      return _httpAuthSchemes;\n    },\n    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n      _httpAuthSchemeProvider = httpAuthSchemeProvider;\n    },\n    httpAuthSchemeProvider() {\n      return _httpAuthSchemeProvider;\n    },\n    setCredentials(credentials) {\n      _credentials = credentials;\n    },\n    credentials() {\n      return _credentials;\n    }\n  };\n};\nexport const resolveHttpAuthRuntimeConfig = config => {\n  return {\n    httpAuthSchemes: config.httpAuthSchemes(),\n    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n    credentials: config.credentials()\n  };\n};","import { getAwsRegionExtensionConfiguration, resolveAwsRegionExtensionConfiguration } from \"@aws-sdk/region-config-resolver\";\nimport { getHttpHandlerExtensionConfiguration, resolveHttpHandlerRuntimeConfig } from \"@smithy/protocol-http\";\nimport { getDefaultExtensionConfiguration, resolveDefaultRuntimeConfig } from \"@smithy/smithy-client\";\nimport { getHttpAuthExtensionConfiguration, resolveHttpAuthRuntimeConfig } from \"./auth/httpAuthExtensionConfiguration\";\nconst asPartial = t => t;\nexport const resolveRuntimeExtensions = (runtimeConfig, extensions) => {\n  const extensionConfiguration = {\n    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),\n    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),\n    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),\n    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))\n  };\n  extensions.forEach(extension => extension.configure(extensionConfiguration));\n  return {\n    ...runtimeConfig,\n    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),\n    ...resolveDefaultRuntimeConfig(extensionConfiguration),\n    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),\n    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)\n  };\n};","import { getHostHeaderPlugin, resolveHostHeaderConfig } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getUserAgentPlugin, resolveUserAgentConfig } from \"@aws-sdk/middleware-user-agent\";\nimport { resolveRegionConfig } from \"@smithy/config-resolver\";\nimport { DefaultIdentityProviderConfig, getHttpAuthSchemeEndpointRuleSetPlugin, getHttpSigningPlugin } from \"@smithy/core\";\nimport { getContentLengthPlugin } from \"@smithy/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@smithy/middleware-endpoint\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@smithy/middleware-retry\";\nimport { Client as __Client } from \"@smithy/smithy-client\";\nimport { defaultSNSHttpAuthSchemeParametersProvider, resolveHttpAuthSchemeConfig } from \"./auth/httpAuthSchemeProvider\";\nimport { resolveClientEndpointParameters } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nimport { resolveRuntimeExtensions } from \"./runtimeExtensions\";\nexport { __Client };\nexport class SNSClient extends __Client {\n  constructor(...[configuration]) {\n    const _config_0 = __getRuntimeConfig(configuration || {});\n    const _config_1 = resolveClientEndpointParameters(_config_0);\n    const _config_2 = resolveUserAgentConfig(_config_1);\n    const _config_3 = resolveRetryConfig(_config_2);\n    const _config_4 = resolveRegionConfig(_config_3);\n    const _config_5 = resolveHostHeaderConfig(_config_4);\n    const _config_6 = resolveEndpointConfig(_config_5);\n    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);\n    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);\n    super(_config_8);\n    this.config = _config_8;\n    this.middlewareStack.use(getUserAgentPlugin(this.config));\n    this.middlewareStack.use(getRetryPlugin(this.config));\n    this.middlewareStack.use(getContentLengthPlugin(this.config));\n    this.middlewareStack.use(getHostHeaderPlugin(this.config));\n    this.middlewareStack.use(getLoggerPlugin(this.config));\n    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {\n      httpAuthSchemeParametersProvider: defaultSNSHttpAuthSchemeParametersProvider,\n      identityProviderConfigProvider: async config => new DefaultIdentityProviderConfig({\n        \"aws.auth#sigv4\": config.credentials\n      })\n    }));\n    this.middlewareStack.use(getHttpSigningPlugin(this.config));\n  }\n  destroy() {\n    super.destroy();\n  }\n}","import { ServiceException as __ServiceException } from \"@smithy/smithy-client\";\nexport { __ServiceException };\nexport class SNSServiceException extends __ServiceException {\n  constructor(options) {\n    super(options);\n    Object.setPrototypeOf(this, SNSServiceException.prototype);\n  }\n}","import { SENSITIVE_STRING } from \"@smithy/smithy-client\";\nimport { SNSServiceException as __BaseException } from \"./SNSServiceException\";\nexport class AuthorizationErrorException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"AuthorizationErrorException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"AuthorizationErrorException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, AuthorizationErrorException.prototype);\n  }\n}\nexport class InternalErrorException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"InternalErrorException\",\n      $fault: \"server\",\n      ...opts\n    });\n    this.name = \"InternalErrorException\";\n    this.$fault = \"server\";\n    Object.setPrototypeOf(this, InternalErrorException.prototype);\n  }\n}\nexport class InvalidParameterException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"InvalidParameterException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"InvalidParameterException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, InvalidParameterException.prototype);\n  }\n}\nexport class NotFoundException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"NotFoundException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"NotFoundException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, NotFoundException.prototype);\n  }\n}\nexport class ThrottledException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"ThrottledException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"ThrottledException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, ThrottledException.prototype);\n  }\n}\nexport class FilterPolicyLimitExceededException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"FilterPolicyLimitExceededException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"FilterPolicyLimitExceededException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, FilterPolicyLimitExceededException.prototype);\n  }\n}\nexport class ReplayLimitExceededException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"ReplayLimitExceededException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"ReplayLimitExceededException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, ReplayLimitExceededException.prototype);\n  }\n}\nexport class SubscriptionLimitExceededException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"SubscriptionLimitExceededException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"SubscriptionLimitExceededException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, SubscriptionLimitExceededException.prototype);\n  }\n}\nexport const LanguageCodeString = {\n  de_DE: \"de-DE\",\n  en_GB: \"en-GB\",\n  en_US: \"en-US\",\n  es_419: \"es-419\",\n  es_ES: \"es-ES\",\n  fr_CA: \"fr-CA\",\n  fr_FR: \"fr-FR\",\n  it_IT: \"it-IT\",\n  jp_JP: \"ja-JP\",\n  kr_KR: \"kr-KR\",\n  pt_BR: \"pt-BR\",\n  zh_CN: \"zh-CN\",\n  zh_TW: \"zh-TW\"\n};\nexport class OptedOutException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"OptedOutException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"OptedOutException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, OptedOutException.prototype);\n  }\n}\nexport class UserErrorException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"UserErrorException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"UserErrorException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, UserErrorException.prototype);\n  }\n}\nexport class ConcurrentAccessException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"ConcurrentAccessException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"ConcurrentAccessException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, ConcurrentAccessException.prototype);\n  }\n}\nexport class InvalidSecurityException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"InvalidSecurityException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"InvalidSecurityException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, InvalidSecurityException.prototype);\n  }\n}\nexport class StaleTagException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"StaleTagException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"StaleTagException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, StaleTagException.prototype);\n  }\n}\nexport class TagLimitExceededException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"TagLimitExceededException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"TagLimitExceededException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, TagLimitExceededException.prototype);\n  }\n}\nexport class TagPolicyException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"TagPolicyException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"TagPolicyException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, TagPolicyException.prototype);\n  }\n}\nexport class TopicLimitExceededException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"TopicLimitExceededException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"TopicLimitExceededException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, TopicLimitExceededException.prototype);\n  }\n}\nexport class ResourceNotFoundException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"ResourceNotFoundException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"ResourceNotFoundException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, ResourceNotFoundException.prototype);\n  }\n}\nexport class InvalidStateException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"InvalidStateException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"InvalidStateException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, InvalidStateException.prototype);\n  }\n}\nexport const NumberCapability = {\n  MMS: \"MMS\",\n  SMS: \"SMS\",\n  VOICE: \"VOICE\"\n};\nexport const RouteType = {\n  Premium: \"Premium\",\n  Promotional: \"Promotional\",\n  Transactional: \"Transactional\"\n};\nexport class ValidationException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"ValidationException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"ValidationException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, ValidationException.prototype);\n    this.Message = opts.Message;\n  }\n}\nexport const SMSSandboxPhoneNumberVerificationStatus = {\n  Pending: \"Pending\",\n  Verified: \"Verified\"\n};\nexport class EndpointDisabledException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"EndpointDisabledException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"EndpointDisabledException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, EndpointDisabledException.prototype);\n  }\n}\nexport class InvalidParameterValueException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"InvalidParameterValueException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"InvalidParameterValueException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, InvalidParameterValueException.prototype);\n  }\n}\nexport class KMSAccessDeniedException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"KMSAccessDeniedException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"KMSAccessDeniedException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, KMSAccessDeniedException.prototype);\n  }\n}\nexport class KMSDisabledException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"KMSDisabledException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"KMSDisabledException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, KMSDisabledException.prototype);\n  }\n}\nexport class KMSInvalidStateException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"KMSInvalidStateException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"KMSInvalidStateException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, KMSInvalidStateException.prototype);\n  }\n}\nexport class KMSNotFoundException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"KMSNotFoundException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"KMSNotFoundException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, KMSNotFoundException.prototype);\n  }\n}\nexport class KMSOptInRequired extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"KMSOptInRequired\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"KMSOptInRequired\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, KMSOptInRequired.prototype);\n  }\n}\nexport class KMSThrottlingException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"KMSThrottlingException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"KMSThrottlingException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, KMSThrottlingException.prototype);\n  }\n}\nexport class PlatformApplicationDisabledException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"PlatformApplicationDisabledException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"PlatformApplicationDisabledException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, PlatformApplicationDisabledException.prototype);\n  }\n}\nexport class BatchEntryIdsNotDistinctException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"BatchEntryIdsNotDistinctException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"BatchEntryIdsNotDistinctException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, BatchEntryIdsNotDistinctException.prototype);\n  }\n}\nexport class BatchRequestTooLongException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"BatchRequestTooLongException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"BatchRequestTooLongException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, BatchRequestTooLongException.prototype);\n  }\n}\nexport class EmptyBatchRequestException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"EmptyBatchRequestException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"EmptyBatchRequestException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, EmptyBatchRequestException.prototype);\n  }\n}\nexport class InvalidBatchEntryIdException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"InvalidBatchEntryIdException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"InvalidBatchEntryIdException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, InvalidBatchEntryIdException.prototype);\n  }\n}\nexport class TooManyEntriesInBatchRequestException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"TooManyEntriesInBatchRequestException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"TooManyEntriesInBatchRequestException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, TooManyEntriesInBatchRequestException.prototype);\n  }\n}\nexport class VerificationException extends __BaseException {\n  constructor(opts) {\n    super({\n      name: \"VerificationException\",\n      $fault: \"client\",\n      ...opts\n    });\n    this.name = \"VerificationException\";\n    this.$fault = \"client\";\n    Object.setPrototypeOf(this, VerificationException.prototype);\n    this.Message = opts.Message;\n    this.Status = opts.Status;\n  }\n}\nexport const CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.phoneNumber && {\n    phoneNumber: SENSITIVE_STRING\n  })\n});\nexport const CreateSMSSandboxPhoneNumberInputFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.PhoneNumber && {\n    PhoneNumber: SENSITIVE_STRING\n  })\n});\nexport const DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.PhoneNumber && {\n    PhoneNumber: SENSITIVE_STRING\n  })\n});\nexport const PhoneNumberInformationFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.PhoneNumber && {\n    PhoneNumber: SENSITIVE_STRING\n  })\n});\nexport const ListOriginationNumbersResultFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.PhoneNumbers && {\n    PhoneNumbers: obj.PhoneNumbers.map(item => PhoneNumberInformationFilterSensitiveLog(item))\n  })\n});\nexport const ListPhoneNumbersOptedOutResponseFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.phoneNumbers && {\n    phoneNumbers: SENSITIVE_STRING\n  })\n});\nexport const SMSSandboxPhoneNumberFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.PhoneNumber && {\n    PhoneNumber: SENSITIVE_STRING\n  })\n});\nexport const ListSMSSandboxPhoneNumbersResultFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.PhoneNumbers && {\n    PhoneNumbers: obj.PhoneNumbers.map(item => SMSSandboxPhoneNumberFilterSensitiveLog(item))\n  })\n});\nexport const OptInPhoneNumberInputFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.phoneNumber && {\n    phoneNumber: SENSITIVE_STRING\n  })\n});\nexport const PublishInputFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.PhoneNumber && {\n    PhoneNumber: SENSITIVE_STRING\n  })\n});\nexport const VerifySMSSandboxPhoneNumberInputFilterSensitiveLog = obj => ({\n  ...obj,\n  ...(obj.PhoneNumber && {\n    PhoneNumber: SENSITIVE_STRING\n  })\n});","import { parseXmlBody as parseBody, parseXmlErrorBody as parseErrorBody } from \"@aws-sdk/core\";\nimport { HttpRequest as __HttpRequest } from \"@smithy/protocol-http\";\nimport { collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, withBaseException } from \"@smithy/smithy-client\";\nimport { AuthorizationErrorException, BatchEntryIdsNotDistinctException, BatchRequestTooLongException, ConcurrentAccessException, EmptyBatchRequestException, EndpointDisabledException, FilterPolicyLimitExceededException, InternalErrorException, InvalidBatchEntryIdException, InvalidParameterException, InvalidParameterValueException, InvalidSecurityException, InvalidStateException, KMSAccessDeniedException, KMSDisabledException, KMSInvalidStateException, KMSNotFoundException, KMSOptInRequired, KMSThrottlingException, NotFoundException, OptedOutException, PlatformApplicationDisabledException, ReplayLimitExceededException, ResourceNotFoundException, StaleTagException, SubscriptionLimitExceededException, TagLimitExceededException, TagPolicyException, ThrottledException, TooManyEntriesInBatchRequestException, TopicLimitExceededException, UserErrorException, ValidationException, VerificationException } from \"../models/models_0\";\nimport { SNSServiceException as __BaseException } from \"../models/SNSServiceException\";\nexport const se_AddPermissionCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_AddPermissionInput(input, context),\n    [_A]: _AP,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CheckIfPhoneNumberIsOptedOutCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_CheckIfPhoneNumberIsOptedOutInput(input, context),\n    [_A]: _CIPNIOO,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ConfirmSubscriptionCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ConfirmSubscriptionInput(input, context),\n    [_A]: _CS,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreatePlatformApplicationCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_CreatePlatformApplicationInput(input, context),\n    [_A]: _CPA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreatePlatformEndpointCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_CreatePlatformEndpointInput(input, context),\n    [_A]: _CPE,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateSMSSandboxPhoneNumberCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_CreateSMSSandboxPhoneNumberInput(input, context),\n    [_A]: _CSMSSPN,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateTopicCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_CreateTopicInput(input, context),\n    [_A]: _CT,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteEndpointCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_DeleteEndpointInput(input, context),\n    [_A]: _DE,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeletePlatformApplicationCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_DeletePlatformApplicationInput(input, context),\n    [_A]: _DPA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteSMSSandboxPhoneNumberCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_DeleteSMSSandboxPhoneNumberInput(input, context),\n    [_A]: _DSMSSPN,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteTopicCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_DeleteTopicInput(input, context),\n    [_A]: _DT,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetDataProtectionPolicyCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_GetDataProtectionPolicyInput(input, context),\n    [_A]: _GDPP,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetEndpointAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_GetEndpointAttributesInput(input, context),\n    [_A]: _GEA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetPlatformApplicationAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_GetPlatformApplicationAttributesInput(input, context),\n    [_A]: _GPAA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetSMSAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_GetSMSAttributesInput(input, context),\n    [_A]: _GSMSA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetSMSSandboxAccountStatusCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_GetSMSSandboxAccountStatusInput(input, context),\n    [_A]: _GSMSSAS,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetSubscriptionAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_GetSubscriptionAttributesInput(input, context),\n    [_A]: _GSA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetTopicAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_GetTopicAttributesInput(input, context),\n    [_A]: _GTA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListEndpointsByPlatformApplicationCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListEndpointsByPlatformApplicationInput(input, context),\n    [_A]: _LEBPA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListOriginationNumbersCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListOriginationNumbersRequest(input, context),\n    [_A]: _LON,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListPhoneNumbersOptedOutCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListPhoneNumbersOptedOutInput(input, context),\n    [_A]: _LPNOO,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListPlatformApplicationsCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListPlatformApplicationsInput(input, context),\n    [_A]: _LPA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListSMSSandboxPhoneNumbersCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListSMSSandboxPhoneNumbersInput(input, context),\n    [_A]: _LSMSSPN,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListSubscriptionsCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListSubscriptionsInput(input, context),\n    [_A]: _LS,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListSubscriptionsByTopicCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListSubscriptionsByTopicInput(input, context),\n    [_A]: _LSBT,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListTagsForResourceCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListTagsForResourceRequest(input, context),\n    [_A]: _LTFR,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListTopicsCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_ListTopicsInput(input, context),\n    [_A]: _LT,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_OptInPhoneNumberCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_OptInPhoneNumberInput(input, context),\n    [_A]: _OIPN,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PublishCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_PublishInput(input, context),\n    [_A]: _P,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PublishBatchCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_PublishBatchInput(input, context),\n    [_A]: _PB,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutDataProtectionPolicyCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_PutDataProtectionPolicyInput(input, context),\n    [_A]: _PDPP,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RemovePermissionCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_RemovePermissionInput(input, context),\n    [_A]: _RP,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SetEndpointAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_SetEndpointAttributesInput(input, context),\n    [_A]: _SEA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SetPlatformApplicationAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_SetPlatformApplicationAttributesInput(input, context),\n    [_A]: _SPAA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SetSMSAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_SetSMSAttributesInput(input, context),\n    [_A]: _SSMSA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SetSubscriptionAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_SetSubscriptionAttributesInput(input, context),\n    [_A]: _SSA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SetTopicAttributesCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_SetTopicAttributesInput(input, context),\n    [_A]: _STA,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SubscribeCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_SubscribeInput(input, context),\n    [_A]: _S,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_TagResourceCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_TagResourceRequest(input, context),\n    [_A]: _TR,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UnsubscribeCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_UnsubscribeInput(input, context),\n    [_A]: _U,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UntagResourceCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_UntagResourceRequest(input, context),\n    [_A]: _UR,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_VerifySMSSandboxPhoneNumberCommand = async (input, context) => {\n  const headers = SHARED_HEADERS;\n  let body;\n  body = buildFormUrlencodedString({\n    ...se_VerifySMSSandboxPhoneNumberInput(input, context),\n    [_A]: _VSMSSPN,\n    [_V]: _\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const de_AddPermissionCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_CheckIfPhoneNumberIsOptedOutCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_CheckIfPhoneNumberIsOptedOutResponse(data.CheckIfPhoneNumberIsOptedOutResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ConfirmSubscriptionCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ConfirmSubscriptionResponse(data.ConfirmSubscriptionResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_CreatePlatformApplicationCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_CreatePlatformApplicationResponse(data.CreatePlatformApplicationResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_CreatePlatformEndpointCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_CreateEndpointResponse(data.CreatePlatformEndpointResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_CreateSMSSandboxPhoneNumberCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_CreateSMSSandboxPhoneNumberResult(data.CreateSMSSandboxPhoneNumberResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_CreateTopicCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_CreateTopicResponse(data.CreateTopicResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_DeleteEndpointCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_DeletePlatformApplicationCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_DeleteSMSSandboxPhoneNumberCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_DeleteSMSSandboxPhoneNumberResult(data.DeleteSMSSandboxPhoneNumberResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_DeleteTopicCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_GetDataProtectionPolicyCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_GetDataProtectionPolicyResponse(data.GetDataProtectionPolicyResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_GetEndpointAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_GetEndpointAttributesResponse(data.GetEndpointAttributesResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_GetPlatformApplicationAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_GetPlatformApplicationAttributesResponse(data.GetPlatformApplicationAttributesResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_GetSMSAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_GetSMSAttributesResponse(data.GetSMSAttributesResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_GetSMSSandboxAccountStatusCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_GetSMSSandboxAccountStatusResult(data.GetSMSSandboxAccountStatusResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_GetSubscriptionAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_GetSubscriptionAttributesResponse(data.GetSubscriptionAttributesResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_GetTopicAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_GetTopicAttributesResponse(data.GetTopicAttributesResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListEndpointsByPlatformApplicationCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListEndpointsByPlatformApplicationResponse(data.ListEndpointsByPlatformApplicationResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListOriginationNumbersCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListOriginationNumbersResult(data.ListOriginationNumbersResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListPhoneNumbersOptedOutCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListPhoneNumbersOptedOutResponse(data.ListPhoneNumbersOptedOutResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListPlatformApplicationsCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListPlatformApplicationsResponse(data.ListPlatformApplicationsResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListSMSSandboxPhoneNumbersCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListSMSSandboxPhoneNumbersResult(data.ListSMSSandboxPhoneNumbersResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListSubscriptionsCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListSubscriptionsResponse(data.ListSubscriptionsResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListSubscriptionsByTopicCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListSubscriptionsByTopicResponse(data.ListSubscriptionsByTopicResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListTagsForResourceCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListTagsForResourceResponse(data.ListTagsForResourceResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_ListTopicsCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_ListTopicsResponse(data.ListTopicsResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_OptInPhoneNumberCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_OptInPhoneNumberResponse(data.OptInPhoneNumberResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_PublishCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_PublishResponse(data.PublishResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_PublishBatchCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_PublishBatchResponse(data.PublishBatchResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_PutDataProtectionPolicyCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_RemovePermissionCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_SetEndpointAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_SetPlatformApplicationAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_SetSMSAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_SetSMSAttributesResponse(data.SetSMSAttributesResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_SetSubscriptionAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_SetTopicAttributesCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_SubscribeCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_SubscribeResponse(data.SubscribeResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_TagResourceCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_TagResourceResponse(data.TagResourceResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_UnsubscribeCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  await collectBody(output.body, context);\n  const response = {\n    $metadata: deserializeMetadata(output)\n  };\n  return response;\n};\nexport const de_UntagResourceCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_UntagResourceResponse(data.UntagResourceResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nexport const de_VerifySMSSandboxPhoneNumberCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return de_CommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = de_VerifySMSSandboxPhoneNumberResult(data.VerifySMSSandboxPhoneNumberResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return response;\n};\nconst de_CommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"AuthorizationError\":\n    case \"com.amazonaws.sns#AuthorizationErrorException\":\n      throw await de_AuthorizationErrorExceptionRes(parsedOutput, context);\n    case \"InternalError\":\n    case \"com.amazonaws.sns#InternalErrorException\":\n      throw await de_InternalErrorExceptionRes(parsedOutput, context);\n    case \"InvalidParameter\":\n    case \"com.amazonaws.sns#InvalidParameterException\":\n      throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n    case \"NotFound\":\n    case \"com.amazonaws.sns#NotFoundException\":\n      throw await de_NotFoundExceptionRes(parsedOutput, context);\n    case \"Throttled\":\n    case \"com.amazonaws.sns#ThrottledException\":\n      throw await de_ThrottledExceptionRes(parsedOutput, context);\n    case \"FilterPolicyLimitExceeded\":\n    case \"com.amazonaws.sns#FilterPolicyLimitExceededException\":\n      throw await de_FilterPolicyLimitExceededExceptionRes(parsedOutput, context);\n    case \"ReplayLimitExceeded\":\n    case \"com.amazonaws.sns#ReplayLimitExceededException\":\n      throw await de_ReplayLimitExceededExceptionRes(parsedOutput, context);\n    case \"SubscriptionLimitExceeded\":\n    case \"com.amazonaws.sns#SubscriptionLimitExceededException\":\n      throw await de_SubscriptionLimitExceededExceptionRes(parsedOutput, context);\n    case \"OptedOut\":\n    case \"com.amazonaws.sns#OptedOutException\":\n      throw await de_OptedOutExceptionRes(parsedOutput, context);\n    case \"UserError\":\n    case \"com.amazonaws.sns#UserErrorException\":\n      throw await de_UserErrorExceptionRes(parsedOutput, context);\n    case \"ConcurrentAccess\":\n    case \"com.amazonaws.sns#ConcurrentAccessException\":\n      throw await de_ConcurrentAccessExceptionRes(parsedOutput, context);\n    case \"InvalidSecurity\":\n    case \"com.amazonaws.sns#InvalidSecurityException\":\n      throw await de_InvalidSecurityExceptionRes(parsedOutput, context);\n    case \"StaleTag\":\n    case \"com.amazonaws.sns#StaleTagException\":\n      throw await de_StaleTagExceptionRes(parsedOutput, context);\n    case \"TagLimitExceeded\":\n    case \"com.amazonaws.sns#TagLimitExceededException\":\n      throw await de_TagLimitExceededExceptionRes(parsedOutput, context);\n    case \"TagPolicy\":\n    case \"com.amazonaws.sns#TagPolicyException\":\n      throw await de_TagPolicyExceptionRes(parsedOutput, context);\n    case \"TopicLimitExceeded\":\n    case \"com.amazonaws.sns#TopicLimitExceededException\":\n      throw await de_TopicLimitExceededExceptionRes(parsedOutput, context);\n    case \"ResourceNotFound\":\n    case \"com.amazonaws.sns#ResourceNotFoundException\":\n      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n    case \"InvalidState\":\n    case \"com.amazonaws.sns#InvalidStateException\":\n      throw await de_InvalidStateExceptionRes(parsedOutput, context);\n    case \"ValidationException\":\n    case \"com.amazonaws.sns#ValidationException\":\n      throw await de_ValidationExceptionRes(parsedOutput, context);\n    case \"EndpointDisabled\":\n    case \"com.amazonaws.sns#EndpointDisabledException\":\n      throw await de_EndpointDisabledExceptionRes(parsedOutput, context);\n    case \"KMSAccessDenied\":\n    case \"com.amazonaws.sns#KMSAccessDeniedException\":\n      throw await de_KMSAccessDeniedExceptionRes(parsedOutput, context);\n    case \"KMSDisabled\":\n    case \"com.amazonaws.sns#KMSDisabledException\":\n      throw await de_KMSDisabledExceptionRes(parsedOutput, context);\n    case \"KMSInvalidState\":\n    case \"com.amazonaws.sns#KMSInvalidStateException\":\n      throw await de_KMSInvalidStateExceptionRes(parsedOutput, context);\n    case \"KMSNotFound\":\n    case \"com.amazonaws.sns#KMSNotFoundException\":\n      throw await de_KMSNotFoundExceptionRes(parsedOutput, context);\n    case \"KMSOptInRequired\":\n    case \"com.amazonaws.sns#KMSOptInRequired\":\n      throw await de_KMSOptInRequiredRes(parsedOutput, context);\n    case \"KMSThrottling\":\n    case \"com.amazonaws.sns#KMSThrottlingException\":\n      throw await de_KMSThrottlingExceptionRes(parsedOutput, context);\n    case \"ParameterValueInvalid\":\n    case \"com.amazonaws.sns#InvalidParameterValueException\":\n      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);\n    case \"PlatformApplicationDisabled\":\n    case \"com.amazonaws.sns#PlatformApplicationDisabledException\":\n      throw await de_PlatformApplicationDisabledExceptionRes(parsedOutput, context);\n    case \"BatchEntryIdsNotDistinct\":\n    case \"com.amazonaws.sns#BatchEntryIdsNotDistinctException\":\n      throw await de_BatchEntryIdsNotDistinctExceptionRes(parsedOutput, context);\n    case \"BatchRequestTooLong\":\n    case \"com.amazonaws.sns#BatchRequestTooLongException\":\n      throw await de_BatchRequestTooLongExceptionRes(parsedOutput, context);\n    case \"EmptyBatchRequest\":\n    case \"com.amazonaws.sns#EmptyBatchRequestException\":\n      throw await de_EmptyBatchRequestExceptionRes(parsedOutput, context);\n    case \"InvalidBatchEntryId\":\n    case \"com.amazonaws.sns#InvalidBatchEntryIdException\":\n      throw await de_InvalidBatchEntryIdExceptionRes(parsedOutput, context);\n    case \"TooManyEntriesInBatchRequest\":\n    case \"com.amazonaws.sns#TooManyEntriesInBatchRequestException\":\n      throw await de_TooManyEntriesInBatchRequestExceptionRes(parsedOutput, context);\n    case \"VerificationException\":\n    case \"com.amazonaws.sns#VerificationException\":\n      throw await de_VerificationExceptionRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        errorCode\n      });\n  }\n};\nconst de_AuthorizationErrorExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_AuthorizationErrorException(body.Error, context);\n  const exception = new AuthorizationErrorException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_BatchEntryIdsNotDistinctExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_BatchEntryIdsNotDistinctException(body.Error, context);\n  const exception = new BatchEntryIdsNotDistinctException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_BatchRequestTooLongExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_BatchRequestTooLongException(body.Error, context);\n  const exception = new BatchRequestTooLongException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_ConcurrentAccessExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_ConcurrentAccessException(body.Error, context);\n  const exception = new ConcurrentAccessException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_EmptyBatchRequestExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_EmptyBatchRequestException(body.Error, context);\n  const exception = new EmptyBatchRequestException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_EndpointDisabledExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_EndpointDisabledException(body.Error, context);\n  const exception = new EndpointDisabledException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_FilterPolicyLimitExceededExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_FilterPolicyLimitExceededException(body.Error, context);\n  const exception = new FilterPolicyLimitExceededException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_InternalErrorExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_InternalErrorException(body.Error, context);\n  const exception = new InternalErrorException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_InvalidBatchEntryIdExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_InvalidBatchEntryIdException(body.Error, context);\n  const exception = new InvalidBatchEntryIdException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_InvalidParameterExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_InvalidParameterException(body.Error, context);\n  const exception = new InvalidParameterException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_InvalidParameterValueException(body.Error, context);\n  const exception = new InvalidParameterValueException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_InvalidSecurityExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_InvalidSecurityException(body.Error, context);\n  const exception = new InvalidSecurityException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_InvalidStateExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_InvalidStateException(body.Error, context);\n  const exception = new InvalidStateException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_KMSAccessDeniedExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_KMSAccessDeniedException(body.Error, context);\n  const exception = new KMSAccessDeniedException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_KMSDisabledExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_KMSDisabledException(body.Error, context);\n  const exception = new KMSDisabledException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_KMSInvalidStateExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_KMSInvalidStateException(body.Error, context);\n  const exception = new KMSInvalidStateException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_KMSNotFoundExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_KMSNotFoundException(body.Error, context);\n  const exception = new KMSNotFoundException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_KMSOptInRequiredRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_KMSOptInRequired(body.Error, context);\n  const exception = new KMSOptInRequired({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_KMSThrottlingExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_KMSThrottlingException(body.Error, context);\n  const exception = new KMSThrottlingException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_NotFoundExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_NotFoundException(body.Error, context);\n  const exception = new NotFoundException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_OptedOutExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_OptedOutException(body.Error, context);\n  const exception = new OptedOutException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_PlatformApplicationDisabledExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_PlatformApplicationDisabledException(body.Error, context);\n  const exception = new PlatformApplicationDisabledException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_ReplayLimitExceededExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_ReplayLimitExceededException(body.Error, context);\n  const exception = new ReplayLimitExceededException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_ResourceNotFoundException(body.Error, context);\n  const exception = new ResourceNotFoundException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_StaleTagExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_StaleTagException(body.Error, context);\n  const exception = new StaleTagException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_SubscriptionLimitExceededExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_SubscriptionLimitExceededException(body.Error, context);\n  const exception = new SubscriptionLimitExceededException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_TagLimitExceededExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_TagLimitExceededException(body.Error, context);\n  const exception = new TagLimitExceededException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_TagPolicyExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_TagPolicyException(body.Error, context);\n  const exception = new TagPolicyException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_ThrottledExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_ThrottledException(body.Error, context);\n  const exception = new ThrottledException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_TooManyEntriesInBatchRequestExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_TooManyEntriesInBatchRequestException(body.Error, context);\n  const exception = new TooManyEntriesInBatchRequestException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_TopicLimitExceededExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_TopicLimitExceededException(body.Error, context);\n  const exception = new TopicLimitExceededException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_UserErrorExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_UserErrorException(body.Error, context);\n  const exception = new UserErrorException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_ValidationExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_ValidationException(body.Error, context);\n  const exception = new ValidationException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst de_VerificationExceptionRes = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = de_VerificationException(body.Error, context);\n  const exception = new VerificationException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst se_ActionsList = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    entries[`member.${counter}`] = entry;\n    counter++;\n  }\n  return entries;\n};\nconst se_AddPermissionInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  if (input[_L] != null) {\n    entries[_L] = input[_L];\n  }\n  if (input[_AWSAI] != null) {\n    const memberEntries = se_DelegatesList(input[_AWSAI], context);\n    if (input[_AWSAI]?.length === 0) {\n      entries.AWSAccountId = [];\n    }\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `AWSAccountId.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input[_AN] != null) {\n    const memberEntries = se_ActionsList(input[_AN], context);\n    if (input[_AN]?.length === 0) {\n      entries.ActionName = [];\n    }\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `ActionName.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_CheckIfPhoneNumberIsOptedOutInput = (input, context) => {\n  const entries = {};\n  if (input[_pN] != null) {\n    entries[_pN] = input[_pN];\n  }\n  return entries;\n};\nconst se_ConfirmSubscriptionInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  if (input[_T] != null) {\n    entries[_T] = input[_T];\n  }\n  if (input[_AOU] != null) {\n    entries[_AOU] = input[_AOU];\n  }\n  return entries;\n};\nconst se_CreatePlatformApplicationInput = (input, context) => {\n  const entries = {};\n  if (input[_N] != null) {\n    entries[_N] = input[_N];\n  }\n  if (input[_Pl] != null) {\n    entries[_Pl] = input[_Pl];\n  }\n  if (input[_At] != null) {\n    const memberEntries = se_MapStringToString(input[_At], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `Attributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_CreatePlatformEndpointInput = (input, context) => {\n  const entries = {};\n  if (input[_PAA] != null) {\n    entries[_PAA] = input[_PAA];\n  }\n  if (input[_T] != null) {\n    entries[_T] = input[_T];\n  }\n  if (input[_CUD] != null) {\n    entries[_CUD] = input[_CUD];\n  }\n  if (input[_At] != null) {\n    const memberEntries = se_MapStringToString(input[_At], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `Attributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_CreateSMSSandboxPhoneNumberInput = (input, context) => {\n  const entries = {};\n  if (input[_PN] != null) {\n    entries[_PN] = input[_PN];\n  }\n  if (input[_LC] != null) {\n    entries[_LC] = input[_LC];\n  }\n  return entries;\n};\nconst se_CreateTopicInput = (input, context) => {\n  const entries = {};\n  if (input[_N] != null) {\n    entries[_N] = input[_N];\n  }\n  if (input[_At] != null) {\n    const memberEntries = se_TopicAttributesMap(input[_At], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `Attributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input[_Ta] != null) {\n    const memberEntries = se_TagList(input[_Ta], context);\n    if (input[_Ta]?.length === 0) {\n      entries.Tags = [];\n    }\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input[_DPP] != null) {\n    entries[_DPP] = input[_DPP];\n  }\n  return entries;\n};\nconst se_DelegatesList = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    entries[`member.${counter}`] = entry;\n    counter++;\n  }\n  return entries;\n};\nconst se_DeleteEndpointInput = (input, context) => {\n  const entries = {};\n  if (input[_EA] != null) {\n    entries[_EA] = input[_EA];\n  }\n  return entries;\n};\nconst se_DeletePlatformApplicationInput = (input, context) => {\n  const entries = {};\n  if (input[_PAA] != null) {\n    entries[_PAA] = input[_PAA];\n  }\n  return entries;\n};\nconst se_DeleteSMSSandboxPhoneNumberInput = (input, context) => {\n  const entries = {};\n  if (input[_PN] != null) {\n    entries[_PN] = input[_PN];\n  }\n  return entries;\n};\nconst se_DeleteTopicInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  return entries;\n};\nconst se_GetDataProtectionPolicyInput = (input, context) => {\n  const entries = {};\n  if (input[_RA] != null) {\n    entries[_RA] = input[_RA];\n  }\n  return entries;\n};\nconst se_GetEndpointAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_EA] != null) {\n    entries[_EA] = input[_EA];\n  }\n  return entries;\n};\nconst se_GetPlatformApplicationAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_PAA] != null) {\n    entries[_PAA] = input[_PAA];\n  }\n  return entries;\n};\nconst se_GetSMSAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_a] != null) {\n    const memberEntries = se_ListString(input[_a], context);\n    if (input[_a]?.length === 0) {\n      entries.attributes = [];\n    }\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `attributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_GetSMSSandboxAccountStatusInput = (input, context) => {\n  const entries = {};\n  return entries;\n};\nconst se_GetSubscriptionAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_SA] != null) {\n    entries[_SA] = input[_SA];\n  }\n  return entries;\n};\nconst se_GetTopicAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  return entries;\n};\nconst se_ListEndpointsByPlatformApplicationInput = (input, context) => {\n  const entries = {};\n  if (input[_PAA] != null) {\n    entries[_PAA] = input[_PAA];\n  }\n  if (input[_NT] != null) {\n    entries[_NT] = input[_NT];\n  }\n  return entries;\n};\nconst se_ListOriginationNumbersRequest = (input, context) => {\n  const entries = {};\n  if (input[_NT] != null) {\n    entries[_NT] = input[_NT];\n  }\n  if (input[_MR] != null) {\n    entries[_MR] = input[_MR];\n  }\n  return entries;\n};\nconst se_ListPhoneNumbersOptedOutInput = (input, context) => {\n  const entries = {};\n  if (input[_nT] != null) {\n    entries[_nT] = input[_nT];\n  }\n  return entries;\n};\nconst se_ListPlatformApplicationsInput = (input, context) => {\n  const entries = {};\n  if (input[_NT] != null) {\n    entries[_NT] = input[_NT];\n  }\n  return entries;\n};\nconst se_ListSMSSandboxPhoneNumbersInput = (input, context) => {\n  const entries = {};\n  if (input[_NT] != null) {\n    entries[_NT] = input[_NT];\n  }\n  if (input[_MR] != null) {\n    entries[_MR] = input[_MR];\n  }\n  return entries;\n};\nconst se_ListString = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    entries[`member.${counter}`] = entry;\n    counter++;\n  }\n  return entries;\n};\nconst se_ListSubscriptionsByTopicInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  if (input[_NT] != null) {\n    entries[_NT] = input[_NT];\n  }\n  return entries;\n};\nconst se_ListSubscriptionsInput = (input, context) => {\n  const entries = {};\n  if (input[_NT] != null) {\n    entries[_NT] = input[_NT];\n  }\n  return entries;\n};\nconst se_ListTagsForResourceRequest = (input, context) => {\n  const entries = {};\n  if (input[_RA] != null) {\n    entries[_RA] = input[_RA];\n  }\n  return entries;\n};\nconst se_ListTopicsInput = (input, context) => {\n  const entries = {};\n  if (input[_NT] != null) {\n    entries[_NT] = input[_NT];\n  }\n  return entries;\n};\nconst se_MapStringToString = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  Object.keys(input).filter(key => input[key] != null).forEach(key => {\n    entries[`entry.${counter}.key`] = key;\n    entries[`entry.${counter}.value`] = input[key];\n    counter++;\n  });\n  return entries;\n};\nconst se_MessageAttributeMap = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  Object.keys(input).filter(key => input[key] != null).forEach(key => {\n    entries[`entry.${counter}.Name`] = key;\n    const memberEntries = se_MessageAttributeValue(input[key], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      entries[`entry.${counter}.Value.${key}`] = value;\n    });\n    counter++;\n  });\n  return entries;\n};\nconst se_MessageAttributeValue = (input, context) => {\n  const entries = {};\n  if (input[_DTa] != null) {\n    entries[_DTa] = input[_DTa];\n  }\n  if (input[_SV] != null) {\n    entries[_SV] = input[_SV];\n  }\n  if (input[_BV] != null) {\n    entries[_BV] = context.base64Encoder(input[_BV]);\n  }\n  return entries;\n};\nconst se_OptInPhoneNumberInput = (input, context) => {\n  const entries = {};\n  if (input[_pN] != null) {\n    entries[_pN] = input[_pN];\n  }\n  return entries;\n};\nconst se_PublishBatchInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  if (input[_PBRE] != null) {\n    const memberEntries = se_PublishBatchRequestEntryList(input[_PBRE], context);\n    if (input[_PBRE]?.length === 0) {\n      entries.PublishBatchRequestEntries = [];\n    }\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `PublishBatchRequestEntries.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_PublishBatchRequestEntry = (input, context) => {\n  const entries = {};\n  if (input[_I] != null) {\n    entries[_I] = input[_I];\n  }\n  if (input[_M] != null) {\n    entries[_M] = input[_M];\n  }\n  if (input[_Su] != null) {\n    entries[_Su] = input[_Su];\n  }\n  if (input[_MS] != null) {\n    entries[_MS] = input[_MS];\n  }\n  if (input[_MA] != null) {\n    const memberEntries = se_MessageAttributeMap(input[_MA], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `MessageAttributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input[_MDI] != null) {\n    entries[_MDI] = input[_MDI];\n  }\n  if (input[_MGI] != null) {\n    entries[_MGI] = input[_MGI];\n  }\n  return entries;\n};\nconst se_PublishBatchRequestEntryList = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    const memberEntries = se_PublishBatchRequestEntry(entry, context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n  return entries;\n};\nconst se_PublishInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  if (input[_TAa] != null) {\n    entries[_TAa] = input[_TAa];\n  }\n  if (input[_PN] != null) {\n    entries[_PN] = input[_PN];\n  }\n  if (input[_M] != null) {\n    entries[_M] = input[_M];\n  }\n  if (input[_Su] != null) {\n    entries[_Su] = input[_Su];\n  }\n  if (input[_MS] != null) {\n    entries[_MS] = input[_MS];\n  }\n  if (input[_MA] != null) {\n    const memberEntries = se_MessageAttributeMap(input[_MA], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `MessageAttributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input[_MDI] != null) {\n    entries[_MDI] = input[_MDI];\n  }\n  if (input[_MGI] != null) {\n    entries[_MGI] = input[_MGI];\n  }\n  return entries;\n};\nconst se_PutDataProtectionPolicyInput = (input, context) => {\n  const entries = {};\n  if (input[_RA] != null) {\n    entries[_RA] = input[_RA];\n  }\n  if (input[_DPP] != null) {\n    entries[_DPP] = input[_DPP];\n  }\n  return entries;\n};\nconst se_RemovePermissionInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  if (input[_L] != null) {\n    entries[_L] = input[_L];\n  }\n  return entries;\n};\nconst se_SetEndpointAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_EA] != null) {\n    entries[_EA] = input[_EA];\n  }\n  if (input[_At] != null) {\n    const memberEntries = se_MapStringToString(input[_At], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `Attributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_SetPlatformApplicationAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_PAA] != null) {\n    entries[_PAA] = input[_PAA];\n  }\n  if (input[_At] != null) {\n    const memberEntries = se_MapStringToString(input[_At], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `Attributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_SetSMSAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_a] != null) {\n    const memberEntries = se_MapStringToString(input[_a], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `attributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_SetSubscriptionAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_SA] != null) {\n    entries[_SA] = input[_SA];\n  }\n  if (input[_ANt] != null) {\n    entries[_ANt] = input[_ANt];\n  }\n  if (input[_AV] != null) {\n    entries[_AV] = input[_AV];\n  }\n  return entries;\n};\nconst se_SetTopicAttributesInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  if (input[_ANt] != null) {\n    entries[_ANt] = input[_ANt];\n  }\n  if (input[_AV] != null) {\n    entries[_AV] = input[_AV];\n  }\n  return entries;\n};\nconst se_SubscribeInput = (input, context) => {\n  const entries = {};\n  if (input[_TA] != null) {\n    entries[_TA] = input[_TA];\n  }\n  if (input[_Pr] != null) {\n    entries[_Pr] = input[_Pr];\n  }\n  if (input[_E] != null) {\n    entries[_E] = input[_E];\n  }\n  if (input[_At] != null) {\n    const memberEntries = se_SubscriptionAttributesMap(input[_At], context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `Attributes.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input[_RSA] != null) {\n    entries[_RSA] = input[_RSA];\n  }\n  return entries;\n};\nconst se_SubscriptionAttributesMap = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  Object.keys(input).filter(key => input[key] != null).forEach(key => {\n    entries[`entry.${counter}.key`] = key;\n    entries[`entry.${counter}.value`] = input[key];\n    counter++;\n  });\n  return entries;\n};\nconst se_Tag = (input, context) => {\n  const entries = {};\n  if (input[_K] != null) {\n    entries[_K] = input[_K];\n  }\n  if (input[_Va] != null) {\n    entries[_Va] = input[_Va];\n  }\n  return entries;\n};\nconst se_TagKeyList = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    entries[`member.${counter}`] = entry;\n    counter++;\n  }\n  return entries;\n};\nconst se_TagList = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    const memberEntries = se_Tag(entry, context);\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n  return entries;\n};\nconst se_TagResourceRequest = (input, context) => {\n  const entries = {};\n  if (input[_RA] != null) {\n    entries[_RA] = input[_RA];\n  }\n  if (input[_Ta] != null) {\n    const memberEntries = se_TagList(input[_Ta], context);\n    if (input[_Ta]?.length === 0) {\n      entries.Tags = [];\n    }\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_TopicAttributesMap = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  Object.keys(input).filter(key => input[key] != null).forEach(key => {\n    entries[`entry.${counter}.key`] = key;\n    entries[`entry.${counter}.value`] = input[key];\n    counter++;\n  });\n  return entries;\n};\nconst se_UnsubscribeInput = (input, context) => {\n  const entries = {};\n  if (input[_SA] != null) {\n    entries[_SA] = input[_SA];\n  }\n  return entries;\n};\nconst se_UntagResourceRequest = (input, context) => {\n  const entries = {};\n  if (input[_RA] != null) {\n    entries[_RA] = input[_RA];\n  }\n  if (input[_TK] != null) {\n    const memberEntries = se_TagKeyList(input[_TK], context);\n    if (input[_TK]?.length === 0) {\n      entries.TagKeys = [];\n    }\n    Object.entries(memberEntries).forEach(([key, value]) => {\n      const loc = `TagKeys.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst se_VerifySMSSandboxPhoneNumberInput = (input, context) => {\n  const entries = {};\n  if (input[_PN] != null) {\n    entries[_PN] = input[_PN];\n  }\n  if (input[_OTP] != null) {\n    entries[_OTP] = input[_OTP];\n  }\n  return entries;\n};\nconst de_AuthorizationErrorException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_BatchEntryIdsNotDistinctException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_BatchRequestTooLongException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_BatchResultErrorEntry = (output, context) => {\n  const contents = {};\n  if (output[_I] != null) {\n    contents[_I] = __expectString(output[_I]);\n  }\n  if (output[_C] != null) {\n    contents[_C] = __expectString(output[_C]);\n  }\n  if (output[_M] != null) {\n    contents[_M] = __expectString(output[_M]);\n  }\n  if (output[_SF] != null) {\n    contents[_SF] = __parseBoolean(output[_SF]);\n  }\n  return contents;\n};\nconst de_BatchResultErrorEntryList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_BatchResultErrorEntry(entry, context);\n  });\n};\nconst de_CheckIfPhoneNumberIsOptedOutResponse = (output, context) => {\n  const contents = {};\n  if (output[_iOO] != null) {\n    contents[_iOO] = __parseBoolean(output[_iOO]);\n  }\n  return contents;\n};\nconst de_ConcurrentAccessException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_ConfirmSubscriptionResponse = (output, context) => {\n  const contents = {};\n  if (output[_SA] != null) {\n    contents[_SA] = __expectString(output[_SA]);\n  }\n  return contents;\n};\nconst de_CreateEndpointResponse = (output, context) => {\n  const contents = {};\n  if (output[_EA] != null) {\n    contents[_EA] = __expectString(output[_EA]);\n  }\n  return contents;\n};\nconst de_CreatePlatformApplicationResponse = (output, context) => {\n  const contents = {};\n  if (output[_PAA] != null) {\n    contents[_PAA] = __expectString(output[_PAA]);\n  }\n  return contents;\n};\nconst de_CreateSMSSandboxPhoneNumberResult = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_CreateTopicResponse = (output, context) => {\n  const contents = {};\n  if (output[_TA] != null) {\n    contents[_TA] = __expectString(output[_TA]);\n  }\n  return contents;\n};\nconst de_DeleteSMSSandboxPhoneNumberResult = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_EmptyBatchRequestException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_Endpoint = (output, context) => {\n  const contents = {};\n  if (output[_EA] != null) {\n    contents[_EA] = __expectString(output[_EA]);\n  }\n  if (output.Attributes === \"\") {\n    contents[_At] = {};\n  } else if (output[_At] != null && output[_At][_e] != null) {\n    contents[_At] = de_MapStringToString(__getArrayIfSingleItem(output[_At][_e]), context);\n  }\n  return contents;\n};\nconst de_EndpointDisabledException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_FilterPolicyLimitExceededException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_GetDataProtectionPolicyResponse = (output, context) => {\n  const contents = {};\n  if (output[_DPP] != null) {\n    contents[_DPP] = __expectString(output[_DPP]);\n  }\n  return contents;\n};\nconst de_GetEndpointAttributesResponse = (output, context) => {\n  const contents = {};\n  if (output.Attributes === \"\") {\n    contents[_At] = {};\n  } else if (output[_At] != null && output[_At][_e] != null) {\n    contents[_At] = de_MapStringToString(__getArrayIfSingleItem(output[_At][_e]), context);\n  }\n  return contents;\n};\nconst de_GetPlatformApplicationAttributesResponse = (output, context) => {\n  const contents = {};\n  if (output.Attributes === \"\") {\n    contents[_At] = {};\n  } else if (output[_At] != null && output[_At][_e] != null) {\n    contents[_At] = de_MapStringToString(__getArrayIfSingleItem(output[_At][_e]), context);\n  }\n  return contents;\n};\nconst de_GetSMSAttributesResponse = (output, context) => {\n  const contents = {};\n  if (output.attributes === \"\") {\n    contents[_a] = {};\n  } else if (output[_a] != null && output[_a][_e] != null) {\n    contents[_a] = de_MapStringToString(__getArrayIfSingleItem(output[_a][_e]), context);\n  }\n  return contents;\n};\nconst de_GetSMSSandboxAccountStatusResult = (output, context) => {\n  const contents = {};\n  if (output[_IIS] != null) {\n    contents[_IIS] = __parseBoolean(output[_IIS]);\n  }\n  return contents;\n};\nconst de_GetSubscriptionAttributesResponse = (output, context) => {\n  const contents = {};\n  if (output.Attributes === \"\") {\n    contents[_At] = {};\n  } else if (output[_At] != null && output[_At][_e] != null) {\n    contents[_At] = de_SubscriptionAttributesMap(__getArrayIfSingleItem(output[_At][_e]), context);\n  }\n  return contents;\n};\nconst de_GetTopicAttributesResponse = (output, context) => {\n  const contents = {};\n  if (output.Attributes === \"\") {\n    contents[_At] = {};\n  } else if (output[_At] != null && output[_At][_e] != null) {\n    contents[_At] = de_TopicAttributesMap(__getArrayIfSingleItem(output[_At][_e]), context);\n  }\n  return contents;\n};\nconst de_InternalErrorException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_InvalidBatchEntryIdException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_InvalidParameterException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_InvalidParameterValueException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_InvalidSecurityException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_InvalidStateException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_KMSAccessDeniedException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_KMSDisabledException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_KMSInvalidStateException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_KMSNotFoundException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_KMSOptInRequired = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_KMSThrottlingException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_ListEndpointsByPlatformApplicationResponse = (output, context) => {\n  const contents = {};\n  if (output.Endpoints === \"\") {\n    contents[_En] = [];\n  } else if (output[_En] != null && output[_En][_me] != null) {\n    contents[_En] = de_ListOfEndpoints(__getArrayIfSingleItem(output[_En][_me]), context);\n  }\n  if (output[_NT] != null) {\n    contents[_NT] = __expectString(output[_NT]);\n  }\n  return contents;\n};\nconst de_ListOfEndpoints = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Endpoint(entry, context);\n  });\n};\nconst de_ListOfPlatformApplications = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_PlatformApplication(entry, context);\n  });\n};\nconst de_ListOriginationNumbersResult = (output, context) => {\n  const contents = {};\n  if (output[_NT] != null) {\n    contents[_NT] = __expectString(output[_NT]);\n  }\n  if (output.PhoneNumbers === \"\") {\n    contents[_PNh] = [];\n  } else if (output[_PNh] != null && output[_PNh][_me] != null) {\n    contents[_PNh] = de_PhoneNumberInformationList(__getArrayIfSingleItem(output[_PNh][_me]), context);\n  }\n  return contents;\n};\nconst de_ListPhoneNumbersOptedOutResponse = (output, context) => {\n  const contents = {};\n  if (output.phoneNumbers === \"\") {\n    contents[_pNh] = [];\n  } else if (output[_pNh] != null && output[_pNh][_me] != null) {\n    contents[_pNh] = de_PhoneNumberList(__getArrayIfSingleItem(output[_pNh][_me]), context);\n  }\n  if (output[_nT] != null) {\n    contents[_nT] = __expectString(output[_nT]);\n  }\n  return contents;\n};\nconst de_ListPlatformApplicationsResponse = (output, context) => {\n  const contents = {};\n  if (output.PlatformApplications === \"\") {\n    contents[_PA] = [];\n  } else if (output[_PA] != null && output[_PA][_me] != null) {\n    contents[_PA] = de_ListOfPlatformApplications(__getArrayIfSingleItem(output[_PA][_me]), context);\n  }\n  if (output[_NT] != null) {\n    contents[_NT] = __expectString(output[_NT]);\n  }\n  return contents;\n};\nconst de_ListSMSSandboxPhoneNumbersResult = (output, context) => {\n  const contents = {};\n  if (output.PhoneNumbers === \"\") {\n    contents[_PNh] = [];\n  } else if (output[_PNh] != null && output[_PNh][_me] != null) {\n    contents[_PNh] = de_SMSSandboxPhoneNumberList(__getArrayIfSingleItem(output[_PNh][_me]), context);\n  }\n  if (output[_NT] != null) {\n    contents[_NT] = __expectString(output[_NT]);\n  }\n  return contents;\n};\nconst de_ListSubscriptionsByTopicResponse = (output, context) => {\n  const contents = {};\n  if (output.Subscriptions === \"\") {\n    contents[_Sub] = [];\n  } else if (output[_Sub] != null && output[_Sub][_me] != null) {\n    contents[_Sub] = de_SubscriptionsList(__getArrayIfSingleItem(output[_Sub][_me]), context);\n  }\n  if (output[_NT] != null) {\n    contents[_NT] = __expectString(output[_NT]);\n  }\n  return contents;\n};\nconst de_ListSubscriptionsResponse = (output, context) => {\n  const contents = {};\n  if (output.Subscriptions === \"\") {\n    contents[_Sub] = [];\n  } else if (output[_Sub] != null && output[_Sub][_me] != null) {\n    contents[_Sub] = de_SubscriptionsList(__getArrayIfSingleItem(output[_Sub][_me]), context);\n  }\n  if (output[_NT] != null) {\n    contents[_NT] = __expectString(output[_NT]);\n  }\n  return contents;\n};\nconst de_ListTagsForResourceResponse = (output, context) => {\n  const contents = {};\n  if (output.Tags === \"\") {\n    contents[_Ta] = [];\n  } else if (output[_Ta] != null && output[_Ta][_me] != null) {\n    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_Ta][_me]), context);\n  }\n  return contents;\n};\nconst de_ListTopicsResponse = (output, context) => {\n  const contents = {};\n  if (output.Topics === \"\") {\n    contents[_To] = [];\n  } else if (output[_To] != null && output[_To][_me] != null) {\n    contents[_To] = de_TopicsList(__getArrayIfSingleItem(output[_To][_me]), context);\n  }\n  if (output[_NT] != null) {\n    contents[_NT] = __expectString(output[_NT]);\n  }\n  return contents;\n};\nconst de_MapStringToString = (output, context) => {\n  return output.reduce((acc, pair) => {\n    if (pair[\"value\"] === null) {\n      return acc;\n    }\n    acc[pair[\"key\"]] = __expectString(pair[\"value\"]);\n    return acc;\n  }, {});\n};\nconst de_NotFoundException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_NumberCapabilityList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_OptedOutException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_OptInPhoneNumberResponse = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_PhoneNumberInformation = (output, context) => {\n  const contents = {};\n  if (output[_CA] != null) {\n    contents[_CA] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_CA]));\n  }\n  if (output[_PN] != null) {\n    contents[_PN] = __expectString(output[_PN]);\n  }\n  if (output[_St] != null) {\n    contents[_St] = __expectString(output[_St]);\n  }\n  if (output[_ICC] != null) {\n    contents[_ICC] = __expectString(output[_ICC]);\n  }\n  if (output[_RT] != null) {\n    contents[_RT] = __expectString(output[_RT]);\n  }\n  if (output.NumberCapabilities === \"\") {\n    contents[_NC] = [];\n  } else if (output[_NC] != null && output[_NC][_me] != null) {\n    contents[_NC] = de_NumberCapabilityList(__getArrayIfSingleItem(output[_NC][_me]), context);\n  }\n  return contents;\n};\nconst de_PhoneNumberInformationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_PhoneNumberInformation(entry, context);\n  });\n};\nconst de_PhoneNumberList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_PlatformApplication = (output, context) => {\n  const contents = {};\n  if (output[_PAA] != null) {\n    contents[_PAA] = __expectString(output[_PAA]);\n  }\n  if (output.Attributes === \"\") {\n    contents[_At] = {};\n  } else if (output[_At] != null && output[_At][_e] != null) {\n    contents[_At] = de_MapStringToString(__getArrayIfSingleItem(output[_At][_e]), context);\n  }\n  return contents;\n};\nconst de_PlatformApplicationDisabledException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_PublishBatchResponse = (output, context) => {\n  const contents = {};\n  if (output.Successful === \"\") {\n    contents[_Suc] = [];\n  } else if (output[_Suc] != null && output[_Suc][_me] != null) {\n    contents[_Suc] = de_PublishBatchResultEntryList(__getArrayIfSingleItem(output[_Suc][_me]), context);\n  }\n  if (output.Failed === \"\") {\n    contents[_F] = [];\n  } else if (output[_F] != null && output[_F][_me] != null) {\n    contents[_F] = de_BatchResultErrorEntryList(__getArrayIfSingleItem(output[_F][_me]), context);\n  }\n  return contents;\n};\nconst de_PublishBatchResultEntry = (output, context) => {\n  const contents = {};\n  if (output[_I] != null) {\n    contents[_I] = __expectString(output[_I]);\n  }\n  if (output[_MI] != null) {\n    contents[_MI] = __expectString(output[_MI]);\n  }\n  if (output[_SN] != null) {\n    contents[_SN] = __expectString(output[_SN]);\n  }\n  return contents;\n};\nconst de_PublishBatchResultEntryList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_PublishBatchResultEntry(entry, context);\n  });\n};\nconst de_PublishResponse = (output, context) => {\n  const contents = {};\n  if (output[_MI] != null) {\n    contents[_MI] = __expectString(output[_MI]);\n  }\n  if (output[_SN] != null) {\n    contents[_SN] = __expectString(output[_SN]);\n  }\n  return contents;\n};\nconst de_ReplayLimitExceededException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_ResourceNotFoundException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_SetSMSAttributesResponse = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_SMSSandboxPhoneNumber = (output, context) => {\n  const contents = {};\n  if (output[_PN] != null) {\n    contents[_PN] = __expectString(output[_PN]);\n  }\n  if (output[_St] != null) {\n    contents[_St] = __expectString(output[_St]);\n  }\n  return contents;\n};\nconst de_SMSSandboxPhoneNumberList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_SMSSandboxPhoneNumber(entry, context);\n  });\n};\nconst de_StaleTagException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_SubscribeResponse = (output, context) => {\n  const contents = {};\n  if (output[_SA] != null) {\n    contents[_SA] = __expectString(output[_SA]);\n  }\n  return contents;\n};\nconst de_Subscription = (output, context) => {\n  const contents = {};\n  if (output[_SA] != null) {\n    contents[_SA] = __expectString(output[_SA]);\n  }\n  if (output[_O] != null) {\n    contents[_O] = __expectString(output[_O]);\n  }\n  if (output[_Pr] != null) {\n    contents[_Pr] = __expectString(output[_Pr]);\n  }\n  if (output[_E] != null) {\n    contents[_E] = __expectString(output[_E]);\n  }\n  if (output[_TA] != null) {\n    contents[_TA] = __expectString(output[_TA]);\n  }\n  return contents;\n};\nconst de_SubscriptionAttributesMap = (output, context) => {\n  return output.reduce((acc, pair) => {\n    if (pair[\"value\"] === null) {\n      return acc;\n    }\n    acc[pair[\"key\"]] = __expectString(pair[\"value\"]);\n    return acc;\n  }, {});\n};\nconst de_SubscriptionLimitExceededException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_SubscriptionsList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Subscription(entry, context);\n  });\n};\nconst de_Tag = (output, context) => {\n  const contents = {};\n  if (output[_K] != null) {\n    contents[_K] = __expectString(output[_K]);\n  }\n  if (output[_Va] != null) {\n    contents[_Va] = __expectString(output[_Va]);\n  }\n  return contents;\n};\nconst de_TagLimitExceededException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_TagList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Tag(entry, context);\n  });\n};\nconst de_TagPolicyException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_TagResourceResponse = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_ThrottledException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_TooManyEntriesInBatchRequestException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_Topic = (output, context) => {\n  const contents = {};\n  if (output[_TA] != null) {\n    contents[_TA] = __expectString(output[_TA]);\n  }\n  return contents;\n};\nconst de_TopicAttributesMap = (output, context) => {\n  return output.reduce((acc, pair) => {\n    if (pair[\"value\"] === null) {\n      return acc;\n    }\n    acc[pair[\"key\"]] = __expectString(pair[\"value\"]);\n    return acc;\n  }, {});\n};\nconst de_TopicLimitExceededException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_TopicsList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Topic(entry, context);\n  });\n};\nconst de_UntagResourceResponse = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_UserErrorException = (output, context) => {\n  const contents = {};\n  if (output[_m] != null) {\n    contents[_m] = __expectString(output[_m]);\n  }\n  return contents;\n};\nconst de_ValidationException = (output, context) => {\n  const contents = {};\n  if (output[_M] != null) {\n    contents[_M] = __expectString(output[_M]);\n  }\n  return contents;\n};\nconst de_VerificationException = (output, context) => {\n  const contents = {};\n  if (output[_M] != null) {\n    contents[_M] = __expectString(output[_M]);\n  }\n  if (output[_St] != null) {\n    contents[_St] = __expectString(output[_St]);\n  }\n  return contents;\n};\nconst de_VerifySMSSandboxPhoneNumberResult = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nconst throwDefaultError = withBaseException(__BaseException);\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const contents = {\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n    headers\n  };\n  if (resolvedHostname !== undefined) {\n    contents.hostname = resolvedHostname;\n  }\n  if (body !== undefined) {\n    contents.body = body;\n  }\n  return new __HttpRequest(contents);\n};\nconst SHARED_HEADERS = {\n  \"content-type\": \"application/x-www-form-urlencoded\"\n};\nconst _ = \"2010-03-31\";\nconst _A = \"Action\";\nconst _AN = \"ActionName\";\nconst _ANt = \"AttributeName\";\nconst _AOU = \"AuthenticateOnUnsubscribe\";\nconst _AP = \"AddPermission\";\nconst _AV = \"AttributeValue\";\nconst _AWSAI = \"AWSAccountId\";\nconst _At = \"Attributes\";\nconst _BV = \"BinaryValue\";\nconst _C = \"Code\";\nconst _CA = \"CreatedAt\";\nconst _CIPNIOO = \"CheckIfPhoneNumberIsOptedOut\";\nconst _CPA = \"CreatePlatformApplication\";\nconst _CPE = \"CreatePlatformEndpoint\";\nconst _CS = \"ConfirmSubscription\";\nconst _CSMSSPN = \"CreateSMSSandboxPhoneNumber\";\nconst _CT = \"CreateTopic\";\nconst _CUD = \"CustomUserData\";\nconst _DE = \"DeleteEndpoint\";\nconst _DPA = \"DeletePlatformApplication\";\nconst _DPP = \"DataProtectionPolicy\";\nconst _DSMSSPN = \"DeleteSMSSandboxPhoneNumber\";\nconst _DT = \"DeleteTopic\";\nconst _DTa = \"DataType\";\nconst _E = \"Endpoint\";\nconst _EA = \"EndpointArn\";\nconst _En = \"Endpoints\";\nconst _F = \"Failed\";\nconst _GDPP = \"GetDataProtectionPolicy\";\nconst _GEA = \"GetEndpointAttributes\";\nconst _GPAA = \"GetPlatformApplicationAttributes\";\nconst _GSA = \"GetSubscriptionAttributes\";\nconst _GSMSA = \"GetSMSAttributes\";\nconst _GSMSSAS = \"GetSMSSandboxAccountStatus\";\nconst _GTA = \"GetTopicAttributes\";\nconst _I = \"Id\";\nconst _ICC = \"Iso2CountryCode\";\nconst _IIS = \"IsInSandbox\";\nconst _K = \"Key\";\nconst _L = \"Label\";\nconst _LC = \"LanguageCode\";\nconst _LEBPA = \"ListEndpointsByPlatformApplication\";\nconst _LON = \"ListOriginationNumbers\";\nconst _LPA = \"ListPlatformApplications\";\nconst _LPNOO = \"ListPhoneNumbersOptedOut\";\nconst _LS = \"ListSubscriptions\";\nconst _LSBT = \"ListSubscriptionsByTopic\";\nconst _LSMSSPN = \"ListSMSSandboxPhoneNumbers\";\nconst _LT = \"ListTopics\";\nconst _LTFR = \"ListTagsForResource\";\nconst _M = \"Message\";\nconst _MA = \"MessageAttributes\";\nconst _MDI = \"MessageDeduplicationId\";\nconst _MGI = \"MessageGroupId\";\nconst _MI = \"MessageId\";\nconst _MR = \"MaxResults\";\nconst _MS = \"MessageStructure\";\nconst _N = \"Name\";\nconst _NC = \"NumberCapabilities\";\nconst _NT = \"NextToken\";\nconst _O = \"Owner\";\nconst _OIPN = \"OptInPhoneNumber\";\nconst _OTP = \"OneTimePassword\";\nconst _P = \"Publish\";\nconst _PA = \"PlatformApplications\";\nconst _PAA = \"PlatformApplicationArn\";\nconst _PB = \"PublishBatch\";\nconst _PBRE = \"PublishBatchRequestEntries\";\nconst _PDPP = \"PutDataProtectionPolicy\";\nconst _PN = \"PhoneNumber\";\nconst _PNh = \"PhoneNumbers\";\nconst _Pl = \"Platform\";\nconst _Pr = \"Protocol\";\nconst _RA = \"ResourceArn\";\nconst _RP = \"RemovePermission\";\nconst _RSA = \"ReturnSubscriptionArn\";\nconst _RT = \"RouteType\";\nconst _S = \"Subscribe\";\nconst _SA = \"SubscriptionArn\";\nconst _SEA = \"SetEndpointAttributes\";\nconst _SF = \"SenderFault\";\nconst _SN = \"SequenceNumber\";\nconst _SPAA = \"SetPlatformApplicationAttributes\";\nconst _SSA = \"SetSubscriptionAttributes\";\nconst _SSMSA = \"SetSMSAttributes\";\nconst _STA = \"SetTopicAttributes\";\nconst _SV = \"StringValue\";\nconst _St = \"Status\";\nconst _Su = \"Subject\";\nconst _Sub = \"Subscriptions\";\nconst _Suc = \"Successful\";\nconst _T = \"Token\";\nconst _TA = \"TopicArn\";\nconst _TAa = \"TargetArn\";\nconst _TK = \"TagKeys\";\nconst _TR = \"TagResource\";\nconst _Ta = \"Tags\";\nconst _To = \"Topics\";\nconst _U = \"Unsubscribe\";\nconst _UR = \"UntagResource\";\nconst _V = \"Version\";\nconst _VSMSSPN = \"VerifySMSSandboxPhoneNumber\";\nconst _Va = \"Value\";\nconst _a = \"attributes\";\nconst _e = \"entry\";\nconst _iOO = \"isOptedOut\";\nconst _m = \"message\";\nconst _me = \"member\";\nconst _nT = \"nextToken\";\nconst _pN = \"phoneNumber\";\nconst _pNh = \"phoneNumbers\";\nconst buildFormUrlencodedString = formEntries => Object.entries(formEntries).map(([key, value]) => __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value)).join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n  if (data.Error?.Code !== undefined) {\n    return data.Error.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n};","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_CreateTopicCommand, se_CreateTopicCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class CreateTopicCommand extends $Command.classBuilder().ep(commonParams).m(function (Command, cs, config, o) {\n  return [getSerdePlugin(config, this.serialize, this.deserialize), getEndpointPlugin(config, Command.getEndpointParameterInstructions())];\n}).s(\"AmazonSimpleNotificationService\", \"CreateTopic\", {}).n(\"SNSClient\", \"CreateTopicCommand\").f(void 0, void 0).ser(se_CreateTopicCommand).de(de_CreateTopicCommand).build() {}","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_DeleteTopicCommand, se_DeleteTopicCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class DeleteTopicCommand extends $Command.classBuilder().ep(commonParams).m(function (Command, cs, config, o) {\n  return [getSerdePlugin(config, this.serialize, this.deserialize), getEndpointPlugin(config, Command.getEndpointParameterInstructions())];\n}).s(\"AmazonSimpleNotificationService\", \"DeleteTopic\", {}).n(\"SNSClient\", \"DeleteTopicCommand\").f(void 0, void 0).ser(se_DeleteTopicCommand).de(de_DeleteTopicCommand).build() {}","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_ListTopicsCommand, se_ListTopicsCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class ListTopicsCommand extends $Command.classBuilder().ep(commonParams).m(function (Command, cs, config, o) {\n  return [getSerdePlugin(config, this.serialize, this.deserialize), getEndpointPlugin(config, Command.getEndpointParameterInstructions())];\n}).s(\"AmazonSimpleNotificationService\", \"ListTopics\", {}).n(\"SNSClient\", \"ListTopicsCommand\").f(void 0, void 0).ser(se_ListTopicsCommand).de(de_ListTopicsCommand).build() {}","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { PublishInputFilterSensitiveLog } from \"../models/models_0\";\nimport { de_PublishCommand, se_PublishCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class PublishCommand extends $Command.classBuilder().ep(commonParams).m(function (Command, cs, config, o) {\n  return [getSerdePlugin(config, this.serialize, this.deserialize), getEndpointPlugin(config, Command.getEndpointParameterInstructions())];\n}).s(\"AmazonSimpleNotificationService\", \"Publish\", {}).n(\"SNSClient\", \"PublishCommand\").f(PublishInputFilterSensitiveLog, void 0).ser(se_PublishCommand).de(de_PublishCommand).build() {}","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_SubscribeCommand, se_SubscribeCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class SubscribeCommand extends $Command.classBuilder().ep(commonParams).m(function (Command, cs, config, o) {\n  return [getSerdePlugin(config, this.serialize, this.deserialize), getEndpointPlugin(config, Command.getEndpointParameterInstructions())];\n}).s(\"AmazonSimpleNotificationService\", \"Subscribe\", {}).n(\"SNSClient\", \"SubscribeCommand\").f(void 0, void 0).ser(se_SubscribeCommand).de(de_SubscribeCommand).build() {}","import {Injectable} from \"@angular/core\";\nimport {CreateTopicCommand, DeleteTopicCommand, ListTopicsCommand, PublishCommand, SNSClient, SubscribeCommand} from \"@aws-sdk/client-sns\";\nimport {environment} from \"../../../../environments/environment\";\nimport {SortColumn} from \"../../../shared/sorting/sorting.component\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\n\n@Injectable()\nexport class SnsService {\n\n    client = new SNSClient({\n        region: environment.awsmockRegion,\n        endpoint: environment.gatewayEndpoint,\n        maxAttempts: 1,\n        credentials: {\n            accessKeyId: 'test',\n            secretAccessKey: 'test',\n        },\n        requestHandler: {\n            requestTimeout: 3000,\n            httpsAgent: {maxSockets: 25, keepAlive: true},\n        },\n    });\n\n    // Default headers for AwsMock HTTP requests\n    headers: HttpHeaders = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'AWS4-HMAC-SHA256 Credential=none/20240928/eu-central-1/s3/aws4_request, SignedHeaders=content-type;host;x-amz-date;x-amz-security-token;x-amz-target, Signature=01316d694335ec0e0bf68b08570490f1b0bae0b130ecbe13ebad511b3ece8a41'\n    });\n    url: string = environment.gatewayEndpoint + '/';\n\n    constructor(private http: HttpClient) {\n    }\n\n    listTopics(pageIndex: number, pageSize: number): any {\n\n        const input = {\n            NextToken: (pageIndex * pageSize).toString(),\n            MaxResults: pageSize,\n        };\n        return this.client.send(new ListTopicsCommand(input));\n    }\n\n    addTopic(topicName: string) {\n        const input = {\n            Name: topicName\n        };\n        return this.client.send(new CreateTopicCommand(input));\n    }\n\n    deleteTopic(topicArn: string) {\n        const input = {\n            TopicArn: topicArn,\n        };\n        return this.client.send(new DeleteTopicCommand(input));\n    }\n\n    subscribe(topicArn: string, endpoint: string, protocol: string) {\n        const input = {\n            TopicArn: topicArn,\n            Protocol: protocol,\n            Endpoint: endpoint,\n            ReturnSubscriptionArn: true\n        };\n        return this.client.send(new SubscribeCommand(input));\n    }\n\n    publishMessage(topicArn: string, message: string) {\n        const input = {\n            TopicArn: topicArn,\n            Message: message\n        };\n        return this.client.send(new PublishCommand(input));\n    }\n\n    cleanup() {\n        this.client.destroy();\n    }\n\n    /**\n     * @brief Purges a topic, this will delete all the messages in the SNS topic.\n     *\n     * @par\n     * This is a fake AWS NodeJS SDK request. This will only work, if runs against a AwsMock instance.\n     *\n     * @param prefix topic name prefix\n     * @param pageSize page size\n     * @param pageIndex page index\n     * @param sortColumns sorting columns\n     */\n    public listTopicCounters(prefix: string, pageSize: number, pageIndex: number, sortColumns: SortColumn[]) {\n        let headers = this.headers.set('x-awsmock-target', 'sns').set('x-awsmock-action', 'ListTopicCounters');\n        return this.http.post(this.url, {prefix: prefix, pageSize: pageSize, pageIndex: pageIndex, sortColumns: sortColumns}, {headers: headers});\n    }\n\n    /**\n     * @brief Purges a topic, this will delete all the messages in the SNS topic.\n     *\n     * @par\n     * This is a fake AWS NodeJS SDK request. This will only work, if runs against a AwsMock instance.\n     *\n     * @param topicArn topic ARN\n     * @param pageSize page size\n     * @param pageIndex page index\n     * @param sortColumns sorting columns\n     */\n    public listMessageCounters(topicArn: string, pageSize: number, pageIndex: number, sortColumns: SortColumn[]) {\n        let headers = this.headers.set('x-awsmock-target', 'sns').set('x-awsmock-action', 'ListMessages');\n        return this.http.post(this.url, {\n            topicArn: topicArn, pageSize: pageSize, pageIndex: pageIndex, sortColumns: sortColumns\n        }, {headers: headers});\n    }\n\n    /**\n     * @brief Purges a topic, this will delete all the messages in the SNS topic.\n     *\n     * @par\n     * This is a fake AWS NodeJS SDK request. This will only work, if runs against a AwsMock instance.\n     *\n     * @param topicArn AWS topic ARN\n     */\n    public purgeTopic(topicArn: string) {\n        let headers = this.headers.set('x-awsmock-target', 'sns').set('x-awsmock-action', 'PurgeTopic');\n        return this.http.post(this.url, {topicArn: topicArn}, {headers: headers});\n    }\n\n    /**\n     * @brief Purges a topic, this will delete all the messages in the SNS topic.\n     *\n     * @par\n     * This is a fake AWS NodeJS SDK request. This will only work, if runs against a AwsMock instance.\n     *\n     * @param topicArn SNS topic ARN\n     * @param messageId SNS message ID\n     */\n    public deleteMessage(topicArn: string, messageId: string) {\n        let headers = this.headers.set('x-awsmock-target', 'sns').set('x-awsmock-action', 'DeleteMessage');\n        return this.http.post(this.url, {topicArn: topicArn, messageId: messageId}, {headers: headers});\n    }\n\n    /**\n     * @brief Returns the topic details\n     *\n     * @par\n     * This is a fake AWS NodeJS SDK request. This will only work, if runs against a AwsMock instance.\n     *\n     * @param topicArn AWS topic ARN\n     */\n    public getTopicDetails(topicArn: string) {\n        let headers = this.headers.set('x-awsmock-target', 'sns').set('x-awsmock-action', 'GetTopicDetails');\n        return this.http.post(this.url, {topicArn: topicArn}, {headers: headers});\n    }\n\n    /**\n     * @brief Gets a list of subscriptions for a topic\n     *\n     * @par\n     * This is a fake AWS NodeJS SDK request. This will only work, if runs against a AwsMock instance.\n     *\n     * @param topicArn topic ARN\n     * @param pageSize page size\n     * @param pageIndex page index\n     * @param sortColumns sorting columns\n     */\n    public listSubscriptionsCounters(topicArn: string, pageSize: number, pageIndex: number, sortColumns: SortColumn[]) {\n        let headers = this.headers.set('x-awsmock-target', 'sns').set('x-awsmock-action', 'ListSubscriptionCounters');\n        return this.http.post(this.url, {\n            topicArn: topicArn, pageSize: pageSize, pageIndex: pageIndex, sortColumns: sortColumns\n        }, {headers: headers});\n    }\n\n}","import {MAT_DIALOG_DATA, MatDialogActions, MatDialogClose, MatDialogContent, MatDialogRef, MatDialogTitle} from \"@angular/material/dialog\";\nimport {Component, Inject} from \"@angular/core\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButton} from \"@angular/material/button\";\nimport {MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatOption, MatSelect} from \"@angular/material/select\";\nimport {MatTextColumn} from \"@angular/material/table\";\nimport {MatInput} from \"@angular/material/input\";\nimport {CdkDrag, CdkDragHandle} from \"@angular/cdk/drag-drop\";\nimport {CdkTextareaAutosize} from \"@angular/cdk/text-field\";\n\n@Component({\n    selector: 'sns-publish-message-dialog',\n    templateUrl: './publish-message.component.html',\n    standalone: true,\n    imports: [\n        MatDialogContent,\n        MatDialogTitle,\n        MatDialogActions,\n        MatButton,\n        MatDialogClose,\n        MatFormField,\n        MatSelect,\n        MatOption,\n        MatLabel,\n        FormsModule,\n        MatTextColumn,\n        MatInput,\n        ReactiveFormsModule,\n        CdkDrag,\n        CdkDragHandle,\n        CdkTextareaAutosize\n    ],\n    styleUrls: ['./publish-message.component.scss']\n})\nexport class PublishMessageComponentDialog {\n\n    topicArn: string = '';\n    topicName: string = '';\n    message: string = '';\n\n    constructor(private dialogRef: MatDialogRef<PublishMessageComponentDialog>, @Inject(MAT_DIALOG_DATA) public data: any) {\n        this.topicArn = data.topicArn;\n        this.topicName = data.topicArn.substring(this.topicArn.lastIndexOf(':') + 1);\n    }\n\n    sendMessage() {\n        this.dialogRef.close(this.message);\n    }\n\n    close() {\n        this.dialogRef.close(false);\n    }\n}\n","<h2 cdkDrag cdkDragHandle cdkDragRootElement=\".cdk-overlay-pane\" mat-dialog-title>Publish SNS Message: {{ topicName }}</h2>\n<mat-dialog-content class=\"mat-typography\">\n    <mat-form-field style=\"width: 100%;height:100%\">\n        <mat-label>Message:</mat-label>\n        <textarea [(ngModel)]=\"message\" cdkAutosizeMinRows=\"70\" cdkTextareaAutosize matInput placeholder=\"Message\" style=\"width:100%; height:100%\"></textarea>\n    </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n    <button mat-button mat-dialog-close>Cancel</button>\n    <button (click)=\"sendMessage()\" cdkFocusInitial mat-button>Send</button>\n</mat-dialog-actions>\n","import {createAction, props} from '@ngrx/store';\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {ListTopicCountersResponse} from \"../../model/sns-topic-item\";\n\nexport const snsTopicListActions = {\n    initialize: createAction('[sns-topic-list] initialize'),\n\n    // Load topic\n    loadTopics: createAction('[sns-topic-list] Load Topics', props<{ prefix: string, pageSize: number, pageIndex: number, sortColumns: SortColumn[] }>()),\n    loadTopicsSuccess: createAction('[sns-topic-list] Load Topics Success', props<{ topics: ListTopicCountersResponse }>()),\n    loadTopicsFailure: createAction('[sns-topic-list] Load Topics Error', props<{ error: string }>()),\n\n    // Add topic\n    addTopic: createAction('[sns-topic-list] Add Topic', props<{ name: string }>()),\n    addTopicSuccess: createAction('[sns-topic-list] Add Topic Success'),\n    addTopicFailure: createAction('[sns-topic-list] Add Topic Error', props<{ error: string }>()),\n\n    // Publish message\n    publishMessage: createAction('[sns-topic-list] Publish message', props<{ topicArn: string, message: string }>()),\n    publishMessageSuccess: createAction('[sns-topic-list] Publish message success'),\n    publishMessageFailure: createAction('[sns-topic-list] Publish message error', props<{ error: string }>()),\n\n    // Purge topic\n    purgeTopic: createAction('[sns-topic-list] Purge Topic', props<{ topicArn: string }>()),\n    purgeTopicSuccess: createAction('[sns-topic-list] Purge Topic Success'),\n    purgeTopicFailure: createAction('[sns-topic-list] Purge Topic Error', props<{ error: string }>()),\n\n    // Delete topic\n    deleteTopic: createAction('[sns-topic-list] Delete Topic', props<{ topicArn: string }>()),\n    deleteTopicSuccess: createAction('[sns-topic-list] Delete Topic Success'),\n    deleteTopicFailure: createAction('[sns-topic-list] Delete Topic Error', props<{ error: string }>()),\n}","import {ListTopicCountersResponse} from \"../../model/sns-topic-item\";\nimport {createReducer, on} from \"@ngrx/store\";\nimport {snsTopicListActions} from './sns-topic-list.actions';\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\n\nexport const snsTopicListFeatureKey = 'sns-topic-list';\n\nexport interface SNSTopicListState {\n    listTopicResponse: ListTopicCountersResponse;\n    prefix: string;\n    pageSize: number;\n    pageIndex: number;\n    loading: boolean;\n    sortColumns: SortColumn[];\n    error: unknown;\n}\n\nexport const initialState: SNSTopicListState = {\n    listTopicResponse: {Total: 0, TopicCounters: []},\n    prefix: '',\n    pageSize: 10,\n    pageIndex: 0,\n    loading: false,\n    sortColumns: [{column: 'attributes.availableMessages', sortDirection: -1}],\n    error: {}\n};\n\nexport const snsTopicListReducer = createReducer(\n    initialState,\n\n    // Initialize\n    on(snsTopicListActions.initialize, (state: SNSTopicListState): SNSTopicListState => ({...state, pageIndex: 0, pageSize: 10, loading: true})),\n\n    // Topic list\n    on(snsTopicListActions.loadTopics, (state: SNSTopicListState) => ({...state, loading: true})),\n    on(snsTopicListActions.loadTopicsSuccess, (state: SNSTopicListState, {topics}) => ({...state, listTopicResponse: topics, loading: false})),\n    on(snsTopicListActions.loadTopicsFailure, (state: SNSTopicListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Add topic\n    on(snsTopicListActions.addTopic, (state: SNSTopicListState) => ({...state, loading: true})),\n    on(snsTopicListActions.addTopicSuccess, (state: SNSTopicListState) => ({...state, loading: false})),\n    on(snsTopicListActions.addTopicFailure, (state: SNSTopicListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Purge topic\n    on(snsTopicListActions.purgeTopic, (state: SNSTopicListState) => ({...state, loading: true})),\n    on(snsTopicListActions.purgeTopicSuccess, (state: SNSTopicListState) => ({...state, loading: false})),\n    on(snsTopicListActions.purgeTopicFailure, (state: SNSTopicListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Publish message\n    on(snsTopicListActions.publishMessage, (state: SNSTopicListState) => ({...state, loading: true})),\n    on(snsTopicListActions.publishMessageSuccess, (state: SNSTopicListState) => ({...state, loading: false})),\n    on(snsTopicListActions.publishMessageFailure, (state: SNSTopicListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Delete topic\n    on(snsTopicListActions.deleteTopic, (state: SNSTopicListState) => ({...state, loading: true})),\n    on(snsTopicListActions.deleteTopicSuccess, (state: SNSTopicListState) => ({...state, loading: false})),\n    on(snsTopicListActions.deleteTopicFailure, (state: SNSTopicListState, {error}) => ({...state, error: error, loading: false})),\n);","import {createFeatureSelector, createSelector, DefaultProjectorFn, MemoizedSelector} from \"@ngrx/store\";\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {snsTopicListFeatureKey, SNSTopicListState} from \"./sns-topic-list.reducer\";\nimport {ListTopicCountersResponse} from \"../../model/sns-topic-item\";\n\nexport type SelectorType<T> = MemoizedSelector<object, T, DefaultProjectorFn<T>>;\nexport type SelectorFeatureType<T> = MemoizedSelector<object, T>;\n\nconst selectQueueListFeature: SelectorFeatureType<SNSTopicListState> =\n    createFeatureSelector<SNSTopicListState>(snsTopicListFeatureKey);\n\nexport const selectIsLoading: SelectorType<boolean> = createSelector(\n    selectQueueListFeature,\n    (state: SNSTopicListState) => state.loading\n);\n\nexport const selectPrefix: SelectorType<string> = createSelector(\n    selectQueueListFeature,\n    (state: SNSTopicListState) => state?.prefix\n);\n\nexport const selectPageSize: SelectorType<number> = createSelector(\n    selectQueueListFeature,\n    (state: SNSTopicListState) => state?.pageSize\n);\n\nexport const selectPageIndex: SelectorType<number> = createSelector(\n    selectQueueListFeature,\n    (state: SNSTopicListState) => state?.pageIndex\n);\n\nexport const selectSortColumns: SelectorType<SortColumn[]> = createSelector(\n    selectQueueListFeature,\n    (state: SNSTopicListState) => state?.sortColumns\n);\n\nexport const selectTopicCounters: SelectorType<ListTopicCountersResponse> = createSelector(\n    selectQueueListFeature,\n    (state: SNSTopicListState) => state?.listTopicResponse\n);\n\nexport const selectTopicError: SelectorType<any> = createSelector(\n    selectQueueListFeature,\n    (state: SNSTopicListState) => state?.error\n);\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {PageEvent} from \"@angular/material/paginator\";\nimport {Location} from \"@angular/common\";\nimport {Sort} from \"@angular/material/sort\";\nimport {filter, interval, Observable, Subscription} from \"rxjs\";\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {ListTopicCountersResponse} from \"../model/sns-topic-item\";\nimport {TopicAddComponentDialog} from \"../topic-add/topic-add.component\";\nimport {SnsService} from \"../service/sns-service.component\";\nimport {PublishMessageComponentDialog} from \"../message-list/publish-message/publish-message.component\";\nimport {SortColumn} from \"../../../shared/sorting/sorting.component\";\nimport {ActionsSubject, State, Store} from \"@ngrx/store\";\nimport {snsTopicListActions} from \"./state/sns-topic-list.actions\";\nimport {selectPageIndex, selectPageSize, selectTopicCounters} from \"./state/sns-topic-list.selectors\";\nimport {SNSTopicListState} from \"./state/sns-topic-list.reducer\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {byteConversion} from \"../../../shared/byte-utils.component\";\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './topic-list.component.html',\n    styleUrls: ['./topic-list.component.scss'],\n    providers: [SnsService]\n})\nexport class SnsTopicListComponent implements OnInit, OnDestroy {\n\n    // Last update\n    lastUpdate: Date = new Date();\n\n    // Table\n    pageSize$: Observable<number> = this.store.select(selectPageSize);\n    pageIndex$: Observable<number> = this.store.select(selectPageIndex);\n    listTopicCountersResponse$: Observable<ListTopicCountersResponse> = this.store.select(selectTopicCounters);\n    columns: any[] = ['topicName', 'availableMessages', 'size', 'created', 'modified', 'actions'];\n\n    // Auto-update\n    updateSubscription: Subscription | undefined;\n\n    // Paging\n    pageSizeOptions = [5, 10, 20, 50, 100];\n    hidePageSize = false;\n    showPageSizeOptions = true;\n    showFirstLastButtons = true;\n    disabled = false;\n\n    // Prefix\n    prefixSet: boolean = false;\n    prefix: string = '';\n\n    // Sorting, default available\n    sortColumns: SortColumn[] = [{column: 'name', sortDirection: -1}];\n    protected readonly byteConversion = byteConversion;\n\n    constructor(private snackBar: MatSnackBar, private dialog: MatDialog, private location: Location, private state: State<SNSTopicListState>, private store: Store,\n                private actionsSubj$: ActionsSubject) {\n        this.actionsSubj$.pipe(\n            filter((action) =>\n                action.type === snsTopicListActions.addTopicSuccess.type ||\n                action.type === snsTopicListActions.publishMessageSuccess.type ||\n                action.type === snsTopicListActions.purgeTopicSuccess.type ||\n                action.type === snsTopicListActions.deleteTopicSuccess.type\n            )\n        ).subscribe(() => {\n                this.lastUpdate = new Date();\n                this.loadTopics();\n            }\n        );\n    }\n\n    ngOnInit(): void {\n        this.loadTopics();\n        this.updateSubscription = interval(60000).subscribe(() => this.loadTopics());\n    }\n\n    ngOnDestroy(): void {\n        this.updateSubscription?.unsubscribe();\n    }\n\n    back() {\n        this.location.back();\n    }\n\n    refresh() {\n        this.loadTopics();\n    }\n\n    setPrefix() {\n        this.prefixSet = true;\n        this.state.value['sns-topic-list'].pageIndex = 0;\n        this.state.value['sns-topic-list'].prefix = this.prefix;\n        this.loadTopics();\n    }\n\n    unsetPrefix() {\n        this.prefix = '';\n        this.prefixSet = false;\n        this.state.value['sns-topic-list'].prefix = '';\n        this.loadTopics();\n    }\n\n    handlePageEvent(e: PageEvent) {\n        this.state.value['sns-topic-list'].pageSize = e.pageSize;\n        this.state.value['sns-topic-list'].pageIndex = e.pageIndex;\n        this.loadTopics();\n    }\n\n    sortChange(sortState: Sort) {\n        this.state.value['sns-topic-list'].sortColumns = [];\n        let direction: number;\n        let column = 'topicName';\n        if (sortState.active === 'availableMessages') {\n            column = 'attributes.availableMessages'\n        }\n        if (sortState.direction === 'asc') {\n            direction = 1;\n        } else {\n            direction = -1;\n        }\n        this.state.value['sns-topic-list'].sortColumns = [{column: column, sortDirection: direction}];\n        this.loadTopics();\n    }\n\n    loadTopics() {\n        this.store.dispatch(snsTopicListActions.loadTopics({\n            prefix: this.state.value['sns-topic-list'].prefix,\n            pageSize: this.state.value['sns-topic-list'].pageSize,\n            pageIndex: this.state.value['sns-topic-list'].pageIndex,\n            sortColumns: this.state.value['sns-topic-list'].sortColumns\n        }));\n    }\n\n    addTopic() {\n\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n\n        this.dialog.open(TopicAddComponentDialog, dialogConfig).afterClosed().subscribe(result => {\n            if (result) {\n                this.store.dispatch(snsTopicListActions.addTopic({name: result}));\n            }\n        });\n    }\n\n    publishMessage(topicArn: string) {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n        dialogConfig.data = {topicArn: topicArn};\n        dialogConfig.maxWidth = '100vw';\n        dialogConfig.maxHeight = '100vh';\n        dialogConfig.panelClass = 'full-screen-modal';\n        dialogConfig.width = \"90%\"\n\n        this.dialog.open(PublishMessageComponentDialog, dialogConfig).afterClosed().subscribe(result => {\n            if (result) {\n                this.store.dispatch(snsTopicListActions.publishMessage({topicArn: topicArn, message: result}));\n            }\n        });\n    }\n\n    purgeTopic(topicArn: string) {\n        this.store.dispatch(snsTopicListActions.purgeTopic({topicArn: topicArn}));\n    }\n\n    deleteTopic(topicArn: string) {\n        this.store.dispatch(snsTopicListActions.deleteTopic({topicArn: topicArn}));\n    }\n}\n","<mat-card appearance=\"outlined\" style=\"margin: 3px\">\n    <mat-card-header>\n        <button (click)=\"back()\" aria-label=\"Back\" class=\"head-buttons-left\" mat-icon-button>\n            <mat-icon>arrow_back</mat-icon>\n        </button>\n        <span class=\"fill-remaining-space\">\n            <h4>SNS Topics</h4>\n        </span>\n        <button (click)=\"addTopic()\" aria-label=\"Refresh\" mat-icon-button>\n            <mat-icon>add</mat-icon>\n        </button>\n        <button (click)=\"refresh()\" aria-label=\"Refresh\" mat-icon-button>\n            <mat-icon>refresh</mat-icon>\n        </button>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-card appearance=\"outlined\" style=\"margin: -10px;\">\n            <mat-card-actions align=\"start\">\n                <mat-form-field style=\"width:100%\">\n                    <mat-label>Prefix</mat-label>\n                    <input [(ngModel)]=\"prefix\" matInput name=\"search\" placeholder=\"Search\" type=\"text\">\n                    <button (click)=\"setPrefix()\" *ngIf=\"!prefixSet\" mat-icon-button matSuffix style=\"float: right\">\n                        <mat-icon matSuffix>search</mat-icon>\n                    </button>\n                    <button (click)=\"unsetPrefix()\" *ngIf=\"prefixSet\" mat-icon-button matSuffix style=\"float: right\">\n                        <mat-icon matSuffix>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </mat-card-actions>\n            <div class=\"table-container\">\n                <div *ngIf=\"listTopicCountersResponse$ | async as topicCounters\" class=\"row\">\n                    <table (matSortChange)=\"sortChange($event)\" [dataSource]=\"topicCounters.TopicCounters\" class=\"mat-elevation-z8 queue-table\" mat-table matSort>\n                        <ng-container matColumnDef=\"topicName\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Topic name\" sortActionDescription=\"Sort by queueUrl\">Name</th>\n                            <td *matCellDef=\"let element\" mat-cell>\n                                <mat-nav-list>\n                                    <a mat-list-item routerLink=\"./messages/{{ element.topicArn }}\">{{ element.topicName }}</a>\n                                </mat-nav-list>\n                            </td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"availableMessages\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Available messages in topic\" sortActionDescription=\"Sort by created\">\n                                Available\n                            </th>\n                            <td *matCellDef=\"let element\" mat-cell>\n                                {{ element.availableMessages }}\n                            </td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"size\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"SIze of all messages in bytes\" sortActionDescription=\"Sort by size\">\n                                Size\n                            </th>\n                            <td *matCellDef=\"let element\" mat-cell>\n                                {{ byteConversion(element.size) }}\n                            </td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"created\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Topic creation timestamp\" sortActionDescription=\"Sort by created\">\n                                Created\n                            </th>\n                            <td *matCellDef=\"let element\" mat-cell>\n                                {{ element.created|date:'dd-MM-yyyy HH:mm:ss' }}\n                            </td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"modified\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Topic name\" sortActionDescription=\"Sort by queueUrl\">Modified</th>\n                            <td *matCellDef=\"let element\" mat-cell>\n                                {{ element.modified|date:'dd-MM-yyyy HH:mm:ss' }}\n                            </td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"actions\">\n                            <th *matHeaderCellDef mat-header-cell style=\"width:200px\">Actions</th>\n                            <td *matCellDef=\"let row\" mat-cell>\n                                <button (click)=\"publishMessage(row.topicArn)\" aria-label=\"Send\" mat-icon-button matTooltip=\"Send a message\">\n                                    <mat-icon>send</mat-icon>\n                                </button>\n                                <button aria-label=\"Details\" mat-icon-button matTooltip=\"Edit topic\" routerLink=\"./details/{{ row.topicArn }}\">\n                                    <mat-icon>edit</mat-icon>\n                                </button>\n                                <button (click)=\"purgeTopic(row.topicArn)\" aria-label=\"Purge\" mat-icon-button matTooltip=\"Purge the topic\">\n                                    <mat-icon>clear_all</mat-icon>\n                                </button>\n                                <button (click)=\"deleteTopic(row.topicArn)\" aria-label=\"Delete\" mat-icon-button matTooltip=\"Delete the topic\">\n                                    <mat-icon>delete</mat-icon>\n                                </button>\n                            </td>\n                        </ng-container>\n                        <tr *matHeaderRowDef=\"columns\" mat-header-row></tr>\n                        <tr *matRowDef=\"let row; columns: columns;\" mat-row></tr>\n                        <tr *matNoDataRow class=\"mat-row\">\n                            <td [attr.colspan]=\"columns.length\" class=\"mat-cell\" style=\"padding-left: 20px;padding-top: 10px\">\n                                No data matching the filter.\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n            <mat-paginator (page)=\"handlePageEvent($event)\"\n                           [disabled]=\"disabled\"\n                           [hidePageSize]=\"hidePageSize\"\n                           [length]=\"(listTopicCountersResponse$ | async)?.Total\"\n                           [pageIndex]=\"(pageIndex$ | async)\"\n                           [pageSizeOptions]=\"showPageSizeOptions ? pageSizeOptions : []\"\n                           [pageSize]=\"(pageSize$ | async)\"\n                           [showFirstLastButtons]=\"showFirstLastButtons\"\n                           aria-label=\"Select page\" style=\"width:99%; margin-left:15px\">\n            </mat-paginator>\n        </mat-card>\n        <div class=\"footer\">\n            Last update: {{ lastUpdate | date: 'HH:mm:ss' }}\n        </div>\n    </mat-card-content>\n</mat-card>\n","import {MAT_DIALOG_DATA, MatDialogActions, MatDialogClose, MatDialogContent, MatDialogRef, MatDialogTitle} from \"@angular/material/dialog\";\nimport {Component, Inject, OnInit} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButton} from \"@angular/material/button\";\nimport {MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatOption, MatSelect} from \"@angular/material/select\";\nimport {MatTextColumn} from \"@angular/material/table\";\nimport {MatInput} from \"@angular/material/input\";\nimport {NgIf} from \"@angular/common\";\nimport {SqsService} from \"../../../sqs/service/sqs-service.component\";\n\nexport const Protocols: string[] = [\n    'http',\n    'https',\n    'email',\n    'email-json',\n    'sms',\n    'sqs',\n    'application',\n    'lambda',\n    'firehose'\n];\n\n@Component({\n    selector: 'subscription-add-dialog',\n    templateUrl: './subscription-add.component.html',\n    standalone: true,\n    imports: [\n        MatDialogContent,\n        MatDialogTitle,\n        MatDialogActions,\n        MatButton,\n        MatDialogClose,\n        MatFormField,\n        MatSelect,\n        MatOption,\n        MatLabel,\n        FormsModule,\n        MatTextColumn,\n        MatInput,\n        ReactiveFormsModule,\n        NgIf\n    ],\n    styleUrls: ['./subscription-add.component.scss'],\n    providers: [SqsService]\n})\nexport class SubscriptionAddComponentDialog implements OnInit {\n\n    // @ts-ignore\n    form: FormGroup;\n    topicArn: string = '';\n    topicName: string = '';\n    endpoint: string = '';\n    protocol: string = 'sqs';\n    queueArnData: Array<string> = [];\n    protected readonly Protocols = Protocols;\n\n    constructor(private sqsService: SqsService, private fb: FormBuilder, private dialogRef: MatDialogRef<SubscriptionAddComponentDialog>, @Inject(MAT_DIALOG_DATA) public data: any) {\n        this.topicArn = data.topicArn;\n        this.topicName = data.topicName;\n    }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            topicArn: [\"\"],\n            endpoint: [\"\"],\n            protocol: [\"\"],\n        });\n        this.loadQueueArns();\n    }\n\n    protocolSelectionChanged() {\n        this.queueArnData = [];\n        if (this.protocol == 'sqs') {\n            this.loadQueueArns();\n        }\n    }\n\n    loadQueueArns() {\n        this.sqsService.listQueueArns()\n            .subscribe((data: any) => {\n                this.queueArnData = data.QueueArns;\n            });\n    }\n\n    save() {\n        this.dialogRef.close({topicArn: this.topicArn, endpoint: this.endpoint, protocol: this.protocol});\n    }\n\n    close() {\n        this.dialogRef.close(false);\n    }\n}\n","<h2 mat-dialog-title>Add Topic Subscription</h2>\n<mat-dialog-content class=\"mat-typography\" style=\"width: 500px\">\n    <mat-form-field style=\"width: 100%\">\n        <mat-label>Topic ARN</mat-label>\n        <input [(ngModel)]=\"topicArn\" matInput readonly value=\"\">\n    </mat-form-field>\n    <mat-form-field style=\"width: 100%\">\n        <mat-label>Protocol</mat-label>\n        <mat-select (selectionChange)=\"protocolSelectionChanged()\" [(ngModel)]=\"protocol\" style=\"width:100%\">\n            @for (protocol of Protocols; track protocol) {\n                <mat-option [value]=\"protocol\">{{ protocol }}</mat-option>\n            }\n        </mat-select>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"protocol == 'sqs'\" style=\"width: 100%\">\n        <mat-label>Endpoint</mat-label>\n        <mat-select [(ngModel)]=\"endpoint\" style=\"width:100%\">\n            @for (arn of queueArnData; track $index) {\n                <mat-option [value]=\"arn\">{{ arn }}</mat-option>\n            }\n        </mat-select>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"protocol != 'sqs'\" style=\"width: 100%\">\n        <mat-label>Not supported yet</mat-label>\n        <input matInput readonly value=\"\">\n    </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n    <button mat-button mat-dialog-close>Cancel</button>\n    <button (click)=\"save()\" cdkFocusInitial mat-button>Add</button>\n</mat-dialog-actions>\n","import {createAction, props} from '@ngrx/store';\nimport {SnsTopicDetails} from \"../../model/sns-topic-details\";\nimport {SnsSubscriptionCountersResponse} from \"../../model/sns-subscription-item\";\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\n\nexport const snsTopicDetailsActions = {\n    initialize: createAction('[sns-topic-details] initialize'),\n\n    // Load details\n    loadDetails: createAction('[sns-topic-details] Load topics details', props<{ topicArn: string }>()),\n    loadDetailsSuccess: createAction('[sns-topic-details] Load topics details success', props<{ topicDetails: SnsTopicDetails }>()),\n    loadDetailsFailure: createAction('[sns-topic-details] Load topics details error', props<{ error: string }>()),\n\n    // Load attributes\n    loadAttributes: createAction('[sns-topic-details] Load topics attributes', props<{ topicArn: string }>()),\n    loadAttributesSuccess: createAction('[sns-topic-details] Load topics attributes success', props<{ attributes: SnsTopicDetails }>()),\n    loadAttributesFailure: createAction('[sns-topic-details] Load topics attributes error', props<{ error: string }>()),\n\n    // Load subscriptions\n    loadSubscriptions: createAction('[sns-topic-details] Load topics subscriptions', props<{\n        topicArn: string,\n        pageSize: number,\n        pageIndex: number,\n        sortColumns: SortColumn[]\n    }>()),\n    loadSubscriptionsSuccess: createAction('[sns-topic-details] Load topics subscriptions success', props<{ subscriptions: SnsSubscriptionCountersResponse }>()),\n    loadSubscriptionsFailure: createAction('[sns-topic-details] Load topics subscriptions error', props<{ error: string }>()),\n\n    // Load tags\n    loadTags: createAction('[sns-topic-details] Load topics tags', props<{ topicArn: string }>()),\n    loadTagsSuccess: createAction('[sns-topic-details] Load topics tags success', props<{ tags: SnsTopicDetails }>()),\n    loadTagsFailure: createAction('[sns-topic-details] Load topics tags error', props<{ error: string }>()),\n}","import {createReducer, on} from \"@ngrx/store\";\nimport {snsTopicDetailsActions} from './sns-topic-detail.actions';\nimport {SnsTopicDetails} from \"../../model/sns-topic-details\";\nimport {SnsSubscriptionCountersResponse} from \"../../model/sns-subscription-item\";\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\n\nexport const snsTopicDetailsFeatureKey = 'sns-topic-details';\n\nexport interface SnsTopicDetailsState {\n    snsTopicDetails: SnsTopicDetails;\n    snsTopicSubscriptions: SnsSubscriptionCountersResponse;\n    subscriptionPageSize: number,\n    subscriptionPageIndex: number,\n    subscriptionSortColumns: SortColumn[],\n    loading: boolean;\n    error: unknown;\n}\n\nexport const initialState: SnsTopicDetailsState = {\n    snsTopicDetails: {} as SnsTopicDetails,\n    snsTopicSubscriptions: {} as SnsSubscriptionCountersResponse,\n    subscriptionPageSize: 10,\n    subscriptionPageIndex: 0,\n    subscriptionSortColumns: [{column: 'endpoint', sortDirection: -1}],\n    loading: false,\n    error: {}\n};\n\nexport const snsTopicDetailReducer = createReducer(\n    initialState,\n\n    // Initialize\n    on(snsTopicDetailsActions.initialize, (state: SnsTopicDetailsState): SnsTopicDetailsState => ({...state, loading: false})),\n\n    // Topic details\n    on(snsTopicDetailsActions.loadDetails, (state: SnsTopicDetailsState) => ({...state, loading: true})),\n    on(snsTopicDetailsActions.loadDetailsSuccess, (state: SnsTopicDetailsState, {topicDetails}) => ({...state, snsTopicDetails: topicDetails, loading: false})),\n    on(snsTopicDetailsActions.loadDetailsFailure, (state: SnsTopicDetailsState, {error}) => ({...state, error: error, loading: false})),\n\n    // Topic subscriptions\n    on(snsTopicDetailsActions.loadSubscriptions, (state: SnsTopicDetailsState) => ({...state, loading: true})),\n    on(snsTopicDetailsActions.loadSubscriptionsSuccess, (state: SnsTopicDetailsState, {subscriptions}) => ({\n        ...state,\n        snsTopicSubscriptions: subscriptions,\n        loading: false\n    })),\n    on(snsTopicDetailsActions.loadSubscriptionsFailure, (state: SnsTopicDetailsState, {error}) => ({...state, error: error, loading: false})),\n);","import {createFeatureSelector, createSelector, DefaultProjectorFn, MemoizedSelector} from \"@ngrx/store\";\nimport {snsTopicDetailsFeatureKey, SnsTopicDetailsState} from \"./sns-topic-detail.reducer\";\nimport {SnsTopicDetails} from \"../../model/sns-topic-details\";\nimport {SnsSubscriptionCountersResponse} from \"../../model/sns-subscription-item\";\n\nexport type SelectorType<T> = MemoizedSelector<object, T, DefaultProjectorFn<T>>;\nexport type SelectorFeatureType<T> = MemoizedSelector<object, T>;\n\nconst selectTopicDetailsFeature: SelectorFeatureType<SnsTopicDetailsState> =\n    createFeatureSelector<SnsTopicDetailsState>(snsTopicDetailsFeatureKey);\n\nexport const selectDetails: SelectorType<SnsTopicDetails> = createSelector(\n    selectTopicDetailsFeature,\n    (state: SnsTopicDetailsState) => state?.snsTopicDetails\n);\n\nexport const selectSubscriptions: SelectorType<SnsSubscriptionCountersResponse> = createSelector(\n    selectTopicDetailsFeature,\n    (state: SnsTopicDetailsState) => state?.snsTopicSubscriptions\n);\n\nexport const selectSubscriptionPageSize: SelectorType<number> = createSelector(\n    selectTopicDetailsFeature,\n    (state: SnsTopicDetailsState) => state?.subscriptionPageSize\n);\n\nexport const selectSubscriptionPageIndex: SelectorType<number> = createSelector(\n    selectTopicDetailsFeature,\n    (state: SnsTopicDetailsState) => state?.subscriptionPageIndex\n);\n\nexport const selectError: SelectorType<any> = createSelector(\n    selectTopicDetailsFeature,\n    (state: SnsTopicDetailsState) => state?.error\n);\n","import {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {Component, OnDestroy, OnInit} from \"@angular/core\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Location} from \"@angular/common\";\nimport {Sort} from \"@angular/material/sort\";\nimport {SnsSubscriptionCountersResponse} from \"../model/sns-subscription-item\";\nimport {PageEvent} from \"@angular/material/paginator\";\nimport {SubscriptionAddComponentDialog} from \"./subscription-add/subscription-add.component\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {SnsTopicDetails} from \"../model/sns-topic-details\";\nimport {SnsService} from \"../service/sns-service.component\";\nimport {State, Store} from \"@ngrx/store\";\nimport {snsTopicDetailsActions} from \"./state/sns-topic-detail.actions\";\nimport {Observable} from \"rxjs\";\nimport {selectDetails, selectError, selectSubscriptionPageIndex, selectSubscriptionPageSize, selectSubscriptions} from \"./state/sns-topic-detail.selectors\";\nimport {SnsTopicDetailsState} from \"./state/sns-topic-detail.reducer\";\n\n@Component({\n    selector: 'add-connection-dialog',\n    templateUrl: './topic-detail.component.html',\n    styleUrls: ['./topic-detail.component.scss'],\n    providers: [SnsService]\n})\nexport class SnsTopicDetailComponent implements OnInit, OnDestroy {\n\n    // Last update\n    lastUpdate: Date = new Date();\n\n    topicArn: string = '';\n    topicDetails$: Observable<SnsTopicDetails> = this.store.select(selectDetails);\n    topicDetailsError$: Observable<string> = this.store.select(selectError);\n\n    // Subscription Table\n    topicSubscriptions$: Observable<SnsSubscriptionCountersResponse> = this.store.select(selectSubscriptions);\n    subscriptionPageSize$: Observable<number> = this.store.select(selectSubscriptionPageSize);\n    subscriptionPageIndex$: Observable<number> = this.store.select(selectSubscriptionPageIndex);\n    subscriptionColumns: any[] = ['id', 'endpoint', 'protocol', 'owner', 'actions'];\n    subscriptionPageSizeOptions = [5, 10, 20, 50, 100];\n\n    private sub: any;\n\n    constructor(private snackBar: MatSnackBar, private snsService: SnsService, private route: ActivatedRoute, private dialog: MatDialog,\n                private location: Location, private store: Store, private state: State<SnsTopicDetailsState>) {\n    }\n\n    ngOnInit() {\n        this.sub = this.route.params.subscribe(params => {\n            this.topicArn = params['topicArn'];\n            this.loadTopicDetails();\n            this.loadSubscriptions();\n        });\n        this.topicDetailsError$.subscribe((msg: string) => {\n            if (msg && msg.length) {\n                this.snackBar.open(\"ErrorMessage: \" + msg.toString())\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    back() {\n        this.location.back();\n    }\n\n    refresh() {\n        this.loadTopicDetails();\n        this.loadSubscriptions();\n    }\n\n    // ===================================================================================================================\n    // Details\n    // ===================================================================================================================\n    loadTopicDetails() {\n        this.store.dispatch(snsTopicDetailsActions.loadDetails({topicArn: this.topicArn}));\n    }\n\n    save() {\n    }\n\n    close() {\n        this.location.back();\n    }\n\n    // ===================================================================================================================\n    // Subscriptions\n    // ===================================================================================================================\n    handleSubscriptionPageEvent(e: PageEvent) {\n        this.state.value['sns-topic-details'].subscriptionPageSize = e.pageSize;\n        this.state.value['sns-topic-details'].subscriptionPageIndex = e.pageIndex;\n        this.loadSubscriptions();\n    }\n\n    loadSubscriptions() {\n        this.store.dispatch(snsTopicDetailsActions.loadSubscriptions({\n            topicArn: this.topicArn,\n            pageSize: this.state.value['sns-topic-details'].subscriptionPageSize,\n            pageIndex: this.state.value['sns-topic-details'].subscriptionPageIndex,\n            sortColumns: this.state.value['sns-topic-details'].sortColumns\n        }));\n    }\n\n    subscriptionSortChange(sortState: Sort) {\n        this.state.value['sns-topic-details'].sortColumns = [];\n        let column = sortState.active;\n        let direction = sortState.direction === 'asc' ? 1 : -1;\n        this.state.value['sns-topic-details'].sortColumns = [{column: column, sortDirection: direction}];\n        this.loadSubscriptions();\n    }\n\n    refreshSubscriptions() {\n        this.loadSubscriptions();\n    }\n\n    unsubscribe(subscriptionArn: string) {\n        /*this.subscriptionData = [];\n        const input = {\n            SubscriptionArn: subscriptionArn,\n        };*/\n        /* this.client.send(new UnsubscribeCommand(input))\n             .then(() => this.loadSubscriptions())\n             .catch((error: any) => console.error(error))\n             .finally(() => {\n                 this.client.destroy();\n             });*/\n    }\n\n    editSubscription(topicArn: string) {\n    }\n\n    addSubscription() {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n        //dialogConfig.data = {topicArn: this.topicArn, topicName: this.topicDetails$?.topicName};\n\n        this.dialog.open(SubscriptionAddComponentDialog, dialogConfig).afterClosed().subscribe(result => {\n            if (result) {\n                this.subscribe(result)\n            }\n        });\n    }\n\n    subscribe(subscription: any) {\n        this.snsService.subscribe(subscription.topicArn, subscription.endpoint, subscription.protocol)\n            .then((data: any) => {\n                this.loadSubscriptions();\n                this.snackBar.open('Subscription saved, subscription ARN:' + data.SubscriptionArn, 'Dismiss', {duration: 5000});\n            })\n            .catch((error: any) => console.error(error))\n            .finally(() => {\n                //this.client.destroy();\n            });\n    }\n}\n","<mat-card appearance=\"outlined\" style=\"margin: 3px;\">\n    <mat-card-header>\n        <span>\n            <button (click)=\"back()\" aria-label=\"Back\" class=\"head-buttons-left\" mat-icon-button>\n                <mat-icon>arrow_back</mat-icon>\n            </button>\n        </span>\n        <span class=\"fill-remaining-space\">\n            <h4>Topic: {{ (topicDetails$ | async)?.topicName }}</h4>\n        </span>\n        <span>\n            <button (click)=\"refresh()\" aria-label=\"Refresh\" mat-icon-button>\n                <mat-icon>refresh</mat-icon>\n            </button>\n        </span>\n    </mat-card-header>\n    <mat-card appearance=\"outlined\" style=\"margin-top: 5px;\">\n        <div *ngIf=\"topicDetails$ | async as topicDetails\">\n            <mat-card-content>\n                <mat-grid-list cols=\"4\" rowHeight=\"400px\">\n                    <mat-grid-tile [colspan]=\"2\" [rowspan]=\"1\">\n                        <mat-list>\n                            <mat-list-item style=\"height:80px\">\n                                <p matListItemTitle>Topic Name: </p>\n                                <p matListItemLine>{{ topicDetails.topicName }}</p>\n                            </mat-list-item>\n                            <mat-list-item style=\"height:80px\">\n                                <p matListItemTitle>ARN: </p>\n                                <p matListItemLine>{{ topicDetails.topicArn }}</p>\n                            </mat-list-item>\n                            <mat-list-item style=\"height:80px\">\n                                <p matListItemTitle>URL: </p>\n                                <p matListItemLine>{{ topicDetails.topicUrl }}</p>\n                            </mat-list-item>\n                        </mat-list>\n                    </mat-grid-tile>\n                    <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n                        <div style=\"width: 100%; display: flex; align-items: flex-start;align-content:flex-start\">\n                            <mat-list>\n                                <mat-list-item style=\"height:80px\">\n                                    <p matListItemTitle>Owner: </p>\n                                    <p matListItemLine>{{ topicDetails.owner }}</p>\n                                </mat-list-item>\n                                <mat-list-item style=\"height:80px\">\n                                    <p matListItemTitle>Messages: </p>\n                                    <p matListItemLine>{{ topicDetails.messageCount }}</p>\n                                </mat-list-item>\n                                <mat-list-item style=\"height:80px\">\n                                    <p matListItemTitle>Size (kB): </p>\n                                    <p matListItemLine>{{ topicDetails.size }}</p>\n                                </mat-list-item>\n                            </mat-list>\n                        </div>\n                    </mat-grid-tile>\n                    <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n                        <div style=\"width: 100%; display: flex; align-items: flex-start;align-content:flex-start\">\n                            <mat-list>\n                                <mat-list-item style=\"height:80px\">\n                                    <p matListItemTitle>Created: </p>\n                                    <p matListItemLine>{{ topicDetails.created | date: 'yyyy-MM-dd HH:mm:ss' }}</p>\n                                </mat-list-item>\n                                <mat-list-item style=\"height:80px\">\n                                    <p matListItemTitle>Modified: </p>\n                                    <p matListItemLine>{{ topicDetails.modified | date: 'yyyy-MM-dd HH:mm:ss' }}</p>\n                                </mat-list-item>\n                                <mat-list-item style=\"height:80px\">\n                                </mat-list-item>\n                            </mat-list>\n                        </div>\n                    </mat-grid-tile>\n                </mat-grid-list>\n            </mat-card-content>\n        </div>\n    </mat-card>\n    <mat-card appearance=\"outlined\" style=\"margin-top: 5px;\">\n        <mat-card-header>\n            <mat-card-title>Attributes</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <mat-tab-group>\n                <mat-tab label=\"Subscriptions\">\n                    <mat-card-actions class=\"head-buttons\">\n                        <button (click)=\"addSubscription()\" aria-label=\"Refresh\" mat-icon-button>\n                            <mat-icon>add</mat-icon>\n                        </button>\n                        <button (click)=\"refreshSubscriptions()\" aria-label=\"Refresh\" mat-icon-button>\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </mat-card-actions>\n                    <div *ngIf=\"topicSubscriptions$ | async as topicSubscriptions\" class=\"row\">\n                        <table (matSortChange)=\"subscriptionSortChange($event)\" [dataSource]=\"topicSubscriptions.SubscriptionCounters\" class=\"mat-elevation-z8\"\n                               mat-table\n                               matSort>\n                            <ng-container matColumnDef=\"id\">\n                                <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"ID\" sortActionDescription=\"Sort by subscriptionArn\">ID</th>\n                                <td *matCellDef=\"let element\" mat-cell> {{ element.id }}</td>\n                            </ng-container>\n                            <ng-container matColumnDef=\"endpoint\">\n                                <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Endpoint\" sortActionDescription=\"Sort by endpoint\">Endpoint</th>\n                                <td *matCellDef=\"let element\" mat-cell> {{ element.endpoint }}</td>\n                            </ng-container>\n                            <ng-container matColumnDef=\"protocol\">\n                                <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Protocol\" sortActionDescription=\"Sort by endpoint\">Protocol</th>\n                                <td *matCellDef=\"let element\" mat-cell> {{ element.protocol }}</td>\n                            </ng-container>\n                            <ng-container matColumnDef=\"owner\">\n                                <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Owner\" sortActionDescription=\"Sort by endpoint\">Owner</th>\n                                <td *matCellDef=\"let element\" mat-cell> {{ element.owner }}</td>\n                            </ng-container>\n                            <ng-container matColumnDef=\"actions\">\n                                <th *matHeaderCellDef mat-header-cell style=\"width:120px\">Actions</th>\n                                <td *matCellDef=\"let row\" mat-cell>\n                                    <button (click)=\"editSubscription(row.subscriptionArn)\" aria-label=\"Edit\" mat-icon-button matTooltip=\"Edit the subscription\">\n                                        <mat-icon>edit</mat-icon>\n                                    </button>\n                                    <button (click)=\"unsubscribe(row.subscriptionArn)\" aria-label=\"Delete\" mat-icon-button matTooltip=\"Unsubscribe from the topic\">\n                                        <mat-icon>unsubscribe</mat-icon>\n                                    </button>\n                                </td>\n                            </ng-container>\n                            <tr *matHeaderRowDef=\"subscriptionColumns\" mat-header-row></tr>\n                            <tr *matRowDef=\"let row; columns: subscriptionColumns;\" mat-row></tr>\n                            <tr *matNoDataRow class=\"mat-row\">\n                                <td [attr.colspan]=\"subscriptionColumns.length\" class=\"mat-cell\">\n                                    No data matching the filter.\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                    <mat-paginator (page)=\"handleSubscriptionPageEvent($event)\"\n                                   [disabled]=\"false\"\n                                   [hidePageSize]=\"false\"\n                                   [length]=\"(topicSubscriptions$ | async)?.Total\"\n                                   [pageIndex]=\"(subscriptionPageIndex$ | async)\"\n                                   [pageSizeOptions]=\"subscriptionPageSizeOptions\"\n                                   [pageSize]=\"(subscriptionPageSize$ | async)\"\n                                   [showFirstLastButtons]=\"true\"\n                                   aria-label=\"Select page\">\n                    </mat-paginator>\n                </mat-tab>\n                <mat-tab label=\"Access Policy\">\n                    Access Control\n                </mat-tab>\n                <mat-tab label=\"Tags\">\n                    Tags\n                </mat-tab>\n                <mat-tab label=\"Attributes\">\n                    Attributes\n                </mat-tab>\n            </mat-tab-group>\n        </mat-card-content>\n    </mat-card>\n    <mat-card-actions align=\"end\">\n        <button (click)=close() mat-button>Close</button>\n        <button (click)=save() mat-button>Save</button>\n    </mat-card-actions>\n    <div class=\"footer\">\n        Last update: {{ lastUpdate |date: 'HH:mm:ss' }}\n    </div>\n</mat-card>\n","import {createAction, props} from '@ngrx/store';\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {SnsMessageCountersResponse} from \"../../model/sns-message-item\";\n\nexport const snsMessageListActions = {\n    initialize: createAction('[sns-message-list] initialize'),\n\n    // Load topic\n    loadMessages: createAction('[sns-message-list] Load messages', props<{ topicArn: string, pageSize: number, pageIndex: number, sortColumns: SortColumn[] }>()),\n    loadMessagesSuccess: createAction('[sns-message-list] Load messages success', props<{ messages: SnsMessageCountersResponse }>()),\n    loadMessagesFailure: createAction('[sns-message-list] Load messages failure', props<{ error: string }>()),\n\n    // Publish message\n    publishMessage: createAction('[sns-message-list] Publish message', props<{ topicArn: string, message: string }>()),\n    publishMessageSuccess: createAction('[sns-message-list] Publish message success'),\n    publishMessageFailure: createAction('[sns-message-list] Publish message error', props<{ error: string }>()),\n\n    // Delete topic\n    deleteMessage: createAction('[sns-message-list] Delete message', props<{ topicArn: string, messageId: string }>()),\n    deleteMessageSuccess: createAction('[sns-message-list] Delete message success'),\n    deleteMessageFailure: createAction('[sns-message-list] Delete message error', props<{ error: string }>()),\n}","import {createReducer, on} from \"@ngrx/store\";\nimport {snsMessageListActions} from './sns-message-list.actions';\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {SnsMessageCountersResponse} from \"../../model/sns-message-item\";\n\nexport const snsMessageListFeatureKey = 'sns-message-list';\n\nexport interface SNSMessageListState {\n    snsMessageCountersResponse: SnsMessageCountersResponse;\n    pageSize: number;\n    pageIndex: number;\n    loading: boolean;\n    sortColumns: SortColumn[];\n    error: unknown;\n}\n\nexport const initialState: SNSMessageListState = {\n    snsMessageCountersResponse: {total: 0, messages: []},\n    pageSize: 10,\n    pageIndex: 0,\n    loading: false,\n    sortColumns: [{column: 'attributes.availableMessages', sortDirection: -1}],\n    error: {}\n};\n\nexport const snsMessageListReducer = createReducer(\n    initialState,\n\n    // Initialize\n    on(snsMessageListActions.initialize, (state: SNSMessageListState): SNSMessageListState => ({...state, pageIndex: 0, pageSize: 10, loading: true})),\n\n    // Message list\n    on(snsMessageListActions.loadMessages, (state: SNSMessageListState) => ({...state, loading: true})),\n    on(snsMessageListActions.loadMessagesSuccess, (state: SNSMessageListState, {messages}) => ({...state, snsMessageCountersResponse: messages, loading: false})),\n    on(snsMessageListActions.loadMessagesFailure, (state: SNSMessageListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Publish message\n    on(snsMessageListActions.publishMessage, (state: SNSMessageListState) => ({...state, loading: true})),\n    on(snsMessageListActions.publishMessageSuccess, (state: SNSMessageListState) => ({...state, loading: false})),\n    on(snsMessageListActions.publishMessageFailure, (state: SNSMessageListState, {error}) => ({...state, error: error, loading: false})),\n\n    // Delete message\n    on(snsMessageListActions.deleteMessage, (state: SNSMessageListState) => ({...state, loading: true})),\n    on(snsMessageListActions.deleteMessageSuccess, (state: SNSMessageListState) => ({...state, loading: false})),\n    on(snsMessageListActions.deleteMessageFailure, (state: SNSMessageListState, {error}) => ({...state, error: error, loading: false})),\n);","import {createFeatureSelector, createSelector, DefaultProjectorFn, MemoizedSelector} from \"@ngrx/store\";\nimport {snsMessageListFeatureKey, SNSMessageListState} from \"./sns-message-list.reducer\";\nimport {SnsMessageCountersResponse} from \"../../model/sns-message-item\";\n\nexport type SelectorType<T> = MemoizedSelector<object, T, DefaultProjectorFn<T>>;\nexport type SelectorFeatureType<T> = MemoizedSelector<object, T>;\n\nconst selectMessageListFeature: SelectorFeatureType<SNSMessageListState> =\n    createFeatureSelector<SNSMessageListState>(snsMessageListFeatureKey);\n\nexport const selectIsLoading: SelectorType<boolean> = createSelector(\n    selectMessageListFeature,\n    (state: SNSMessageListState) => state.loading\n);\n\nexport const selectPageSize: SelectorType<number> = createSelector(\n    selectMessageListFeature,\n    (state: SNSMessageListState) => state?.pageSize\n);\n\nexport const selectPageIndex: SelectorType<number> = createSelector(\n    selectMessageListFeature,\n    (state: SNSMessageListState) => state?.pageIndex\n);\n\nexport const selectMessageCounters: SelectorType<SnsMessageCountersResponse> = createSelector(\n    selectMessageListFeature,\n    (state: SNSMessageListState) => state?.snsMessageCountersResponse\n);\n","import {MAT_DIALOG_DATA, MatDialogActions, MatDialogClose, MatDialogContent, MatDialogRef, MatDialogTitle} from \"@angular/material/dialog\";\nimport {Component, Inject, OnInit} from \"@angular/core\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButton} from \"@angular/material/button\";\nimport {MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatOption, MatSelect} from \"@angular/material/select\";\nimport {MatTextColumn} from \"@angular/material/table\";\nimport {MatInput} from \"@angular/material/input\";\nimport {CdkDrag, CdkDragHandle} from \"@angular/cdk/drag-drop\";\nimport {CdkTextareaAutosize} from \"@angular/cdk/text-field\";\nimport {SnsMessageItem} from \"../../model/sns-message-item\";\nimport {MatSlideToggle, MatSlideToggleChange} from \"@angular/material/slide-toggle\";\n\n@Component({\n    selector: 'sns-edit-message-dialog',\n    templateUrl: './sns-view-message.component.html',\n    standalone: true,\n    imports: [\n        MatDialogContent,\n        MatDialogTitle,\n        MatDialogActions,\n        MatButton,\n        MatDialogClose,\n        MatFormField,\n        MatSelect,\n        MatOption,\n        MatLabel,\n        FormsModule,\n        MatTextColumn,\n        MatInput,\n        ReactiveFormsModule,\n        CdkDrag,\n        CdkDragHandle,\n        CdkTextareaAutosize,\n        MatSlideToggle\n    ],\n    styleUrls: ['./sns-view-message.component.scss']\n})\nexport class SnsViewMessageDialog implements OnInit {\n\n    body: string | undefined = '';\n    rawMessage: any | undefined = '';\n    messageId: string | undefined = '';\n    message: SnsMessageItem | undefined;\n    prettyPrint: boolean = true;\n\n    constructor(private dialogRef: MatDialogRef<SnsViewMessageDialog>, @Inject(MAT_DIALOG_DATA) public data: any) {\n        this.message = data.message;\n        this.rawMessage = this.message?.message;\n        this.messageId = this.message?.messageId;\n        if (this.prettyPrint) {\n            this.body = JSON.stringify(JSON.parse(data.message.message), null, 2);\n        } else {\n            this.body = data.message.message;\n        }\n    }\n\n    ngOnInit() {\n    }\n\n    sendMessage() {\n        this.dialogRef.close(true);\n    }\n\n    changePrettyPrint(event: MatSlideToggleChange) {\n        if (this.message?.message !== undefined) {\n            if (event.checked) {\n                this.body = JSON.stringify(JSON.parse(this.message?.message), null, 2);\n            } else {\n                this.body = this.message?.message;\n            }\n        }\n    }\n\n    close() {\n        this.dialogRef.close(false);\n    }\n}\n","<h2 cdkDrag cdkDragHandle cdkDragRootElement=\".cdk-overlay-pane\" mat-dialog-title>Edit SNS message: {{ messageId }}</h2>\n<mat-dialog-actions>\n    <mat-slide-toggle (change)=\"changePrettyPrint($event)\"\n                      [checked]=\"prettyPrint\"\n                      labelPosition=\"before\">\n        Pretty Print:\n    </mat-slide-toggle>\n</mat-dialog-actions>\n<mat-dialog-content class=\"mat-typography\">\n    <mat-form-field style=\"width: 100%;height:100%\">\n        <mat-label>Message:</mat-label>\n        <textarea [(ngModel)]=\"body\" cdkAutosizeMinRows=\"20\" cdkTextareaAutosize matInput placeholder=\"Message\" readonly style=\"width:100%; height:100%\">\n            {{body}}\n        </textarea>\n    </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n    <button mat-button mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {PageEvent} from \"@angular/material/paginator\";\nimport {Sort} from \"@angular/material/sort\";\nimport {Location} from \"@angular/common\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport {filter, interval, Observable, Subscription} from \"rxjs\";\nimport {SnsMessageCountersResponse, SnsMessageItem} from \"../model/sns-message-item\";\nimport {PublishMessageComponentDialog} from \"./publish-message/publish-message.component\";\nimport {SnsService} from \"../service/sns-service.component\";\nimport {ActionsSubject, State, Store} from \"@ngrx/store\";\nimport {SNSMessageListState} from \"./state/sns-message-list.reducer\";\nimport {snsMessageListActions} from \"./state/sns-message-list.actions\";\nimport {selectMessageCounters, selectPageIndex, selectPageSize} from \"./state/sns-message-list.selectors\";\nimport {SnsViewMessageDialog} from \"./view-message/sns-view-message.component\";\n\n@Component({\n    selector: 'sns-message-list',\n    templateUrl: './sns-message-list.component.html',\n    styleUrls: ['./sns-message-list.component.scss'],\n    providers: [SnsService]\n})\nexport class SnsMessageListComponent implements OnInit, OnDestroy {\n\n    // Last update\n    lastUpdate: Date = new Date();\n\n    // Table\n    topicArn: string = '';\n    pageSize$: Observable<number> = this.store.select(selectPageSize);\n    pageIndex$: Observable<number> = this.store.select(selectPageIndex);\n    listMessageCountersResponse$: Observable<SnsMessageCountersResponse> = this.store.select(selectMessageCounters);\n    columns: any[] = ['messageId', 'region', 'created', 'modified', 'actions'];\n\n    // Paging\n    pageSizeOptions = [5, 10, 20, 50, 100];\n    hidePageSize = false;\n    showPageSizeOptions = true;\n    showFirstLastButtons = true;\n    disabled = false;\n\n    // Router parameter\n    topicName: string = '';\n\n    // Auto-update\n    private updateSubscription: Subscription | undefined;\n    private routerSubscription: Subscription | undefined;\n\n    constructor(private route: ActivatedRoute, private location: Location, private dialog: MatDialog, private store: Store, private state: State<SNSMessageListState>,\n                private actionsSubj$: ActionsSubject) {\n        this.actionsSubj$.pipe(\n            filter((action) =>\n                action.type === snsMessageListActions.publishMessageSuccess.type ||\n                action.type === snsMessageListActions.deleteMessageSuccess.type\n            )\n        ).subscribe(() => {\n                this.lastUpdate = new Date();\n                this.loadMessages();\n            }\n        );\n    }\n\n    ngOnInit(): void {\n        this.routerSubscription = this.route.params.subscribe(params => {\n            this.topicArn = decodeURI(params['topicArn']);\n            this.topicName = this.topicArn.substring(this.topicArn.lastIndexOf(':') + 1);\n        });\n        this.updateSubscription = interval(60000).subscribe(() => this.loadMessages());\n        this.loadMessages();\n    }\n\n    ngOnDestroy(): void {\n        this.routerSubscription?.unsubscribe();\n        this.updateSubscription?.unsubscribe();\n    }\n\n    back() {\n        this.location.back();\n    }\n\n    refresh() {\n        this.loadMessages();\n    }\n\n    sortChange(sortState: Sort) {\n        this.state.value['sns-message-list'].sortColumns = [];\n        let direction: number;\n        let column = 'messageId';\n        if (sortState.active === 'availableMessages') {\n            column = 'attributes.availableMessages'\n        }\n        if (sortState.direction === 'asc') {\n            direction = 1;\n        } else {\n            direction = -1;\n        }\n        this.state.value['sns-message-list'].sortColumns = [{column: column, sortDirection: direction}];\n        this.loadMessages();\n    }\n\n    handlePageEvent(e: PageEvent) {\n        this.state.value['sns-message-list'].pageSize = e.pageSize;\n        this.state.value['sns-message-list'].pageIndex = e.pageIndex;\n        this.loadMessages();\n    }\n\n    loadMessages() {\n        this.store.dispatch(snsMessageListActions.loadMessages({\n            topicArn: this.topicArn,\n            pageSize: this.state.value['sns-message-list'].pageSize,\n            pageIndex: this.state.value['sns-message-list'].pageIndex,\n            sortColumns: this.state.value['sns-message-list'].sortColumns\n        }));\n    }\n\n    editMessage(message: SnsMessageItem) {\n\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n        dialogConfig.data = {message: message};\n        dialogConfig.maxWidth = '100vw';\n        dialogConfig.maxHeight = '100vh';\n        dialogConfig.panelClass = 'full-screen-modal';\n        dialogConfig.width = \"70%\"\n\n        this.dialog.open(SnsViewMessageDialog, dialogConfig).afterClosed().subscribe(() => {\n        });\n    }\n\n    deleteMessage(messageId: string) {\n        this.store.dispatch(snsMessageListActions.deleteMessage({topicArn: this.topicArn, messageId: messageId}));\n    }\n\n    publishMessage() {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n        dialogConfig.data = {topicArn: this.topicArn};\n        dialogConfig.maxWidth = '100vw';\n        dialogConfig.maxHeight = '100vh';\n        dialogConfig.panelClass = 'full-screen-modal';\n        dialogConfig.width = \"90%\"\n\n        this.dialog.open(PublishMessageComponentDialog, dialogConfig).afterClosed().subscribe(result => {\n            if (result) {\n                this.store.dispatch(snsMessageListActions.publishMessage({topicArn: this.topicArn, message: result}));\n            }\n        });\n    }\n}\n","<mat-card appearance=\"outlined\" style=\"margin: 3px\">\n    <mat-card-header>\n        <button (click)=\"back()\" aria-label=\"Back\" class=\"head-buttons-left\" mat-icon-button>\n            <mat-icon>arrow_back</mat-icon>\n        </button>\n        <span class=\"fill-remaining-space\">\n            <h4>SNS Messages: {{ topicName }}</h4>\n        </span>\n        <button (click)=\"publishMessage()\" aria-label=\"Refresh\" mat-icon-button>\n            <mat-icon>add</mat-icon>\n        </button>\n        <button (click)=\"refresh()\" aria-label=\"Refresh\" mat-icon-button>\n            <mat-icon>refresh</mat-icon>\n        </button>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-card appearance=\"outlined\" style=\"margin: -10px\">\n            <div class=\"table-container\">\n                <div *ngIf=\"listMessageCountersResponse$ | async as messageCounters\" class=\"row\">\n                    <table (matSortChange)=\"sortChange($event)\" [dataSource]=\"messageCounters.messages\" class=\"mat-elevation-z8 queue-table\" mat-table matSort>\n                        <ng-container matColumnDef=\"messageId\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Message ID\" sortActionDescription=\"Sort by id\">Message ID</th>\n                            <td *matCellDef=\"let element\" mat-cell>\n                                <mat-nav-list>\n                                    <a (click)=\"editMessage(element)\" mat-list-item> {{ element.messageId }}</a>\n                                </mat-nav-list>\n                            </td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"region\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Region\" sortActionDescription=\"Sort by region\">Region</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.region }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"created\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Created\" sortActionDescription=\"Sort by created\">Created</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.created|date:'dd-MM-yyyy HH:mm:ss' }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"modified\">\n                            <th *matHeaderCellDef mat-header-cell mat-sort-header matTooltip=\"Modified\" sortActionDescription=\"Sort by modified\">Modified</th>\n                            <td *matCellDef=\"let element\" mat-cell> {{ element.modified|date:'dd-MM-yyyy HH:mm:ss' }}</td>\n                        </ng-container>\n                        <ng-container matColumnDef=\"actions\">\n                            <th *matHeaderCellDef mat-header-cell style=\"width:80px\">Actions</th>\n                            <td *matCellDef=\"let row\" mat-cell>\n                                <button (click)=\"deleteMessage(row.messageId)\" aria-label=\"Delete\" mat-icon-button matTooltip=\"Delete the message\">\n                                    <mat-icon>delete</mat-icon>\n                                </button>\n                            </td>\n                        </ng-container>\n                        <tr *matHeaderRowDef=\"columns\" mat-header-row></tr>\n                        <tr *matRowDef=\"let row; columns: columns;\" mat-row></tr>\n                        <tr *matNoDataRow class=\"mat-row\">\n                            <td [attr.colspan]=\"columns.length\" class=\"mat-cell\" style=\"padding-left: 20px;padding-top: 10px\">\n                                No data matching the filter.\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n            <mat-paginator (page)=\"handlePageEvent($event)\"\n                           [disabled]=\"disabled\"\n                           [hidePageSize]=\"hidePageSize\"\n                           [length]=\"(listMessageCountersResponse$ | async)?.total\"\n                           [pageIndex]=\"(pageIndex$ | async)\"\n                           [pageSizeOptions]=\"showPageSizeOptions ? pageSizeOptions : []\"\n                           [pageSize]=\"(pageSize$ | async)\"\n                           [showFirstLastButtons]=\"showFirstLastButtons\"\n                           aria-label=\"Select page\" style=\"width:99%; margin-left:15px\">\n            </mat-paginator>\n        </mat-card>\n        <div class=\"footer\">\n            Last update: {{ lastUpdate | date: 'HH:mm:ss' }}\n        </div>\n    </mat-card-content>\n</mat-card>\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {SnsTopicListComponent} from \"./topic-list/topic-list.component\";\nimport {SnsTopicDetailComponent} from \"./topic-detail/topic-detail.component\";\nimport {SnsMessageListComponent} from \"./message-list/sns-message-list.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        title: 'SNSTopicList',\n        component: SnsTopicListComponent\n    },\n    {\n        path: 'details/:topicArn',\n        title: 'SNSTopicDetails',\n        component: SnsTopicDetailComponent\n    },\n    {\n        path: 'messages/:topicArn',\n        title: 'SNSMessages',\n        component: SnsMessageListComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class SnsRoutingModule {\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {mergeMap, of} from 'rxjs';\n\nimport {catchError, map} from 'rxjs/operators';\nimport {snsTopicListActions} from './sns-topic-list.actions';\nimport {SortColumn} from \"../../../../shared/sorting/sorting.component\";\nimport {SnsService} from \"../../service/sns-service.component\";\n\n@Injectable()\nexport class SnsTopicListEffects {\n\n    sortColumns: SortColumn[] = [];\n\n    loadTopics$ = createEffect(() => this.actions$.pipe(\n        ofType(snsTopicListActions.loadTopics),\n        mergeMap(action =>\n            this.snsService.listTopicCounters(\n                action.prefix,\n                action.pageSize,\n                action.pageIndex,\n                action.sortColumns)\n                .pipe(map((topics: any) => snsTopicListActions.loadTopicsSuccess({topics})),\n                    catchError((error) =>\n                        of(snsTopicListActions.loadTopicsFailure({error: error.message}))\n                    )\n                )\n        ),\n    ));\n\n    addTopic$ = createEffect(() => this.actions$.pipe(\n        ofType(snsTopicListActions.addTopic),\n        mergeMap(action =>\n            this.snsService.addTopic(action.name)\n                .then(() => snsTopicListActions.addTopicSuccess()))\n    ));\n\n    publishMessage$ = createEffect(() => this.actions$.pipe(\n        ofType(snsTopicListActions.publishMessage),\n        mergeMap(action =>\n            this.snsService.publishMessage(action.topicArn, action.message)\n                .then(() => snsTopicListActions.publishMessageSuccess())\n                .catch((error: any) => snsTopicListActions.publishMessageFailure({error: error}))\n                .finally(() => this.snsService.cleanup)\n        )\n    ));\n\n    purgeTopic$ = createEffect(() => this.actions$.pipe(\n        ofType(snsTopicListActions.purgeTopic),\n        mergeMap(action =>\n            this.snsService.purgeTopic(action.topicArn)\n                .pipe(map(() => snsTopicListActions.purgeTopicSuccess()),\n                    catchError((error) =>\n                        of(snsTopicListActions.purgeTopicFailure({error: error.message}))\n                    )\n                )\n        )\n    ));\n\n    deleteTopic$ = createEffect(() => this.actions$.pipe(\n        ofType(snsTopicListActions.deleteTopic),\n        mergeMap(action =>\n            this.snsService.deleteTopic(action.topicArn)\n                .then(() => snsTopicListActions.addTopicSuccess()))\n    ));\n\n    constructor(private actions$: Actions, private snsService: SnsService) {\n    }\n}","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {mergeMap, of} from 'rxjs';\n\nimport {catchError, map} from 'rxjs/operators';\nimport {snsTopicDetailsActions} from './sns-topic-detail.actions';\nimport {SnsService} from \"../../service/sns-service.component\";\n\n@Injectable()\nexport class SnsTopicDetailEffects {\n\n    loadTopicDetails$ = createEffect(() => this.actions$.pipe(\n        ofType(snsTopicDetailsActions.loadDetails),\n        mergeMap(action =>\n            this.snsService.getTopicDetails(action.topicArn)\n                .pipe(map((topicDetails: any) =>\n                        snsTopicDetailsActions.loadDetailsSuccess({topicDetails: topicDetails})),\n                    catchError((error) =>\n                        of(snsTopicDetailsActions.loadDetailsFailure({error: error.message}))\n                    )\n                )\n        ),\n    ));\n\n    loadTopicSubscriptions$ = createEffect(() => this.actions$.pipe(\n        ofType(snsTopicDetailsActions.loadSubscriptions),\n        mergeMap(action =>\n            this.snsService.listSubscriptionsCounters(action.topicArn, action.pageSize, action.pageIndex, action.sortColumns)\n                .pipe(map((subscriptions: any) =>\n                        snsTopicDetailsActions.loadSubscriptionsSuccess({subscriptions: subscriptions})),\n                    catchError((error) =>\n                        of(snsTopicDetailsActions.loadSubscriptionsFailure({error: error.message}))\n                    )\n                )\n        ),\n    ));\n\n    constructor(private actions$: Actions, private snsService: SnsService) {\n    }\n}","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {mergeMap, of} from 'rxjs';\n\nimport {catchError, map} from 'rxjs/operators';\nimport {snsMessageListActions} from './sns-message-list.actions';\nimport {SnsService} from \"../../service/sns-service.component\";\n\n@Injectable()\nexport class SnsMessageListEffects {\n\n    loadMessages$ = createEffect(() => this.actions$.pipe(\n        ofType(snsMessageListActions.loadMessages),\n        mergeMap(action =>\n            this.snsService.listMessageCounters(\n                action.topicArn,\n                action.pageSize,\n                action.pageIndex,\n                action.sortColumns)\n                .pipe(map((messages: any) => snsMessageListActions.loadMessagesSuccess({messages})),\n                    catchError((error) =>\n                        of(snsMessageListActions.loadMessagesFailure({error: error.message}))\n                    )\n                )\n        ),\n    ));\n\n    publishMessage$ = createEffect(() => this.actions$.pipe(\n        ofType(snsMessageListActions.publishMessage),\n        mergeMap(action =>\n            this.snsService.publishMessage(action.topicArn, action.message)\n                .then(() => snsMessageListActions.publishMessageSuccess())\n                .catch((error: any) => snsMessageListActions.publishMessageFailure({error: error}))\n                .finally(() => this.snsService.cleanup)\n        )\n    ));\n\n    deleteMessage$ = createEffect(() => this.actions$.pipe(\n        ofType(snsMessageListActions.deleteMessage),\n        mergeMap(action =>\n            this.snsService.deleteMessage(action.topicArn, action.messageId)\n                .pipe(map(() => snsMessageListActions.deleteMessageSuccess()),\n                    catchError((error) =>\n                        of(snsMessageListActions.deleteMessageFailure({error: error.message}))\n                    )\n                )\n        )\n    ));\n\n    constructor(private actions$: Actions, private snsService: SnsService) {\n    }\n}","import {NgModule} from '@angular/core';\nimport {AsyncPipe, DatePipe, NgIf} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {StoreModule} from \"@ngrx/store\";\nimport {EffectsModule} from \"@ngrx/effects\";\nimport {MatCard, MatCardActions, MatCardContent, MatCardHeader, MatCardSubtitle, MatCardTitle} from \"@angular/material/card\";\nimport {\n    MatCell,\n    MatCellDef,\n    MatColumnDef,\n    MatHeaderCell,\n    MatHeaderCellDef,\n    MatHeaderRow,\n    MatHeaderRowDef,\n    MatNoDataRow,\n    MatRow,\n    MatRowDef,\n    MatTable\n} from \"@angular/material/table\";\nimport {MatIcon} from \"@angular/material/icon\";\nimport {MatSort, MatSortHeader} from \"@angular/material/sort\";\nimport {MatButton, MatIconButton} from \"@angular/material/button\";\nimport {MatPaginator} from \"@angular/material/paginator\";\nimport {MatTooltip} from \"@angular/material/tooltip\";\nimport {RouterLink} from \"@angular/router\";\nimport {MatList, MatListItem, MatNavList} from \"@angular/material/list\";\nimport {MatFormField, MatLabel, MatSuffix} from \"@angular/material/form-field\";\nimport {MatInput} from \"@angular/material/input\";\nimport {SnsRoutingModule} from \"./sns-routing.module\";\nimport {MatGridList, MatGridTile} from \"@angular/material/grid-list\";\nimport {MatTab, MatTabGroup} from \"@angular/material/tabs\";\nimport {snsTopicListFeatureKey, snsTopicListReducer} from \"./topic-list/state/sns-topic-list.reducer\";\nimport {SnsTopicListEffects} from \"./topic-list/state/sns-topic-list.effects\";\nimport {SnsMessageListComponent} from \"./message-list/sns-message-list.component\";\nimport {SnsTopicListComponent} from \"./topic-list/topic-list.component\";\nimport {SnsTopicDetailComponent} from \"./topic-detail/topic-detail.component\";\nimport {SnsService} from \"./service/sns-service.component\";\nimport {snsTopicDetailReducer, snsTopicDetailsFeatureKey} from \"./topic-detail/state/sns-topic-detail.reducer\";\nimport {SnsTopicDetailEffects} from \"./topic-detail/state/sns-topic-detail.effects\";\nimport {snsMessageListFeatureKey, snsMessageListReducer} from \"./message-list/state/sns-message-list.reducer\";\nimport {SnsMessageListEffects} from \"./message-list/state/sns-message-list.effects\";\n\n@NgModule({\n    declarations: [SnsTopicListComponent, SnsTopicDetailComponent, SnsMessageListComponent],\n    imports: [\n        MatCard,\n        MatCardHeader,\n        MatCardContent,\n        MatCardActions,\n        MatCardSubtitle,\n        MatCardTitle,\n        MatTable,\n        MatHeaderCellDef,\n        MatCellDef,\n        MatColumnDef,\n        MatIcon,\n        MatHeaderCell,\n        MatCell,\n        MatHeaderRowDef,\n        MatHeaderRow,\n        MatSortHeader,\n        MatRowDef,\n        MatNoDataRow,\n        MatIconButton,\n        MatRow,\n        MatPaginator,\n        MatSort,\n        MatTooltip,\n        RouterLink,\n        MatListItem,\n        MatNavList,\n        DatePipe,\n        MatFormField,\n        MatInput,\n        MatLabel,\n        MatSuffix,\n        MatGridTile,\n        MatGridList,\n        MatList,\n        MatTabGroup,\n        MatTab,\n        MatButton,\n        NgIf,\n        ReactiveFormsModule,\n        FormsModule,\n        AsyncPipe,\n        SnsRoutingModule,\n        StoreModule.forFeature(snsTopicListFeatureKey, snsTopicListReducer),\n        StoreModule.forFeature(snsTopicDetailsFeatureKey, snsTopicDetailReducer),\n        StoreModule.forFeature(snsMessageListFeatureKey, snsMessageListReducer),\n        EffectsModule.forFeature([SnsTopicListEffects, SnsTopicDetailEffects, SnsMessageListEffects]),\n    ],\n    exports: [SnsTopicListComponent, SnsTopicDetailComponent, SnsMessageListComponent],\n    providers: [SnsService],\n})\nexport class SnsModule {\n}\n"],"mappings":"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","names":["getRuntimeConfig","_","t","getRuntimeConfig","key","e","Command","o","Command","o","Command","o","Command","o","Command","o","e","initialState","e","initialState","selectIsLoading","selectPageSize","selectPageIndex","selectPageSize","selectPageIndex","e","_c0"],"x_google_ignoreList":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}