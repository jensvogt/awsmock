cmake_minimum_required(VERSION 3.22)

#set(CMAKE_TOOLCHAIN_FILE)

project(awsmock)

# Defaults
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_BUILD_PARALLEL_LEVEL 16)
if (WIN32)
    add_definitions(-D_WIN32_WINNT=0x0A00)
    add_compile_options(/MP16 "/Zc:__cplusplus" /EHsc)
else ()

    if (${CMAKE_BUILD_TYPE} MATCHES Debug)
        add_compile_options("$<$<CONFIG:Debug>:-Og>")
    else ()
        add_compile_options("-O3")
    endif ()
    if (APPLE)
        set(CMAKE_MACOSX_RPATH true)
    endif ()
endif ()

# Doxygen
if (WIN32)
    option(BUILD_DOCUMENTATION "Create and install the HTML based API documentation (requires Doxygen and dot) " OFF)
else ()
    option(BUILD_DOCUMENTATION "Create and install the HTML based API documentation (requires Doxygen and dot) " ON)
endif ()

# Current version
file(READ "${CMAKE_SOURCE_DIR}/version.txt" PROJECT_VER)
string(STRIP "${PROJECT_VER}" PROJECT_VERSION)
string(TIMESTAMP PROJECT_BUILDDATE "%d-%m-%Y")
configure_file("${CMAKE_SOURCE_DIR}/src/core/include/awsmock/core/Version.h.in" "${CMAKE_SOURCE_DIR}/src/core/include/awsmock/core/Version.h" @ONLY)

# Build message
message("-- Building ${PROJECT_NAME} v${PROJECT_VERSION} type: ${CMAKE_BUILD_TYPE}, install prefix: ${CMAKE_INSTALL_PREFIX}")

# Set default build type release
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE PATH "" FORCE)
endif ()

# Testing
enable_testing()

# External packages
find_package(Boost CONFIG REQUIRED COMPONENTS filesystem thread program_options json process locale url)
# boost-program-options
find_package(OpenSSL CONFIG REQUIRED)
#target_link_libraries(main PRIVATE OpenSSL::SSL)
#target_link_libraries(main PRIVATE OpenSSL::Crypto)
find_package(LibArchive REQUIRED)
#target_link_libraries(main PRIVATE LibArchive::LibArchive) #
find_package(bsoncxx CONFIG REQUIRED)
#target_link_libraries(main PRIVATE $<IF:$<TARGET_EXISTS:mongo::bsoncxx_static>,mongo::bsoncxx_static,mongo::bsoncxx_shared>)
find_package(mongocxx CONFIG REQUIRED)
#target_link_libraries(main PRIVATE $<IF:$<TARGET_EXISTS:mongo::mongocxx_static>,mongo::mongocxx_static,mongo::mongocxx_shared>)
find_package(plog CONFIG REQUIRED)
#target_link_libraries(main PRIVATE plog::plog)
find_package(yaml-cpp CONFIG REQUIRED)
#target_link_libraries(main PRIVATE yaml-cpp::yaml-cpp)
find_package(jwt-cpp CONFIG REQUIRED)
#target_link_libraries(main PRIVATE jwt-cpp::jwt-cpp)
find_package(prometheus-cpp CONFIG REQUIRED)
#target_link_libraries(main PRIVATE prometheus::core prometheus::pull)
find_package(gtest CONFIG REQUIRED)
#target_link_libraries(main PRIVATE GTest::gtest GTest::gtest_main GTest::gmock GTest::gmock_main)
find_package(unofficial-libmagic REQUIRED)
#target_link_libraries(main PRIVATE unofficial::libmagic::libmagic)

# Set includes and libraries
#if (WIN32)
#    set(EXT_INCLUDE D:/work/lib/include)
#    set(EXT_LIB D:/work/lib/lib)
#    set(INC_BSON_CXX ${EXT_INCLUDE}/bsoncxx/v_noabi)
#    set(INC_MONGO_CXX ${EXT_INCLUDE}/mongocxx/v_noabi)
#    set(LIB_YAML debug yaml-cppd.lib optimized yaml-cpp.lib)
#    set(LIB_BSON_CXX debug bsoncxx-v_noabi-dhi-x64-v143-mdd.lib optimized bsoncxx-v_noabi-rhi-x64-v143-md.lib)
#    set(LIB_MONGO_CXX debug mongocxx-v_noabi-dhi-x64-v143-mdd.lib optimized mongocxx-v_noabi-rhi-x64-v143-md.lib)
#    set(LIB_BOOST_LOCALE debug libboost_locale-vc143-mt-gd-x64-1_87.lib optimized libboost_locale-vc143-mt-x64-1_87.lib)
#    set(LIB_BOOST_THREAD debug libboost_thread-vc143-mt-gd-x64-1_87.lib optimized libboost_thread-vc143-mt-x64-1_87.lib)
#    set(LIB_BOOST_FILESYSTEM debug libboost_filesystem-vc143-mt-gd-x64-1_87.lib optimized libboost_filesystem-vc143-mt-x64-1_87.lib)
#    set(LIB_BOOST_URL debug libboost_url-vc143-mt-gd-x64-1_87.lib optimized libboost_url-vc143-mt-x64-1_87.lib)
#    set(LIB_BOOST_PROGRAM_OPTIONS debug boost_program_options-vc143-mt-gd-x64-1_87.lib optimized boost_program_options-vc143-mt-x64-1_87.lib)
#    set(LIB_BOOST_PROCESS debug boost_process-vc143-mt-gd-x64-1_87.lib optimized boost_process-vc143-mt-x64-1_87.lib)
#    set(LIB_MAGIC libmagic.lib)
#    set(LIB_SSL libssl.lib)
#    set(LIB_CRYPTO libcrypto.lib)
#    set(LIB_ARCHIVE archive.lib)
#    set(LIB_GTEST gtest.lib)
#    set(LIB_PROMETHEUS prometheus-cpp-core.lib prometheus-cpp-pull.lib)
#    set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
#    set(INSTALL_DIR "C:/Program Files (x86)/awsmock")
#    set(LIB_INSTALL_DIR ${INSTALL_DIR}/bin)
#    set(BIN_INSTALL_DIR ${INSTALL_DIR}/bin)
#else ()
#    set(EXT_INCLUDE /usr/local/include)
#    set(EXT_LIB /usr/local/lib)
#    set(INC_BSON_CXX ${EXT_INCLUDE}/bsoncxx/v_noabi)
#    set(INC_MONGO_CXX ${EXT_INCLUDE}/mongocxx/v_noabi)
#    set(LIB_BSON_CXX bsoncxx)
#    set(LIB_MONGO_CXX mongocxx)
#    set(LIB_BOOST_LOCALE boost_locale)
#    set(LIB_BOOST_FILESYSTEM boost_filesystem)
#    set(LIB_BOOST_URL boost_url)
#    set(LIB_BOOST_THREAD boost_thread)
#    set(LIB_BOOST_PROGRAM_OPTIONS boost_program_options)
#    set(LIB_BOOST_PROCESS boost_process)
#    set(LIB_SSL ssl)
#    set(LIB_CRYPTO crypto)
#    set(LIB_ARCHIVE archive)
#    set(LIB_MAGIC magic)
#    set(LIB_YAML yaml-cpp)
#    set(LIB_GTEST gtest)
#    set(LIB_PROMETHEUS prometheus-cpp-core prometheus-cpp-pull)
#    set(INSTALL_DIR /usr/local/awsmock)
#    set(LIB_INSTALL_DIR ${INSTALL_DIR}/lib)
#    set(BIN_INSTALL_DIR ${INSTALL_DIR}/bin)
#endif ()

add_subdirectory(src/core)
#add_subdirectory(src/db)
#add_subdirectory(src/dto)
#add_subdirectory(src/service)
#add_subdirectory(src/manager)
#add_subdirectory(src/controller)
#add_subdirectory(src/awslocal)
#add_subdirectory(docs)

install(DIRECTORY DESTINATION ${INSTALL_DIR})
install(DIRECTORY DESTINATION ${INSTALL_DIR}/bin)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/lib)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/etc)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/log)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/frontend)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/samples)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/data)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/data/s3)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/data/sqs)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/data/sns)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/data/lambda)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/data/transfer)
install(DIRECTORY DESTINATION ${INSTALL_DIR}/data/tmp)
install(DIRECTORY dist/samples/ DESTINATION ${INSTALL_DIR}/samples)
if (WIN32)
    install(FILES dist/etc/awsmock_win32.yml DESTINATION ${INSTALL_DIR}/etc RENAME awsmock.yml)
elseif (LINUX)
    install(FILES dist/etc/awsmock_linux.yml DESTINATION ${INSTALL_DIR}/etc RENAME awsmock.yml)
elseif (APPLE)
    install(FILES dist/etc/awsmock_macos.yml DESTINATION ${INSTALL_DIR}/etc RENAME awsmock.yml)
endif ()

# Service installation
if (LINUX)
    install(FILES dist/etc/systemd/system/awsmock.service DESTINATION /etc/systemd/system)
elseif (APPLE)
    install(FILES dist/macos/de.jensvogt.awsmock.plist DESTINATION /Library/LaunchDaemons)
endif ()